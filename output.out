DEBUG: Leyendo archivo 'prueba.scm'...
DEBUG: Iniciando procesamiento de entrada...
DEBUG: Texto de entrada recibido:
DEBUG: Lexer inicializado.
DEBUG: TokenStream generado.
DEBUG: Parser inicializado.
DEBUG: Árbol AST generado:
(root (declaration ( define ( es-divisible x y ) (block (stmt (expr ( = (expr ( mod (expr x) (expr y) )) (expr 0) )))) )) (declaration ( define ( primo-rec n x ) (block (stmt (expr ( if (expr ( > (expr ( * (expr x) (expr x) )) (expr n) )) (expr #t) (expr ( if (expr ( (expr es-divisible (expr n) (expr x)) )) (expr #f) (expr ( (expr primo-rec (expr n) (expr ( + (expr x) (expr 1) ))) )) )) )))) )) (declaration ( define ( es-primo n ) (block (stmt (expr ( if (expr ( < (expr n) (expr 2) )) (expr #f) (expr ( (expr primo-rec (expr n) (expr 2)) )) )))) )) (expr ( display (expr ( (expr es-primo (expr 2)) )) )) (expr ( newline )) (expr ( display (expr ( (expr es-primo (expr 4)) )) )) (expr ( newline )) (expr ( display (expr ( (expr es-primo (expr 17)) )) )) (expr ( newline )) <EOF>)
DEBUG: Visitador inicializado.
DEBUG: Visitando nodo: RootContext, texto: (define(es-divisiblexy)(=(modxy)0))(define(primo-recnx)(if(>(*xx)n)#t(if(es-divisiblenx)#f(primo-recn(+x1)))))(define(es-primon)(if(<n2)#f(primo-recn2)))(display(es-primo2))(newline)(display(es-primo4))(newline)(display(es-primo17))(newline)<EOF>
DEBUG: visitRoot - Start
DEBUG: visitRoot - Visiting child: (define(es-divisiblexy)(=(modxy)0))
DEBUG: Visitando nodo: FunctionDeclarationContext, texto: (define(es-divisiblexy)(=(modxy)0))
DEBUG: visitFunctionDeclaration - Function 'es-divisible' defined with params ['x', 'y'] and block (=(modxy)0)
DEBUG: Nodo FunctionDeclarationContext evaluado con resultado: es-divisible
DEBUG: visitRoot - Visiting child: (define(primo-recnx)(if(>(*xx)n)#t(if(es-divisiblenx)#f(primo-recn(+x1)))))
DEBUG: Visitando nodo: FunctionDeclarationContext, texto: (define(primo-recnx)(if(>(*xx)n)#t(if(es-divisiblenx)#f(primo-recn(+x1)))))
DEBUG: visitFunctionDeclaration - Function 'primo-rec' defined with params ['n', 'x'] and block (if(>(*xx)n)#t(if(es-divisiblenx)#f(primo-recn(+x1))))
DEBUG: Nodo FunctionDeclarationContext evaluado con resultado: primo-rec
DEBUG: visitRoot - Visiting child: (define(es-primon)(if(<n2)#f(primo-recn2)))
DEBUG: Visitando nodo: FunctionDeclarationContext, texto: (define(es-primon)(if(<n2)#f(primo-recn2)))
DEBUG: visitFunctionDeclaration - Function 'es-primo' defined with params ['n'] and block (if(<n2)#f(primo-recn2))
DEBUG: Nodo FunctionDeclarationContext evaluado con resultado: es-primo
DEBUG: visitRoot - Visiting child: (display(es-primo2))
DEBUG: Visitando nodo: DisplayExprContext, texto: (display(es-primo2))
DEBUG: visitDisplayExpr - Start, texto: (display(es-primo2))
DEBUG: Visitando nodo: GroupExprContext, texto: (es-primo2)
DEBUG: visitGroupExpr - Start, texto: (es-primo2)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: es-primo2
DEBUG: visitFunctionCallExpr - Llamando función: es-primo
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['n'], Args: [2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{}, {'n': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (if(<n2)#f(primo-recn2))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (if(<n2)#f(primo-recn2))
DEBUG: visitIfExpr - Start
DEBUG: Visitando nodo: ComparisonExprContext, texto: (<n2)
DEBUG: visitComparisonExpr - Start, texto: (<n2)
DEBUG: Visitando nodo: VariableExprContext, texto: n
DEBUG: visitVariableExpr - Accediendo a variable: n
DEBUG: visitVariableExpr - Encontrada en SymbolTable: n = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitComparisonExpr - Left: 2, Right: 2, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ComparisonExprContext evaluado con resultado: False
DEBUG: visitIfExpr - Condition evaluated: False
DEBUG: Visitando nodo: GroupExprContext, texto: (primo-recn2)
DEBUG: visitGroupExpr - Start, texto: (primo-recn2)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: primo-recn2
DEBUG: visitFunctionCallExpr - Llamando función: primo-rec
DEBUG: Visitando nodo: VariableExprContext, texto: n
DEBUG: visitVariableExpr - Accediendo a variable: n
DEBUG: visitVariableExpr - Encontrada en SymbolTable: n = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['n', 'x'], Args: [2, 2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{}, {'n': 2}, {'n': 2, 'x': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (if(>(*xx)n)#t(if(es-divisiblenx)#f(primo-recn(+x1))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (if(>(*xx)n)#t(if(es-divisiblenx)#f(primo-recn(+x1))))
DEBUG: visitIfExpr - Start
DEBUG: Visitando nodo: ComparisonExprContext, texto: (>(*xx)n)
DEBUG: visitComparisonExpr - Start, texto: (>(*xx)n)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (*xx)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 2, Right: 2
DEBUG: visitArithmeticExpr - Result: 4
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: VariableExprContext, texto: n
DEBUG: visitVariableExpr - Accediendo a variable: n
DEBUG: visitVariableExpr - Encontrada en SymbolTable: n = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: visitComparisonExpr - Left: 4, Right: 2, Operator: >
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ComparisonExprContext evaluado con resultado: True
DEBUG: visitIfExpr - Condition evaluated: True
DEBUG: Visitando nodo: TrueExprContext, texto: #t
DEBUG: Nodo TrueExprContext evaluado con resultado: None
DEBUG: visitIfExpr - True branch result: None
DEBUG: visitIfExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: None
DEBUG: visitBlock - Visiting stmt, result: None
DEBUG: visitBlock - End with result: 0
DEBUG: Nodo BlockContext evaluado con resultado: 0
DEBUG: visitFunctionCallExpr - Resultado: 0, SymbolTable después de limpiar scope: [{}, {'n': 2}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 0
DEBUG: visitGroupExpr - Result: 0
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 0
DEBUG: visitIfExpr - False branch result: 0
DEBUG: visitIfExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 0
DEBUG: visitBlock - Visiting stmt, result: 0
DEBUG: visitBlock - End with result: 0
DEBUG: Nodo BlockContext evaluado con resultado: 0
DEBUG: visitFunctionCallExpr - Resultado: 0, SymbolTable después de limpiar scope: [{}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 0
DEBUG: visitGroupExpr - Result: 0
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 0
DEBUG: visitDisplayExpr - Valor evaluado: 0
0DEBUG: visitDisplayExpr - End
DEBUG: Nodo DisplayExprContext evaluado con resultado: 0
DEBUG: visitRoot - Visiting child: (newline)
DEBUG: Visitando nodo: NewlineExprContext, texto: (newline)
DEBUG: visitNewlineExpr - Printing newline

DEBUG: Nodo NewlineExprContext evaluado con resultado: None
DEBUG: visitRoot - Visiting child: (display(es-primo4))
DEBUG: Visitando nodo: DisplayExprContext, texto: (display(es-primo4))
DEBUG: visitDisplayExpr - Start, texto: (display(es-primo4))
DEBUG: Visitando nodo: GroupExprContext, texto: (es-primo4)
DEBUG: visitGroupExpr - Start, texto: (es-primo4)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: es-primo4
DEBUG: visitFunctionCallExpr - Llamando función: es-primo
DEBUG: Visitando nodo: NumberExprContext, texto: 4
DEBUG: visitNumberExpr - Number: 4
DEBUG: Nodo NumberExprContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Params: ['n'], Args: [4]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{}, {'n': 4}]
DEBUG: Visitando nodo: BlockContext, texto: (if(<n2)#f(primo-recn2))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (if(<n2)#f(primo-recn2))
DEBUG: visitIfExpr - Start
DEBUG: Visitando nodo: ComparisonExprContext, texto: (<n2)
DEBUG: visitComparisonExpr - Start, texto: (<n2)
DEBUG: Visitando nodo: VariableExprContext, texto: n
DEBUG: visitVariableExpr - Accediendo a variable: n
DEBUG: visitVariableExpr - Encontrada en SymbolTable: n = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitComparisonExpr - Left: 4, Right: 2, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ComparisonExprContext evaluado con resultado: False
DEBUG: visitIfExpr - Condition evaluated: False
DEBUG: Visitando nodo: GroupExprContext, texto: (primo-recn2)
DEBUG: visitGroupExpr - Start, texto: (primo-recn2)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: primo-recn2
DEBUG: visitFunctionCallExpr - Llamando función: primo-rec
DEBUG: Visitando nodo: VariableExprContext, texto: n
DEBUG: visitVariableExpr - Accediendo a variable: n
DEBUG: visitVariableExpr - Encontrada en SymbolTable: n = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['n', 'x'], Args: [4, 2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{}, {'n': 4}, {'n': 4, 'x': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (if(>(*xx)n)#t(if(es-divisiblenx)#f(primo-recn(+x1))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (if(>(*xx)n)#t(if(es-divisiblenx)#f(primo-recn(+x1))))
DEBUG: visitIfExpr - Start
DEBUG: Visitando nodo: ComparisonExprContext, texto: (>(*xx)n)
DEBUG: visitComparisonExpr - Start, texto: (>(*xx)n)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (*xx)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 2, Right: 2
DEBUG: visitArithmeticExpr - Result: 4
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: VariableExprContext, texto: n
DEBUG: visitVariableExpr - Accediendo a variable: n
DEBUG: visitVariableExpr - Encontrada en SymbolTable: n = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: visitComparisonExpr - Left: 4, Right: 4, Operator: >
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ComparisonExprContext evaluado con resultado: False
DEBUG: visitIfExpr - Condition evaluated: False
DEBUG: Visitando nodo: IfExprContext, texto: (if(es-divisiblenx)#f(primo-recn(+x1)))
DEBUG: visitIfExpr - Start
DEBUG: Visitando nodo: GroupExprContext, texto: (es-divisiblenx)
DEBUG: visitGroupExpr - Start, texto: (es-divisiblenx)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: es-divisiblenx
DEBUG: visitFunctionCallExpr - Llamando función: es-divisible
DEBUG: Visitando nodo: VariableExprContext, texto: n
DEBUG: visitVariableExpr - Accediendo a variable: n
DEBUG: visitVariableExpr - Encontrada en SymbolTable: n = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['x', 'y'], Args: [4, 2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{}, {'n': 4}, {'n': 4, 'x': 2}, {'x': 4, 'y': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modxy)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modxy)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modxy)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modxy)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: VariableExprContext, texto: y
DEBUG: visitVariableExpr - Accediendo a variable: y
DEBUG: visitVariableExpr - Encontrada en SymbolTable: y = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 4, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 0, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{}, {'n': 4}, {'n': 4, 'x': 2}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitIfExpr - Condition evaluated: True
DEBUG: Visitando nodo: FalseExprContext, texto: #f
DEBUG: Nodo FalseExprContext evaluado con resultado: None
DEBUG: visitIfExpr - True branch result: None
DEBUG: visitIfExpr - End
DEBUG: Nodo IfExprContext evaluado con resultado: None
DEBUG: visitIfExpr - False branch result: None
DEBUG: visitIfExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: None
DEBUG: visitBlock - Visiting stmt, result: None
DEBUG: visitBlock - End with result: 0
DEBUG: Nodo BlockContext evaluado con resultado: 0
DEBUG: visitFunctionCallExpr - Resultado: 0, SymbolTable después de limpiar scope: [{}, {'n': 4}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 0
DEBUG: visitGroupExpr - Result: 0
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 0
DEBUG: visitIfExpr - False branch result: 0
DEBUG: visitIfExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 0
DEBUG: visitBlock - Visiting stmt, result: 0
DEBUG: visitBlock - End with result: 0
DEBUG: Nodo BlockContext evaluado con resultado: 0
DEBUG: visitFunctionCallExpr - Resultado: 0, SymbolTable después de limpiar scope: [{}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 0
DEBUG: visitGroupExpr - Result: 0
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 0
DEBUG: visitDisplayExpr - Valor evaluado: 0
0DEBUG: visitDisplayExpr - End
DEBUG: Nodo DisplayExprContext evaluado con resultado: 0
DEBUG: visitRoot - Visiting child: (newline)
DEBUG: Visitando nodo: NewlineExprContext, texto: (newline)
DEBUG: visitNewlineExpr - Printing newline

DEBUG: Nodo NewlineExprContext evaluado con resultado: None
DEBUG: visitRoot - Visiting child: (display(es-primo17))
DEBUG: Visitando nodo: DisplayExprContext, texto: (display(es-primo17))
DEBUG: visitDisplayExpr - Start, texto: (display(es-primo17))
DEBUG: Visitando nodo: GroupExprContext, texto: (es-primo17)
DEBUG: visitGroupExpr - Start, texto: (es-primo17)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: es-primo17
DEBUG: visitFunctionCallExpr - Llamando función: es-primo
DEBUG: Visitando nodo: NumberExprContext, texto: 17
DEBUG: visitNumberExpr - Number: 17
DEBUG: Nodo NumberExprContext evaluado con resultado: 17
DEBUG: visitFunctionCallExpr - Params: ['n'], Args: [17]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{}, {'n': 17}]
DEBUG: Visitando nodo: BlockContext, texto: (if(<n2)#f(primo-recn2))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (if(<n2)#f(primo-recn2))
DEBUG: visitIfExpr - Start
DEBUG: Visitando nodo: ComparisonExprContext, texto: (<n2)
DEBUG: visitComparisonExpr - Start, texto: (<n2)
DEBUG: Visitando nodo: VariableExprContext, texto: n
DEBUG: visitVariableExpr - Accediendo a variable: n
DEBUG: visitVariableExpr - Encontrada en SymbolTable: n = 17
DEBUG: Nodo VariableExprContext evaluado con resultado: 17
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitComparisonExpr - Left: 17, Right: 2, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ComparisonExprContext evaluado con resultado: False
DEBUG: visitIfExpr - Condition evaluated: False
DEBUG: Visitando nodo: GroupExprContext, texto: (primo-recn2)
DEBUG: visitGroupExpr - Start, texto: (primo-recn2)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: primo-recn2
DEBUG: visitFunctionCallExpr - Llamando función: primo-rec
DEBUG: Visitando nodo: VariableExprContext, texto: n
DEBUG: visitVariableExpr - Accediendo a variable: n
DEBUG: visitVariableExpr - Encontrada en SymbolTable: n = 17
DEBUG: Nodo VariableExprContext evaluado con resultado: 17
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['n', 'x'], Args: [17, 2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{}, {'n': 17}, {'n': 17, 'x': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (if(>(*xx)n)#t(if(es-divisiblenx)#f(primo-recn(+x1))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (if(>(*xx)n)#t(if(es-divisiblenx)#f(primo-recn(+x1))))
DEBUG: visitIfExpr - Start
DEBUG: Visitando nodo: ComparisonExprContext, texto: (>(*xx)n)
DEBUG: visitComparisonExpr - Start, texto: (>(*xx)n)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (*xx)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 2, Right: 2
DEBUG: visitArithmeticExpr - Result: 4
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: VariableExprContext, texto: n
DEBUG: visitVariableExpr - Accediendo a variable: n
DEBUG: visitVariableExpr - Encontrada en SymbolTable: n = 17
DEBUG: Nodo VariableExprContext evaluado con resultado: 17
DEBUG: visitComparisonExpr - Left: 4, Right: 17, Operator: >
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ComparisonExprContext evaluado con resultado: False
DEBUG: visitIfExpr - Condition evaluated: False
DEBUG: Visitando nodo: IfExprContext, texto: (if(es-divisiblenx)#f(primo-recn(+x1)))
DEBUG: visitIfExpr - Start
DEBUG: Visitando nodo: GroupExprContext, texto: (es-divisiblenx)
DEBUG: visitGroupExpr - Start, texto: (es-divisiblenx)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: es-divisiblenx
DEBUG: visitFunctionCallExpr - Llamando función: es-divisible
DEBUG: Visitando nodo: VariableExprContext, texto: n
DEBUG: visitVariableExpr - Accediendo a variable: n
DEBUG: visitVariableExpr - Encontrada en SymbolTable: n = 17
DEBUG: Nodo VariableExprContext evaluado con resultado: 17
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['x', 'y'], Args: [17, 2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{}, {'n': 17}, {'n': 17, 'x': 2}, {'x': 17, 'y': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modxy)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modxy)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modxy)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modxy)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 17
DEBUG: Nodo VariableExprContext evaluado con resultado: 17
DEBUG: Visitando nodo: VariableExprContext, texto: y
DEBUG: visitVariableExpr - Accediendo a variable: y
DEBUG: visitVariableExpr - Encontrada en SymbolTable: y = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 17, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 1, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{}, {'n': 17}, {'n': 17, 'x': 2}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitIfExpr - Condition evaluated: False
DEBUG: Visitando nodo: GroupExprContext, texto: (primo-recn(+x1))
DEBUG: visitGroupExpr - Start, texto: (primo-recn(+x1))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: primo-recn(+x1)
DEBUG: visitFunctionCallExpr - Llamando función: primo-rec
DEBUG: Visitando nodo: VariableExprContext, texto: n
DEBUG: visitVariableExpr - Accediendo a variable: n
DEBUG: visitVariableExpr - Encontrada en SymbolTable: n = 17
DEBUG: Nodo VariableExprContext evaluado con resultado: 17
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (+x1)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitArithmeticExpr - Operator: +, Left: 2, Right: 1
DEBUG: visitArithmeticExpr - Result: 3
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 3
DEBUG: visitFunctionCallExpr - Params: ['n', 'x'], Args: [17, 3]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{}, {'n': 17}, {'n': 17, 'x': 2}, {'n': 17, 'x': 3}]
DEBUG: Visitando nodo: BlockContext, texto: (if(>(*xx)n)#t(if(es-divisiblenx)#f(primo-recn(+x1))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (if(>(*xx)n)#t(if(es-divisiblenx)#f(primo-recn(+x1))))
DEBUG: visitIfExpr - Start
DEBUG: Visitando nodo: ComparisonExprContext, texto: (>(*xx)n)
DEBUG: visitComparisonExpr - Start, texto: (>(*xx)n)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (*xx)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: visitArithmeticExpr - Operator: *, Left: 3, Right: 3
DEBUG: visitArithmeticExpr - Result: 9
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 9
DEBUG: Visitando nodo: VariableExprContext, texto: n
DEBUG: visitVariableExpr - Accediendo a variable: n
DEBUG: visitVariableExpr - Encontrada en SymbolTable: n = 17
DEBUG: Nodo VariableExprContext evaluado con resultado: 17
DEBUG: visitComparisonExpr - Left: 9, Right: 17, Operator: >
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ComparisonExprContext evaluado con resultado: False
DEBUG: visitIfExpr - Condition evaluated: False
DEBUG: Visitando nodo: IfExprContext, texto: (if(es-divisiblenx)#f(primo-recn(+x1)))
DEBUG: visitIfExpr - Start
DEBUG: Visitando nodo: GroupExprContext, texto: (es-divisiblenx)
DEBUG: visitGroupExpr - Start, texto: (es-divisiblenx)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: es-divisiblenx
DEBUG: visitFunctionCallExpr - Llamando función: es-divisible
DEBUG: Visitando nodo: VariableExprContext, texto: n
DEBUG: visitVariableExpr - Accediendo a variable: n
DEBUG: visitVariableExpr - Encontrada en SymbolTable: n = 17
DEBUG: Nodo VariableExprContext evaluado con resultado: 17
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: visitFunctionCallExpr - Params: ['x', 'y'], Args: [17, 3]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{}, {'n': 17}, {'n': 17, 'x': 2}, {'n': 17, 'x': 3}, {'x': 17, 'y': 3}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modxy)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modxy)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modxy)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modxy)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 17
DEBUG: Nodo VariableExprContext evaluado con resultado: 17
DEBUG: Visitando nodo: VariableExprContext, texto: y
DEBUG: visitVariableExpr - Accediendo a variable: y
DEBUG: visitVariableExpr - Encontrada en SymbolTable: y = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: visitArithmeticExpr - Operator: mod, Left: 17, Right: 3
DEBUG: visitArithmeticExpr - Result: 2
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 2, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{}, {'n': 17}, {'n': 17, 'x': 2}, {'n': 17, 'x': 3}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitIfExpr - Condition evaluated: False
DEBUG: Visitando nodo: GroupExprContext, texto: (primo-recn(+x1))
DEBUG: visitGroupExpr - Start, texto: (primo-recn(+x1))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: primo-recn(+x1)
DEBUG: visitFunctionCallExpr - Llamando función: primo-rec
DEBUG: Visitando nodo: VariableExprContext, texto: n
DEBUG: visitVariableExpr - Accediendo a variable: n
DEBUG: visitVariableExpr - Encontrada en SymbolTable: n = 17
DEBUG: Nodo VariableExprContext evaluado con resultado: 17
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (+x1)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitArithmeticExpr - Operator: +, Left: 3, Right: 1
DEBUG: visitArithmeticExpr - Result: 4
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Params: ['n', 'x'], Args: [17, 4]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{}, {'n': 17}, {'n': 17, 'x': 2}, {'n': 17, 'x': 3}, {'n': 17, 'x': 4}]
DEBUG: Visitando nodo: BlockContext, texto: (if(>(*xx)n)#t(if(es-divisiblenx)#f(primo-recn(+x1))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (if(>(*xx)n)#t(if(es-divisiblenx)#f(primo-recn(+x1))))
DEBUG: visitIfExpr - Start
DEBUG: Visitando nodo: ComparisonExprContext, texto: (>(*xx)n)
DEBUG: visitComparisonExpr - Start, texto: (>(*xx)n)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (*xx)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: visitArithmeticExpr - Operator: *, Left: 4, Right: 4
DEBUG: visitArithmeticExpr - Result: 16
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 16
DEBUG: Visitando nodo: VariableExprContext, texto: n
DEBUG: visitVariableExpr - Accediendo a variable: n
DEBUG: visitVariableExpr - Encontrada en SymbolTable: n = 17
DEBUG: Nodo VariableExprContext evaluado con resultado: 17
DEBUG: visitComparisonExpr - Left: 16, Right: 17, Operator: >
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ComparisonExprContext evaluado con resultado: False
DEBUG: visitIfExpr - Condition evaluated: False
DEBUG: Visitando nodo: IfExprContext, texto: (if(es-divisiblenx)#f(primo-recn(+x1)))
DEBUG: visitIfExpr - Start
DEBUG: Visitando nodo: GroupExprContext, texto: (es-divisiblenx)
DEBUG: visitGroupExpr - Start, texto: (es-divisiblenx)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: es-divisiblenx
DEBUG: visitFunctionCallExpr - Llamando función: es-divisible
DEBUG: Visitando nodo: VariableExprContext, texto: n
DEBUG: visitVariableExpr - Accediendo a variable: n
DEBUG: visitVariableExpr - Encontrada en SymbolTable: n = 17
DEBUG: Nodo VariableExprContext evaluado con resultado: 17
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Params: ['x', 'y'], Args: [17, 4]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{}, {'n': 17}, {'n': 17, 'x': 2}, {'n': 17, 'x': 3}, {'n': 17, 'x': 4}, {'x': 17, 'y': 4}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modxy)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modxy)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modxy)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modxy)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 17
DEBUG: Nodo VariableExprContext evaluado con resultado: 17
DEBUG: Visitando nodo: VariableExprContext, texto: y
DEBUG: visitVariableExpr - Accediendo a variable: y
DEBUG: visitVariableExpr - Encontrada en SymbolTable: y = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: visitArithmeticExpr - Operator: mod, Left: 17, Right: 4
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 1, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{}, {'n': 17}, {'n': 17, 'x': 2}, {'n': 17, 'x': 3}, {'n': 17, 'x': 4}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitIfExpr - Condition evaluated: False
DEBUG: Visitando nodo: GroupExprContext, texto: (primo-recn(+x1))
DEBUG: visitGroupExpr - Start, texto: (primo-recn(+x1))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: primo-recn(+x1)
DEBUG: visitFunctionCallExpr - Llamando función: primo-rec
DEBUG: Visitando nodo: VariableExprContext, texto: n
DEBUG: visitVariableExpr - Accediendo a variable: n
DEBUG: visitVariableExpr - Encontrada en SymbolTable: n = 17
DEBUG: Nodo VariableExprContext evaluado con resultado: 17
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (+x1)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitArithmeticExpr - Operator: +, Left: 4, Right: 1
DEBUG: visitArithmeticExpr - Result: 5
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 5
DEBUG: visitFunctionCallExpr - Params: ['n', 'x'], Args: [17, 5]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{}, {'n': 17}, {'n': 17, 'x': 2}, {'n': 17, 'x': 3}, {'n': 17, 'x': 4}, {'n': 17, 'x': 5}]
DEBUG: Visitando nodo: BlockContext, texto: (if(>(*xx)n)#t(if(es-divisiblenx)#f(primo-recn(+x1))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (if(>(*xx)n)#t(if(es-divisiblenx)#f(primo-recn(+x1))))
DEBUG: visitIfExpr - Start
DEBUG: Visitando nodo: ComparisonExprContext, texto: (>(*xx)n)
DEBUG: visitComparisonExpr - Start, texto: (>(*xx)n)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (*xx)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 5
DEBUG: Nodo VariableExprContext evaluado con resultado: 5
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 5
DEBUG: Nodo VariableExprContext evaluado con resultado: 5
DEBUG: visitArithmeticExpr - Operator: *, Left: 5, Right: 5
DEBUG: visitArithmeticExpr - Result: 25
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 25
DEBUG: Visitando nodo: VariableExprContext, texto: n
DEBUG: visitVariableExpr - Accediendo a variable: n
DEBUG: visitVariableExpr - Encontrada en SymbolTable: n = 17
DEBUG: Nodo VariableExprContext evaluado con resultado: 17
DEBUG: visitComparisonExpr - Left: 25, Right: 17, Operator: >
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ComparisonExprContext evaluado con resultado: True
DEBUG: visitIfExpr - Condition evaluated: True
DEBUG: Visitando nodo: TrueExprContext, texto: #t
DEBUG: Nodo TrueExprContext evaluado con resultado: None
DEBUG: visitIfExpr - True branch result: None
DEBUG: visitIfExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: None
DEBUG: visitBlock - Visiting stmt, result: None
DEBUG: visitBlock - End with result: 0
DEBUG: Nodo BlockContext evaluado con resultado: 0
DEBUG: visitFunctionCallExpr - Resultado: 0, SymbolTable después de limpiar scope: [{}, {'n': 17}, {'n': 17, 'x': 2}, {'n': 17, 'x': 3}, {'n': 17, 'x': 4}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 0
DEBUG: visitGroupExpr - Result: 0
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 0
DEBUG: visitIfExpr - False branch result: 0
DEBUG: visitIfExpr - End
DEBUG: Nodo IfExprContext evaluado con resultado: 0
DEBUG: visitIfExpr - False branch result: 0
DEBUG: visitIfExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 0
DEBUG: visitBlock - Visiting stmt, result: 0
DEBUG: visitBlock - End with result: 0
DEBUG: Nodo BlockContext evaluado con resultado: 0
DEBUG: visitFunctionCallExpr - Resultado: 0, SymbolTable después de limpiar scope: [{}, {'n': 17}, {'n': 17, 'x': 2}, {'n': 17, 'x': 3}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 0
DEBUG: visitGroupExpr - Result: 0
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 0
DEBUG: visitIfExpr - False branch result: 0
DEBUG: visitIfExpr - End
DEBUG: Nodo IfExprContext evaluado con resultado: 0
DEBUG: visitIfExpr - False branch result: 0
DEBUG: visitIfExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 0
DEBUG: visitBlock - Visiting stmt, result: 0
DEBUG: visitBlock - End with result: 0
DEBUG: Nodo BlockContext evaluado con resultado: 0
DEBUG: visitFunctionCallExpr - Resultado: 0, SymbolTable después de limpiar scope: [{}, {'n': 17}, {'n': 17, 'x': 2}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 0
DEBUG: visitGroupExpr - Result: 0
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 0
DEBUG: visitIfExpr - False branch result: 0
DEBUG: visitIfExpr - End
DEBUG: Nodo IfExprContext evaluado con resultado: 0
DEBUG: visitIfExpr - False branch result: 0
DEBUG: visitIfExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 0
DEBUG: visitBlock - Visiting stmt, result: 0
DEBUG: visitBlock - End with result: 0
DEBUG: Nodo BlockContext evaluado con resultado: 0
DEBUG: visitFunctionCallExpr - Resultado: 0, SymbolTable después de limpiar scope: [{}, {'n': 17}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 0
DEBUG: visitGroupExpr - Result: 0
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 0
DEBUG: visitIfExpr - False branch result: 0
DEBUG: visitIfExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 0
DEBUG: visitBlock - Visiting stmt, result: 0
DEBUG: visitBlock - End with result: 0
DEBUG: Nodo BlockContext evaluado con resultado: 0
DEBUG: visitFunctionCallExpr - Resultado: 0, SymbolTable después de limpiar scope: [{}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 0
DEBUG: visitGroupExpr - Result: 0
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 0
DEBUG: visitDisplayExpr - Valor evaluado: 0
0DEBUG: visitDisplayExpr - End
DEBUG: Nodo DisplayExprContext evaluado con resultado: 0
DEBUG: visitRoot - Visiting child: (newline)
DEBUG: Visitando nodo: NewlineExprContext, texto: (newline)
DEBUG: visitNewlineExpr - Printing newline

DEBUG: Nodo NewlineExprContext evaluado con resultado: None
DEBUG: visitRoot - Visiting child: <EOF>
DEBUG: Visitando nodo: TerminalNodeImpl, texto: <EOF>
DEBUG: Nodo TerminalNodeImpl evaluado con resultado: None
DEBUG: visitRoot - End with result: es-primo
DEBUG: Nodo RootContext evaluado con resultado: es-primo
DEBUG: Resultado de la evaluación inicial: es-primo
DEBUG: No se encontró la función 'main'.
DEBUG: Procesamiento completado.

Resultados:

Funciones definidas:
es-divisible (x, y)
primo-rec (n, x)
es-primo (n)
