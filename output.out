DEBUG: Leyendo archivo 'prueba.scm'...
DEBUG: Iniciando procesamiento de entrada...
DEBUG: Texto de entrada recibido:
DEBUG: Lexer inicializado.
DEBUG: TokenStream generado.
DEBUG: Parser inicializado.
DEBUG: Árbol AST generado:
DEBUG: Visitador inicializado.
DEBUG: Visitando nodo: RootContext, texto: (define(mapfuncllista)(cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista))))))(define(filterpredicatllista)(cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista)))))(definelista'(1 2 3 4 5 6 7 8 9 10))(define(duplicarx)(*x2))(define(incrementarx)(+x1))(define(modulo2x)(modx2))(define(mayor-que-5x)(>x5))(define(menor-que-5x)(<x5))(define(es-parx)(=(modx2)0))(define(es-multiplo-de-3x)(=(modx3)0))(define(imparx)(=(modx2)1))(display(mapduplicarlista))(newline)(display(mapincrementarlista))(newline)(display(mapmodulo2lista))(newline)(display(filtermayor-que-5lista))(newline)(display(filtermenor-que-5lista))(newline)(display(filteres-parlista))(newline)(display(mapduplicar(filteres-parlista)))(newline)(display(mapduplicar(filtermenor-que-5lista)))(newline)(display(filteres-multiplo-de-3(mapduplicarlista)))(newline)(display(mapduplicar'()))(newline)(display(filtermayor-que-5'()))(newline)(display(mapincrementar(filtermenor-que-5lista)))(newline)(display(filterimparlista))(newline)(display(mapduplicar(filterimparlista)))(newline)<EOF>
DEBUG: visitRoot - Start
DEBUG: visitRoot - Visiting child: (define(mapfuncllista)(cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista))))))
DEBUG: Visitando nodo: FunctionDeclarationContext, texto: (define(mapfuncllista)(cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista))))))
DEBUG: visitFunctionDeclaration - Function 'map' defined with params ['func', 'llista'] and block (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Nodo FunctionDeclarationContext evaluado con resultado: map
DEBUG: visitRoot - Visiting child: (define(filterpredicatllista)(cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista)))))
DEBUG: Visitando nodo: FunctionDeclarationContext, texto: (define(filterpredicatllista)(cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista)))))
DEBUG: visitFunctionDeclaration - Function 'filter' defined with params ['predicat', 'llista'] and block (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Nodo FunctionDeclarationContext evaluado con resultado: filter
DEBUG: visitRoot - Visiting child: (definelista'(1 2 3 4 5 6 7 8 9 10))
DEBUG: Visitando nodo: ConstantDeclarationContext, texto: (definelista'(1 2 3 4 5 6 7 8 9 10))
DEBUG: visitConstantDeclaration - Definiendo constante: lista
DEBUG: Visitando nodo: ListLiteralExprContext, texto: '(1 2 3 4 5 6 7 8 9 10)
DEBUG: visitListLiteralExpr - Start, texto: '(1 2 3 4 5 6 7 8 9 10)
DEBUG: visitListLiteralExpr - Elementos procesados: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo ListLiteralExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitConstantDeclaration - Valor evaluado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitConstantDeclaration - SymbolTable actualizada: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo ConstantDeclarationContext evaluado con resultado: lista
DEBUG: visitRoot - Visiting child: (define(duplicarx)(*x2))
DEBUG: Visitando nodo: FunctionDeclarationContext, texto: (define(duplicarx)(*x2))
DEBUG: visitFunctionDeclaration - Function 'duplicar' defined with params ['x'] and block (*x2)
DEBUG: Nodo FunctionDeclarationContext evaluado con resultado: duplicar
DEBUG: visitRoot - Visiting child: (define(incrementarx)(+x1))
DEBUG: Visitando nodo: FunctionDeclarationContext, texto: (define(incrementarx)(+x1))
DEBUG: visitFunctionDeclaration - Function 'incrementar' defined with params ['x'] and block (+x1)
DEBUG: Nodo FunctionDeclarationContext evaluado con resultado: incrementar
DEBUG: visitRoot - Visiting child: (define(modulo2x)(modx2))
DEBUG: Visitando nodo: FunctionDeclarationContext, texto: (define(modulo2x)(modx2))
DEBUG: visitFunctionDeclaration - Function 'modulo2' defined with params ['x'] and block (modx2)
DEBUG: Nodo FunctionDeclarationContext evaluado con resultado: modulo2
DEBUG: visitRoot - Visiting child: (define(mayor-que-5x)(>x5))
DEBUG: Visitando nodo: FunctionDeclarationContext, texto: (define(mayor-que-5x)(>x5))
DEBUG: visitFunctionDeclaration - Function 'mayor-que-5' defined with params ['x'] and block (>x5)
DEBUG: Nodo FunctionDeclarationContext evaluado con resultado: mayor-que-5
DEBUG: visitRoot - Visiting child: (define(menor-que-5x)(<x5))
DEBUG: Visitando nodo: FunctionDeclarationContext, texto: (define(menor-que-5x)(<x5))
DEBUG: visitFunctionDeclaration - Function 'menor-que-5' defined with params ['x'] and block (<x5)
DEBUG: Nodo FunctionDeclarationContext evaluado con resultado: menor-que-5
DEBUG: visitRoot - Visiting child: (define(es-parx)(=(modx2)0))
DEBUG: Visitando nodo: FunctionDeclarationContext, texto: (define(es-parx)(=(modx2)0))
DEBUG: visitFunctionDeclaration - Function 'es-par' defined with params ['x'] and block (=(modx2)0)
DEBUG: Nodo FunctionDeclarationContext evaluado con resultado: es-par
DEBUG: visitRoot - Visiting child: (define(es-multiplo-de-3x)(=(modx3)0))
DEBUG: Visitando nodo: FunctionDeclarationContext, texto: (define(es-multiplo-de-3x)(=(modx3)0))
DEBUG: visitFunctionDeclaration - Function 'es-multiplo-de-3' defined with params ['x'] and block (=(modx3)0)
DEBUG: Nodo FunctionDeclarationContext evaluado con resultado: es-multiplo-de-3
DEBUG: visitRoot - Visiting child: (define(imparx)(=(modx2)1))
DEBUG: Visitando nodo: FunctionDeclarationContext, texto: (define(imparx)(=(modx2)1))
DEBUG: visitFunctionDeclaration - Function 'impar' defined with params ['x'] and block (=(modx2)1)
DEBUG: Nodo FunctionDeclarationContext evaluado con resultado: impar
DEBUG: visitRoot - Visiting child: (display(mapduplicarlista))
DEBUG: Visitando nodo: DisplayExprContext, texto: (display(mapduplicarlista))
DEBUG: visitDisplayExpr - Start, texto: (display(mapduplicarlista))
DEBUG: Visitando nodo: GroupExprContext, texto: (mapduplicarlista)
DEBUG: visitGroupExpr - Start, texto: (mapduplicarlista)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapduplicarlista
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: duplicar
DEBUG: visitVariableExpr - Accediendo a variable: duplicar
DEBUG: visitVariableExpr - Encontrada en FunctionTable: duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: VariableExprContext, texto: lista
DEBUG: visitVariableExpr - Accediendo a variable: lista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [1]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 1}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 1
DEBUG: Nodo VariableExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 1, Right: 2
DEBUG: visitArithmeticExpr - Result: 2
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 2
DEBUG: visitBlock - Visiting stmt, result: 2
DEBUG: visitBlock - End with result: 2
DEBUG: Nodo BlockContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Resultado: 2, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 2
DEBUG: visitGroupExpr - Result: 2
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 2
DEBUG: visitConsExpr - Elemento: 2
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 2, Right: 2
DEBUG: visitArithmeticExpr - Result: 4
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 4
DEBUG: visitBlock - Visiting stmt, result: 4
DEBUG: visitBlock - End with result: 4
DEBUG: Nodo BlockContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Resultado: 4, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 4
DEBUG: visitGroupExpr - Result: 4
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 4
DEBUG: visitConsExpr - Elemento: 4
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [3]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 3}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 3, Right: 2
DEBUG: visitArithmeticExpr - Result: 6
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 6
DEBUG: visitBlock - Visiting stmt, result: 6
DEBUG: visitBlock - End with result: 6
DEBUG: Nodo BlockContext evaluado con resultado: 6
DEBUG: visitFunctionCallExpr - Resultado: 6, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 6
DEBUG: visitGroupExpr - Result: 6
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 6
DEBUG: visitConsExpr - Elemento: 6
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [4]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'x': 4}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 4, Right: 2
DEBUG: visitArithmeticExpr - Result: 8
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 8
DEBUG: visitBlock - Visiting stmt, result: 8
DEBUG: visitBlock - End with result: 8
DEBUG: Nodo BlockContext evaluado con resultado: 8
DEBUG: visitFunctionCallExpr - Resultado: 8, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 8
DEBUG: visitGroupExpr - Result: 8
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 8
DEBUG: visitConsExpr - Elemento: 8
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 5
DEBUG: Nodo CarExprContext evaluado con resultado: 5
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [5]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'x': 5}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 5
DEBUG: Nodo VariableExprContext evaluado con resultado: 5
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 5, Right: 2
DEBUG: visitArithmeticExpr - Result: 10
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 10
DEBUG: visitBlock - Visiting stmt, result: 10
DEBUG: visitBlock - End with result: 10
DEBUG: Nodo BlockContext evaluado con resultado: 10
DEBUG: visitFunctionCallExpr - Resultado: 10, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 10
DEBUG: visitGroupExpr - Result: 10
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 10
DEBUG: visitConsExpr - Elemento: 10
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 6
DEBUG: Nodo CarExprContext evaluado con resultado: 6
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [6]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'x': 6}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 6
DEBUG: Nodo VariableExprContext evaluado con resultado: 6
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 6, Right: 2
DEBUG: visitArithmeticExpr - Result: 12
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 12
DEBUG: visitBlock - Visiting stmt, result: 12
DEBUG: visitBlock - End with result: 12
DEBUG: Nodo BlockContext evaluado con resultado: 12
DEBUG: visitFunctionCallExpr - Resultado: 12, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 12
DEBUG: visitGroupExpr - Result: 12
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 12
DEBUG: visitConsExpr - Elemento: 12
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 7
DEBUG: Nodo CarExprContext evaluado con resultado: 7
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [7]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'x': 7}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 7
DEBUG: Nodo VariableExprContext evaluado con resultado: 7
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 7, Right: 2
DEBUG: visitArithmeticExpr - Result: 14
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 14
DEBUG: visitBlock - Visiting stmt, result: 14
DEBUG: visitBlock - End with result: 14
DEBUG: Nodo BlockContext evaluado con resultado: 14
DEBUG: visitFunctionCallExpr - Resultado: 14, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 14
DEBUG: visitGroupExpr - Result: 14
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 14
DEBUG: visitConsExpr - Elemento: 14
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCarExpr - Resultado: 8
DEBUG: Nodo CarExprContext evaluado con resultado: 8
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [8]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'x': 8}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 8
DEBUG: Nodo VariableExprContext evaluado con resultado: 8
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 8, Right: 2
DEBUG: visitArithmeticExpr - Result: 16
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 16
DEBUG: visitBlock - Visiting stmt, result: 16
DEBUG: visitBlock - End with result: 16
DEBUG: Nodo BlockContext evaluado con resultado: 16
DEBUG: visitFunctionCallExpr - Resultado: 16, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 16
DEBUG: visitGroupExpr - Result: 16
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 16
DEBUG: visitConsExpr - Elemento: 16
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'func': 'duplicar', 'llista': [9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitNullExpr - Lista evaluada: [9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCarExpr - Lista evaluada: [9, 10]
DEBUG: visitCarExpr - Resultado: 9
DEBUG: Nodo CarExprContext evaluado con resultado: 9
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [9]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'func': 'duplicar', 'llista': [9, 10]}, {'x': 9}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 9
DEBUG: Nodo VariableExprContext evaluado con resultado: 9
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 9, Right: 2
DEBUG: visitArithmeticExpr - Result: 18
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 18
DEBUG: visitBlock - Visiting stmt, result: 18
DEBUG: visitBlock - End with result: 18
DEBUG: Nodo BlockContext evaluado con resultado: 18
DEBUG: visitFunctionCallExpr - Resultado: 18, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'func': 'duplicar', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 18
DEBUG: visitGroupExpr - Result: 18
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 18
DEBUG: visitConsExpr - Elemento: 18
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [9, 10]
DEBUG: visitCdrExpr - Resultado: [10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'func': 'duplicar', 'llista': [9, 10]}, {'func': 'duplicar', 'llista': [10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitNullExpr - Lista evaluada: [10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCarExpr - Lista evaluada: [10]
DEBUG: visitCarExpr - Resultado: 10
DEBUG: Nodo CarExprContext evaluado con resultado: 10
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [10]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'func': 'duplicar', 'llista': [9, 10]}, {'func': 'duplicar', 'llista': [10]}, {'x': 10}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 10
DEBUG: Nodo VariableExprContext evaluado con resultado: 10
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 10, Right: 2
DEBUG: visitArithmeticExpr - Result: 20
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 20
DEBUG: visitBlock - Visiting stmt, result: 20
DEBUG: visitBlock - End with result: 20
DEBUG: Nodo BlockContext evaluado con resultado: 20
DEBUG: visitFunctionCallExpr - Resultado: 20, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'func': 'duplicar', 'llista': [9, 10]}, {'func': 'duplicar', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 20
DEBUG: visitGroupExpr - Result: 20
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 20
DEBUG: visitConsExpr - Elemento: 20
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCdrExpr - Lista evaluada: [10]
DEBUG: visitCdrExpr - Resultado: []
DEBUG: Nodo CdrExprContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', []]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'func': 'duplicar', 'llista': [9, 10]}, {'func': 'duplicar', 'llista': [10]}, {'func': 'duplicar', 'llista': []}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = []
DEBUG: Nodo VariableExprContext evaluado con resultado: []
DEBUG: visitNullExpr - Lista evaluada: []
DEBUG: visitNullExpr - Resultado: True
DEBUG: Nodo NullExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'func': 'duplicar', 'llista': [9, 10]}, {'func': 'duplicar', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitConsExpr - Lista evaluada: []
DEBUG: visitConsExpr - Resultado: [20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [20]
DEBUG: visitCondExpr - Else resultado: [20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [20]
DEBUG: visitBlock - Visiting stmt, result: [20]
DEBUG: visitBlock - End with result: [20]
DEBUG: Nodo BlockContext evaluado con resultado: [20]
DEBUG: visitFunctionCallExpr - Resultado: [20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'func': 'duplicar', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [20]
DEBUG: visitGroupExpr - Result: [20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [20]
DEBUG: visitConsExpr - Lista evaluada: [20]
DEBUG: visitConsExpr - Resultado: [18, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [18, 20]
DEBUG: visitCondExpr - Else resultado: [18, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [18, 20]
DEBUG: visitBlock - Visiting stmt, result: [18, 20]
DEBUG: visitBlock - End with result: [18, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [18, 20]
DEBUG: visitFunctionCallExpr - Resultado: [18, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [18, 20]
DEBUG: visitGroupExpr - Result: [18, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [18, 20]
DEBUG: visitConsExpr - Lista evaluada: [18, 20]
DEBUG: visitConsExpr - Resultado: [16, 18, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [16, 18, 20]
DEBUG: visitCondExpr - Else resultado: [16, 18, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [16, 18, 20]
DEBUG: visitBlock - Visiting stmt, result: [16, 18, 20]
DEBUG: visitBlock - End with result: [16, 18, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [16, 18, 20]
DEBUG: visitFunctionCallExpr - Resultado: [16, 18, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [16, 18, 20]
DEBUG: visitGroupExpr - Result: [16, 18, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [16, 18, 20]
DEBUG: visitConsExpr - Lista evaluada: [16, 18, 20]
DEBUG: visitConsExpr - Resultado: [14, 16, 18, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [14, 16, 18, 20]
DEBUG: visitCondExpr - Else resultado: [14, 16, 18, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [14, 16, 18, 20]
DEBUG: visitBlock - Visiting stmt, result: [14, 16, 18, 20]
DEBUG: visitBlock - End with result: [14, 16, 18, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Resultado: [14, 16, 18, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [14, 16, 18, 20]
DEBUG: visitGroupExpr - Result: [14, 16, 18, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [14, 16, 18, 20]
DEBUG: visitConsExpr - Lista evaluada: [14, 16, 18, 20]
DEBUG: visitConsExpr - Resultado: [12, 14, 16, 18, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [12, 14, 16, 18, 20]
DEBUG: visitCondExpr - Else resultado: [12, 14, 16, 18, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [12, 14, 16, 18, 20]
DEBUG: visitBlock - Visiting stmt, result: [12, 14, 16, 18, 20]
DEBUG: visitBlock - End with result: [12, 14, 16, 18, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [12, 14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Resultado: [12, 14, 16, 18, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - Result: [12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Lista evaluada: [12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Resultado: [10, 12, 14, 16, 18, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [10, 12, 14, 16, 18, 20]
DEBUG: visitCondExpr - Else resultado: [10, 12, 14, 16, 18, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - Visiting stmt, result: [10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - End with result: [10, 12, 14, 16, 18, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [10, 12, 14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Resultado: [10, 12, 14, 16, 18, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - Result: [10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [10, 12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Lista evaluada: [10, 12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Resultado: [8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCondExpr - Else resultado: [8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - Visiting stmt, result: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - End with result: [8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Resultado: [8, 10, 12, 14, 16, 18, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - Result: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Lista evaluada: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCondExpr - Else resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - Visiting stmt, result: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - End with result: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Resultado: [6, 8, 10, 12, 14, 16, 18, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - Result: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Lista evaluada: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCondExpr - Else resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - Visiting stmt, result: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - End with result: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - Result: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Lista evaluada: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Resultado: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCondExpr - Else resultado: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - Visiting stmt, result: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - End with result: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Resultado: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - Result: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitDisplayExpr - Valor evaluado: (2 4 6 8 10 12 14 16 18 20)
(2 4 6 8 10 12 14 16 18 20)DEBUG: visitDisplayExpr - End
DEBUG: Nodo DisplayExprContext evaluado con resultado: (2 4 6 8 10 12 14 16 18 20)
DEBUG: visitRoot - Visiting child: (newline)
DEBUG: Visitando nodo: NewlineExprContext, texto: (newline)
DEBUG: visitNewlineExpr - Printing newline

DEBUG: Nodo NewlineExprContext evaluado con resultado: None
DEBUG: visitRoot - Visiting child: (display(mapincrementarlista))
DEBUG: Visitando nodo: DisplayExprContext, texto: (display(mapincrementarlista))
DEBUG: visitDisplayExpr - Start, texto: (display(mapincrementarlista))
DEBUG: Visitando nodo: GroupExprContext, texto: (mapincrementarlista)
DEBUG: visitGroupExpr - Start, texto: (mapincrementarlista)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapincrementarlista
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: incrementar
DEBUG: visitVariableExpr - Accediendo a variable: incrementar
DEBUG: visitVariableExpr - Encontrada en FunctionTable: incrementar
DEBUG: Nodo VariableExprContext evaluado con resultado: incrementar
DEBUG: Visitando nodo: VariableExprContext, texto: lista
DEBUG: visitVariableExpr - Accediendo a variable: lista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['incrementar', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [1]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 1}]
DEBUG: Visitando nodo: BlockContext, texto: (+x1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (+x1)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 1
DEBUG: Nodo VariableExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitArithmeticExpr - Operator: +, Left: 1, Right: 1
DEBUG: visitArithmeticExpr - Result: 2
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 2
DEBUG: visitBlock - Visiting stmt, result: 2
DEBUG: visitBlock - End with result: 2
DEBUG: Nodo BlockContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Resultado: 2, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 2
DEBUG: visitGroupExpr - Result: 2
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 2
DEBUG: visitConsExpr - Elemento: 2
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = incrementar
DEBUG: Nodo VariableExprContext evaluado con resultado: incrementar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['incrementar', [2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (+x1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (+x1)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitArithmeticExpr - Operator: +, Left: 2, Right: 1
DEBUG: visitArithmeticExpr - Result: 3
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 3
DEBUG: visitBlock - Visiting stmt, result: 3
DEBUG: visitBlock - End with result: 3
DEBUG: Nodo BlockContext evaluado con resultado: 3
DEBUG: visitFunctionCallExpr - Resultado: 3, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 3
DEBUG: visitGroupExpr - Result: 3
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 3
DEBUG: visitConsExpr - Elemento: 3
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = incrementar
DEBUG: Nodo VariableExprContext evaluado con resultado: incrementar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['incrementar', [3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [3]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 3}]
DEBUG: Visitando nodo: BlockContext, texto: (+x1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (+x1)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitArithmeticExpr - Operator: +, Left: 3, Right: 1
DEBUG: visitArithmeticExpr - Result: 4
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 4
DEBUG: visitBlock - Visiting stmt, result: 4
DEBUG: visitBlock - End with result: 4
DEBUG: Nodo BlockContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Resultado: 4, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 4
DEBUG: visitGroupExpr - Result: 4
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 4
DEBUG: visitConsExpr - Elemento: 4
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = incrementar
DEBUG: Nodo VariableExprContext evaluado con resultado: incrementar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['incrementar', [4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [4]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'x': 4}]
DEBUG: Visitando nodo: BlockContext, texto: (+x1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (+x1)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitArithmeticExpr - Operator: +, Left: 4, Right: 1
DEBUG: visitArithmeticExpr - Result: 5
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 5
DEBUG: visitBlock - Visiting stmt, result: 5
DEBUG: visitBlock - End with result: 5
DEBUG: Nodo BlockContext evaluado con resultado: 5
DEBUG: visitFunctionCallExpr - Resultado: 5, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 5
DEBUG: visitGroupExpr - Result: 5
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 5
DEBUG: visitConsExpr - Elemento: 5
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = incrementar
DEBUG: Nodo VariableExprContext evaluado con resultado: incrementar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['incrementar', [5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 5
DEBUG: Nodo CarExprContext evaluado con resultado: 5
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [5]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'x': 5}]
DEBUG: Visitando nodo: BlockContext, texto: (+x1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (+x1)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 5
DEBUG: Nodo VariableExprContext evaluado con resultado: 5
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitArithmeticExpr - Operator: +, Left: 5, Right: 1
DEBUG: visitArithmeticExpr - Result: 6
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 6
DEBUG: visitBlock - Visiting stmt, result: 6
DEBUG: visitBlock - End with result: 6
DEBUG: Nodo BlockContext evaluado con resultado: 6
DEBUG: visitFunctionCallExpr - Resultado: 6, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 6
DEBUG: visitGroupExpr - Result: 6
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 6
DEBUG: visitConsExpr - Elemento: 6
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = incrementar
DEBUG: Nodo VariableExprContext evaluado con resultado: incrementar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['incrementar', [6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 6
DEBUG: Nodo CarExprContext evaluado con resultado: 6
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [6]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}, {'x': 6}]
DEBUG: Visitando nodo: BlockContext, texto: (+x1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (+x1)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 6
DEBUG: Nodo VariableExprContext evaluado con resultado: 6
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitArithmeticExpr - Operator: +, Left: 6, Right: 1
DEBUG: visitArithmeticExpr - Result: 7
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 7
DEBUG: visitBlock - Visiting stmt, result: 7
DEBUG: visitBlock - End with result: 7
DEBUG: Nodo BlockContext evaluado con resultado: 7
DEBUG: visitFunctionCallExpr - Resultado: 7, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 7
DEBUG: visitGroupExpr - Result: 7
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 7
DEBUG: visitConsExpr - Elemento: 7
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = incrementar
DEBUG: Nodo VariableExprContext evaluado con resultado: incrementar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['incrementar', [7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 7
DEBUG: Nodo CarExprContext evaluado con resultado: 7
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [7]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [7, 8, 9, 10]}, {'x': 7}]
DEBUG: Visitando nodo: BlockContext, texto: (+x1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (+x1)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 7
DEBUG: Nodo VariableExprContext evaluado con resultado: 7
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitArithmeticExpr - Operator: +, Left: 7, Right: 1
DEBUG: visitArithmeticExpr - Result: 8
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 8
DEBUG: visitBlock - Visiting stmt, result: 8
DEBUG: visitBlock - End with result: 8
DEBUG: Nodo BlockContext evaluado con resultado: 8
DEBUG: visitFunctionCallExpr - Resultado: 8, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 8
DEBUG: visitGroupExpr - Result: 8
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 8
DEBUG: visitConsExpr - Elemento: 8
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = incrementar
DEBUG: Nodo VariableExprContext evaluado con resultado: incrementar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['incrementar', [8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCarExpr - Resultado: 8
DEBUG: Nodo CarExprContext evaluado con resultado: 8
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [8]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [8, 9, 10]}, {'x': 8}]
DEBUG: Visitando nodo: BlockContext, texto: (+x1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (+x1)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 8
DEBUG: Nodo VariableExprContext evaluado con resultado: 8
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitArithmeticExpr - Operator: +, Left: 8, Right: 1
DEBUG: visitArithmeticExpr - Result: 9
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 9
DEBUG: visitBlock - Visiting stmt, result: 9
DEBUG: visitBlock - End with result: 9
DEBUG: Nodo BlockContext evaluado con resultado: 9
DEBUG: visitFunctionCallExpr - Resultado: 9, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 9
DEBUG: visitGroupExpr - Result: 9
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 9
DEBUG: visitConsExpr - Elemento: 9
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = incrementar
DEBUG: Nodo VariableExprContext evaluado con resultado: incrementar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['incrementar', [9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [8, 9, 10]}, {'func': 'incrementar', 'llista': [9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitNullExpr - Lista evaluada: [9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCarExpr - Lista evaluada: [9, 10]
DEBUG: visitCarExpr - Resultado: 9
DEBUG: Nodo CarExprContext evaluado con resultado: 9
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [9]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [8, 9, 10]}, {'func': 'incrementar', 'llista': [9, 10]}, {'x': 9}]
DEBUG: Visitando nodo: BlockContext, texto: (+x1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (+x1)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 9
DEBUG: Nodo VariableExprContext evaluado con resultado: 9
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitArithmeticExpr - Operator: +, Left: 9, Right: 1
DEBUG: visitArithmeticExpr - Result: 10
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 10
DEBUG: visitBlock - Visiting stmt, result: 10
DEBUG: visitBlock - End with result: 10
DEBUG: Nodo BlockContext evaluado con resultado: 10
DEBUG: visitFunctionCallExpr - Resultado: 10, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [8, 9, 10]}, {'func': 'incrementar', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 10
DEBUG: visitGroupExpr - Result: 10
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 10
DEBUG: visitConsExpr - Elemento: 10
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = incrementar
DEBUG: Nodo VariableExprContext evaluado con resultado: incrementar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [9, 10]
DEBUG: visitCdrExpr - Resultado: [10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['incrementar', [10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [8, 9, 10]}, {'func': 'incrementar', 'llista': [9, 10]}, {'func': 'incrementar', 'llista': [10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitNullExpr - Lista evaluada: [10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCarExpr - Lista evaluada: [10]
DEBUG: visitCarExpr - Resultado: 10
DEBUG: Nodo CarExprContext evaluado con resultado: 10
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [10]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [8, 9, 10]}, {'func': 'incrementar', 'llista': [9, 10]}, {'func': 'incrementar', 'llista': [10]}, {'x': 10}]
DEBUG: Visitando nodo: BlockContext, texto: (+x1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (+x1)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 10
DEBUG: Nodo VariableExprContext evaluado con resultado: 10
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitArithmeticExpr - Operator: +, Left: 10, Right: 1
DEBUG: visitArithmeticExpr - Result: 11
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 11
DEBUG: visitBlock - Visiting stmt, result: 11
DEBUG: visitBlock - End with result: 11
DEBUG: Nodo BlockContext evaluado con resultado: 11
DEBUG: visitFunctionCallExpr - Resultado: 11, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [8, 9, 10]}, {'func': 'incrementar', 'llista': [9, 10]}, {'func': 'incrementar', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 11
DEBUG: visitGroupExpr - Result: 11
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 11
DEBUG: visitConsExpr - Elemento: 11
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = incrementar
DEBUG: Nodo VariableExprContext evaluado con resultado: incrementar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCdrExpr - Lista evaluada: [10]
DEBUG: visitCdrExpr - Resultado: []
DEBUG: Nodo CdrExprContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['incrementar', []]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [8, 9, 10]}, {'func': 'incrementar', 'llista': [9, 10]}, {'func': 'incrementar', 'llista': [10]}, {'func': 'incrementar', 'llista': []}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = []
DEBUG: Nodo VariableExprContext evaluado con resultado: []
DEBUG: visitNullExpr - Lista evaluada: []
DEBUG: visitNullExpr - Resultado: True
DEBUG: Nodo NullExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [8, 9, 10]}, {'func': 'incrementar', 'llista': [9, 10]}, {'func': 'incrementar', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitConsExpr - Lista evaluada: []
DEBUG: visitConsExpr - Resultado: [11]
DEBUG: Nodo ConsExprContext evaluado con resultado: [11]
DEBUG: visitCondExpr - Else resultado: [11]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [11]
DEBUG: visitBlock - Visiting stmt, result: [11]
DEBUG: visitBlock - End with result: [11]
DEBUG: Nodo BlockContext evaluado con resultado: [11]
DEBUG: visitFunctionCallExpr - Resultado: [11], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [8, 9, 10]}, {'func': 'incrementar', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [11]
DEBUG: visitGroupExpr - Result: [11]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [11]
DEBUG: visitConsExpr - Lista evaluada: [11]
DEBUG: visitConsExpr - Resultado: [10, 11]
DEBUG: Nodo ConsExprContext evaluado con resultado: [10, 11]
DEBUG: visitCondExpr - Else resultado: [10, 11]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [10, 11]
DEBUG: visitBlock - Visiting stmt, result: [10, 11]
DEBUG: visitBlock - End with result: [10, 11]
DEBUG: Nodo BlockContext evaluado con resultado: [10, 11]
DEBUG: visitFunctionCallExpr - Resultado: [10, 11], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [10, 11]
DEBUG: visitGroupExpr - Result: [10, 11]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [10, 11]
DEBUG: visitConsExpr - Lista evaluada: [10, 11]
DEBUG: visitConsExpr - Resultado: [9, 10, 11]
DEBUG: Nodo ConsExprContext evaluado con resultado: [9, 10, 11]
DEBUG: visitCondExpr - Else resultado: [9, 10, 11]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [9, 10, 11]
DEBUG: visitBlock - Visiting stmt, result: [9, 10, 11]
DEBUG: visitBlock - End with result: [9, 10, 11]
DEBUG: Nodo BlockContext evaluado con resultado: [9, 10, 11]
DEBUG: visitFunctionCallExpr - Resultado: [9, 10, 11], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [9, 10, 11]
DEBUG: visitGroupExpr - Result: [9, 10, 11]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [9, 10, 11]
DEBUG: visitConsExpr - Lista evaluada: [9, 10, 11]
DEBUG: visitConsExpr - Resultado: [8, 9, 10, 11]
DEBUG: Nodo ConsExprContext evaluado con resultado: [8, 9, 10, 11]
DEBUG: visitCondExpr - Else resultado: [8, 9, 10, 11]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [8, 9, 10, 11]
DEBUG: visitBlock - Visiting stmt, result: [8, 9, 10, 11]
DEBUG: visitBlock - End with result: [8, 9, 10, 11]
DEBUG: Nodo BlockContext evaluado con resultado: [8, 9, 10, 11]
DEBUG: visitFunctionCallExpr - Resultado: [8, 9, 10, 11], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [8, 9, 10, 11]
DEBUG: visitGroupExpr - Result: [8, 9, 10, 11]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [8, 9, 10, 11]
DEBUG: visitConsExpr - Lista evaluada: [8, 9, 10, 11]
DEBUG: visitConsExpr - Resultado: [7, 8, 9, 10, 11]
DEBUG: Nodo ConsExprContext evaluado con resultado: [7, 8, 9, 10, 11]
DEBUG: visitCondExpr - Else resultado: [7, 8, 9, 10, 11]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [7, 8, 9, 10, 11]
DEBUG: visitBlock - Visiting stmt, result: [7, 8, 9, 10, 11]
DEBUG: visitBlock - End with result: [7, 8, 9, 10, 11]
DEBUG: Nodo BlockContext evaluado con resultado: [7, 8, 9, 10, 11]
DEBUG: visitFunctionCallExpr - Resultado: [7, 8, 9, 10, 11], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [7, 8, 9, 10, 11]
DEBUG: visitGroupExpr - Result: [7, 8, 9, 10, 11]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [7, 8, 9, 10, 11]
DEBUG: visitConsExpr - Lista evaluada: [7, 8, 9, 10, 11]
DEBUG: visitConsExpr - Resultado: [6, 7, 8, 9, 10, 11]
DEBUG: Nodo ConsExprContext evaluado con resultado: [6, 7, 8, 9, 10, 11]
DEBUG: visitCondExpr - Else resultado: [6, 7, 8, 9, 10, 11]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [6, 7, 8, 9, 10, 11]
DEBUG: visitBlock - Visiting stmt, result: [6, 7, 8, 9, 10, 11]
DEBUG: visitBlock - End with result: [6, 7, 8, 9, 10, 11]
DEBUG: Nodo BlockContext evaluado con resultado: [6, 7, 8, 9, 10, 11]
DEBUG: visitFunctionCallExpr - Resultado: [6, 7, 8, 9, 10, 11], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [6, 7, 8, 9, 10, 11]
DEBUG: visitGroupExpr - Result: [6, 7, 8, 9, 10, 11]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [6, 7, 8, 9, 10, 11]
DEBUG: visitConsExpr - Lista evaluada: [6, 7, 8, 9, 10, 11]
DEBUG: visitConsExpr - Resultado: [5, 6, 7, 8, 9, 10, 11]
DEBUG: Nodo ConsExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10, 11]
DEBUG: visitCondExpr - Else resultado: [5, 6, 7, 8, 9, 10, 11]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [5, 6, 7, 8, 9, 10, 11]
DEBUG: visitBlock - Visiting stmt, result: [5, 6, 7, 8, 9, 10, 11]
DEBUG: visitBlock - End with result: [5, 6, 7, 8, 9, 10, 11]
DEBUG: Nodo BlockContext evaluado con resultado: [5, 6, 7, 8, 9, 10, 11]
DEBUG: visitFunctionCallExpr - Resultado: [5, 6, 7, 8, 9, 10, 11], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10, 11]
DEBUG: visitGroupExpr - Result: [5, 6, 7, 8, 9, 10, 11]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10, 11]
DEBUG: visitConsExpr - Lista evaluada: [5, 6, 7, 8, 9, 10, 11]
DEBUG: visitConsExpr - Resultado: [4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: Nodo ConsExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitCondExpr - Else resultado: [4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitBlock - Visiting stmt, result: [4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitBlock - End with result: [4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: Nodo BlockContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitFunctionCallExpr - Resultado: [4, 5, 6, 7, 8, 9, 10, 11], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitGroupExpr - Result: [4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitConsExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitConsExpr - Resultado: [3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: Nodo ConsExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitCondExpr - Else resultado: [3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitBlock - Visiting stmt, result: [3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitBlock - End with result: [3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: Nodo BlockContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitFunctionCallExpr - Resultado: [3, 4, 5, 6, 7, 8, 9, 10, 11], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitGroupExpr - Result: [3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitConsExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitConsExpr - Resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: Nodo ConsExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitCondExpr - Else resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitBlock - Visiting stmt, result: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitBlock - End with result: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: Nodo BlockContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitFunctionCallExpr - Resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitGroupExpr - Result: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
DEBUG: visitDisplayExpr - Valor evaluado: (2 3 4 5 6 7 8 9 10 11)
(2 3 4 5 6 7 8 9 10 11)DEBUG: visitDisplayExpr - End
DEBUG: Nodo DisplayExprContext evaluado con resultado: (2 3 4 5 6 7 8 9 10 11)
DEBUG: visitRoot - Visiting child: (newline)
DEBUG: Visitando nodo: NewlineExprContext, texto: (newline)
DEBUG: visitNewlineExpr - Printing newline

DEBUG: Nodo NewlineExprContext evaluado con resultado: None
DEBUG: visitRoot - Visiting child: (display(mapmodulo2lista))
DEBUG: Visitando nodo: DisplayExprContext, texto: (display(mapmodulo2lista))
DEBUG: visitDisplayExpr - Start, texto: (display(mapmodulo2lista))
DEBUG: Visitando nodo: GroupExprContext, texto: (mapmodulo2lista)
DEBUG: visitGroupExpr - Start, texto: (mapmodulo2lista)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapmodulo2lista
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: modulo2
DEBUG: visitVariableExpr - Accediendo a variable: modulo2
DEBUG: visitVariableExpr - Encontrada en FunctionTable: modulo2
DEBUG: Nodo VariableExprContext evaluado con resultado: modulo2
DEBUG: Visitando nodo: VariableExprContext, texto: lista
DEBUG: visitVariableExpr - Accediendo a variable: lista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['modulo2', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [1]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 1}]
DEBUG: Visitando nodo: BlockContext, texto: (modx2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 1
DEBUG: Nodo VariableExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 1, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 1
DEBUG: visitBlock - Visiting stmt, result: 1
DEBUG: visitBlock - End with result: 1
DEBUG: Nodo BlockContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Resultado: 1, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 1
DEBUG: visitGroupExpr - Result: 1
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 1
DEBUG: visitConsExpr - Elemento: 1
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = modulo2
DEBUG: Nodo VariableExprContext evaluado con resultado: modulo2
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['modulo2', [2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (modx2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 2, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 0
DEBUG: visitBlock - Visiting stmt, result: 0
DEBUG: visitBlock - End with result: 0
DEBUG: Nodo BlockContext evaluado con resultado: 0
DEBUG: visitFunctionCallExpr - Resultado: 0, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 0
DEBUG: visitGroupExpr - Result: 0
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 0
DEBUG: visitConsExpr - Elemento: 0
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = modulo2
DEBUG: Nodo VariableExprContext evaluado con resultado: modulo2
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['modulo2', [3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [3]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 3}]
DEBUG: Visitando nodo: BlockContext, texto: (modx2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 3, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 1
DEBUG: visitBlock - Visiting stmt, result: 1
DEBUG: visitBlock - End with result: 1
DEBUG: Nodo BlockContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Resultado: 1, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 1
DEBUG: visitGroupExpr - Result: 1
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 1
DEBUG: visitConsExpr - Elemento: 1
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = modulo2
DEBUG: Nodo VariableExprContext evaluado con resultado: modulo2
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['modulo2', [4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [4]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'x': 4}]
DEBUG: Visitando nodo: BlockContext, texto: (modx2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 4, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 0
DEBUG: visitBlock - Visiting stmt, result: 0
DEBUG: visitBlock - End with result: 0
DEBUG: Nodo BlockContext evaluado con resultado: 0
DEBUG: visitFunctionCallExpr - Resultado: 0, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 0
DEBUG: visitGroupExpr - Result: 0
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 0
DEBUG: visitConsExpr - Elemento: 0
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = modulo2
DEBUG: Nodo VariableExprContext evaluado con resultado: modulo2
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['modulo2', [5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 5
DEBUG: Nodo CarExprContext evaluado con resultado: 5
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [5]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'x': 5}]
DEBUG: Visitando nodo: BlockContext, texto: (modx2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 5
DEBUG: Nodo VariableExprContext evaluado con resultado: 5
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 5, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 1
DEBUG: visitBlock - Visiting stmt, result: 1
DEBUG: visitBlock - End with result: 1
DEBUG: Nodo BlockContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Resultado: 1, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 1
DEBUG: visitGroupExpr - Result: 1
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 1
DEBUG: visitConsExpr - Elemento: 1
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = modulo2
DEBUG: Nodo VariableExprContext evaluado con resultado: modulo2
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['modulo2', [6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 6
DEBUG: Nodo CarExprContext evaluado con resultado: 6
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [6]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}, {'x': 6}]
DEBUG: Visitando nodo: BlockContext, texto: (modx2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 6
DEBUG: Nodo VariableExprContext evaluado con resultado: 6
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 6, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 0
DEBUG: visitBlock - Visiting stmt, result: 0
DEBUG: visitBlock - End with result: 0
DEBUG: Nodo BlockContext evaluado con resultado: 0
DEBUG: visitFunctionCallExpr - Resultado: 0, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 0
DEBUG: visitGroupExpr - Result: 0
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 0
DEBUG: visitConsExpr - Elemento: 0
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = modulo2
DEBUG: Nodo VariableExprContext evaluado con resultado: modulo2
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['modulo2', [7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 7
DEBUG: Nodo CarExprContext evaluado con resultado: 7
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [7]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [7, 8, 9, 10]}, {'x': 7}]
DEBUG: Visitando nodo: BlockContext, texto: (modx2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 7
DEBUG: Nodo VariableExprContext evaluado con resultado: 7
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 7, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 1
DEBUG: visitBlock - Visiting stmt, result: 1
DEBUG: visitBlock - End with result: 1
DEBUG: Nodo BlockContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Resultado: 1, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 1
DEBUG: visitGroupExpr - Result: 1
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 1
DEBUG: visitConsExpr - Elemento: 1
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = modulo2
DEBUG: Nodo VariableExprContext evaluado con resultado: modulo2
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['modulo2', [8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCarExpr - Resultado: 8
DEBUG: Nodo CarExprContext evaluado con resultado: 8
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [8]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [8, 9, 10]}, {'x': 8}]
DEBUG: Visitando nodo: BlockContext, texto: (modx2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 8
DEBUG: Nodo VariableExprContext evaluado con resultado: 8
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 8, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 0
DEBUG: visitBlock - Visiting stmt, result: 0
DEBUG: visitBlock - End with result: 0
DEBUG: Nodo BlockContext evaluado con resultado: 0
DEBUG: visitFunctionCallExpr - Resultado: 0, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 0
DEBUG: visitGroupExpr - Result: 0
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 0
DEBUG: visitConsExpr - Elemento: 0
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = modulo2
DEBUG: Nodo VariableExprContext evaluado con resultado: modulo2
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['modulo2', [9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [8, 9, 10]}, {'func': 'modulo2', 'llista': [9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitNullExpr - Lista evaluada: [9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCarExpr - Lista evaluada: [9, 10]
DEBUG: visitCarExpr - Resultado: 9
DEBUG: Nodo CarExprContext evaluado con resultado: 9
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [9]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [8, 9, 10]}, {'func': 'modulo2', 'llista': [9, 10]}, {'x': 9}]
DEBUG: Visitando nodo: BlockContext, texto: (modx2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 9
DEBUG: Nodo VariableExprContext evaluado con resultado: 9
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 9, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 1
DEBUG: visitBlock - Visiting stmt, result: 1
DEBUG: visitBlock - End with result: 1
DEBUG: Nodo BlockContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Resultado: 1, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [8, 9, 10]}, {'func': 'modulo2', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 1
DEBUG: visitGroupExpr - Result: 1
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 1
DEBUG: visitConsExpr - Elemento: 1
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = modulo2
DEBUG: Nodo VariableExprContext evaluado con resultado: modulo2
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [9, 10]
DEBUG: visitCdrExpr - Resultado: [10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['modulo2', [10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [8, 9, 10]}, {'func': 'modulo2', 'llista': [9, 10]}, {'func': 'modulo2', 'llista': [10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitNullExpr - Lista evaluada: [10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCarExpr - Lista evaluada: [10]
DEBUG: visitCarExpr - Resultado: 10
DEBUG: Nodo CarExprContext evaluado con resultado: 10
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [10]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [8, 9, 10]}, {'func': 'modulo2', 'llista': [9, 10]}, {'func': 'modulo2', 'llista': [10]}, {'x': 10}]
DEBUG: Visitando nodo: BlockContext, texto: (modx2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 10
DEBUG: Nodo VariableExprContext evaluado con resultado: 10
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 10, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 0
DEBUG: visitBlock - Visiting stmt, result: 0
DEBUG: visitBlock - End with result: 0
DEBUG: Nodo BlockContext evaluado con resultado: 0
DEBUG: visitFunctionCallExpr - Resultado: 0, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [8, 9, 10]}, {'func': 'modulo2', 'llista': [9, 10]}, {'func': 'modulo2', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 0
DEBUG: visitGroupExpr - Result: 0
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 0
DEBUG: visitConsExpr - Elemento: 0
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = modulo2
DEBUG: Nodo VariableExprContext evaluado con resultado: modulo2
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCdrExpr - Lista evaluada: [10]
DEBUG: visitCdrExpr - Resultado: []
DEBUG: Nodo CdrExprContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['modulo2', []]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [8, 9, 10]}, {'func': 'modulo2', 'llista': [9, 10]}, {'func': 'modulo2', 'llista': [10]}, {'func': 'modulo2', 'llista': []}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = []
DEBUG: Nodo VariableExprContext evaluado con resultado: []
DEBUG: visitNullExpr - Lista evaluada: []
DEBUG: visitNullExpr - Resultado: True
DEBUG: Nodo NullExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [8, 9, 10]}, {'func': 'modulo2', 'llista': [9, 10]}, {'func': 'modulo2', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitConsExpr - Lista evaluada: []
DEBUG: visitConsExpr - Resultado: [0]
DEBUG: Nodo ConsExprContext evaluado con resultado: [0]
DEBUG: visitCondExpr - Else resultado: [0]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [0]
DEBUG: visitBlock - Visiting stmt, result: [0]
DEBUG: visitBlock - End with result: [0]
DEBUG: Nodo BlockContext evaluado con resultado: [0]
DEBUG: visitFunctionCallExpr - Resultado: [0], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [8, 9, 10]}, {'func': 'modulo2', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [0]
DEBUG: visitGroupExpr - Result: [0]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [0]
DEBUG: visitConsExpr - Lista evaluada: [0]
DEBUG: visitConsExpr - Resultado: [1, 0]
DEBUG: Nodo ConsExprContext evaluado con resultado: [1, 0]
DEBUG: visitCondExpr - Else resultado: [1, 0]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [1, 0]
DEBUG: visitBlock - Visiting stmt, result: [1, 0]
DEBUG: visitBlock - End with result: [1, 0]
DEBUG: Nodo BlockContext evaluado con resultado: [1, 0]
DEBUG: visitFunctionCallExpr - Resultado: [1, 0], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [1, 0]
DEBUG: visitGroupExpr - Result: [1, 0]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [1, 0]
DEBUG: visitConsExpr - Lista evaluada: [1, 0]
DEBUG: visitConsExpr - Resultado: [0, 1, 0]
DEBUG: Nodo ConsExprContext evaluado con resultado: [0, 1, 0]
DEBUG: visitCondExpr - Else resultado: [0, 1, 0]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [0, 1, 0]
DEBUG: visitBlock - Visiting stmt, result: [0, 1, 0]
DEBUG: visitBlock - End with result: [0, 1, 0]
DEBUG: Nodo BlockContext evaluado con resultado: [0, 1, 0]
DEBUG: visitFunctionCallExpr - Resultado: [0, 1, 0], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [0, 1, 0]
DEBUG: visitGroupExpr - Result: [0, 1, 0]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [0, 1, 0]
DEBUG: visitConsExpr - Lista evaluada: [0, 1, 0]
DEBUG: visitConsExpr - Resultado: [1, 0, 1, 0]
DEBUG: Nodo ConsExprContext evaluado con resultado: [1, 0, 1, 0]
DEBUG: visitCondExpr - Else resultado: [1, 0, 1, 0]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [1, 0, 1, 0]
DEBUG: visitBlock - Visiting stmt, result: [1, 0, 1, 0]
DEBUG: visitBlock - End with result: [1, 0, 1, 0]
DEBUG: Nodo BlockContext evaluado con resultado: [1, 0, 1, 0]
DEBUG: visitFunctionCallExpr - Resultado: [1, 0, 1, 0], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [1, 0, 1, 0]
DEBUG: visitGroupExpr - Result: [1, 0, 1, 0]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [1, 0, 1, 0]
DEBUG: visitConsExpr - Lista evaluada: [1, 0, 1, 0]
DEBUG: visitConsExpr - Resultado: [0, 1, 0, 1, 0]
DEBUG: Nodo ConsExprContext evaluado con resultado: [0, 1, 0, 1, 0]
DEBUG: visitCondExpr - Else resultado: [0, 1, 0, 1, 0]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [0, 1, 0, 1, 0]
DEBUG: visitBlock - Visiting stmt, result: [0, 1, 0, 1, 0]
DEBUG: visitBlock - End with result: [0, 1, 0, 1, 0]
DEBUG: Nodo BlockContext evaluado con resultado: [0, 1, 0, 1, 0]
DEBUG: visitFunctionCallExpr - Resultado: [0, 1, 0, 1, 0], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [0, 1, 0, 1, 0]
DEBUG: visitGroupExpr - Result: [0, 1, 0, 1, 0]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [0, 1, 0, 1, 0]
DEBUG: visitConsExpr - Lista evaluada: [0, 1, 0, 1, 0]
DEBUG: visitConsExpr - Resultado: [1, 0, 1, 0, 1, 0]
DEBUG: Nodo ConsExprContext evaluado con resultado: [1, 0, 1, 0, 1, 0]
DEBUG: visitCondExpr - Else resultado: [1, 0, 1, 0, 1, 0]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [1, 0, 1, 0, 1, 0]
DEBUG: visitBlock - Visiting stmt, result: [1, 0, 1, 0, 1, 0]
DEBUG: visitBlock - End with result: [1, 0, 1, 0, 1, 0]
DEBUG: Nodo BlockContext evaluado con resultado: [1, 0, 1, 0, 1, 0]
DEBUG: visitFunctionCallExpr - Resultado: [1, 0, 1, 0, 1, 0], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [1, 0, 1, 0, 1, 0]
DEBUG: visitGroupExpr - Result: [1, 0, 1, 0, 1, 0]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [1, 0, 1, 0, 1, 0]
DEBUG: visitConsExpr - Lista evaluada: [1, 0, 1, 0, 1, 0]
DEBUG: visitConsExpr - Resultado: [0, 1, 0, 1, 0, 1, 0]
DEBUG: Nodo ConsExprContext evaluado con resultado: [0, 1, 0, 1, 0, 1, 0]
DEBUG: visitCondExpr - Else resultado: [0, 1, 0, 1, 0, 1, 0]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [0, 1, 0, 1, 0, 1, 0]
DEBUG: visitBlock - Visiting stmt, result: [0, 1, 0, 1, 0, 1, 0]
DEBUG: visitBlock - End with result: [0, 1, 0, 1, 0, 1, 0]
DEBUG: Nodo BlockContext evaluado con resultado: [0, 1, 0, 1, 0, 1, 0]
DEBUG: visitFunctionCallExpr - Resultado: [0, 1, 0, 1, 0, 1, 0], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [0, 1, 0, 1, 0, 1, 0]
DEBUG: visitGroupExpr - Result: [0, 1, 0, 1, 0, 1, 0]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [0, 1, 0, 1, 0, 1, 0]
DEBUG: visitConsExpr - Lista evaluada: [0, 1, 0, 1, 0, 1, 0]
DEBUG: visitConsExpr - Resultado: [1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: Nodo ConsExprContext evaluado con resultado: [1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitCondExpr - Else resultado: [1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitBlock - Visiting stmt, result: [1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitBlock - End with result: [1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: Nodo BlockContext evaluado con resultado: [1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitFunctionCallExpr - Resultado: [1, 0, 1, 0, 1, 0, 1, 0], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitGroupExpr - Result: [1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitConsExpr - Lista evaluada: [1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitConsExpr - Resultado: [0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: Nodo ConsExprContext evaluado con resultado: [0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitCondExpr - Else resultado: [0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitBlock - Visiting stmt, result: [0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitBlock - End with result: [0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: Nodo BlockContext evaluado con resultado: [0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitFunctionCallExpr - Resultado: [0, 1, 0, 1, 0, 1, 0, 1, 0], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'modulo2', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitGroupExpr - Result: [0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitConsExpr - Lista evaluada: [0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitConsExpr - Resultado: [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: Nodo ConsExprContext evaluado con resultado: [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitCondExpr - Else resultado: [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitBlock - Visiting stmt, result: [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitBlock - End with result: [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: Nodo BlockContext evaluado con resultado: [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitFunctionCallExpr - Resultado: [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitGroupExpr - Result: [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
DEBUG: visitDisplayExpr - Valor evaluado: (1 0 1 0 1 0 1 0 1 0)
(1 0 1 0 1 0 1 0 1 0)DEBUG: visitDisplayExpr - End
DEBUG: Nodo DisplayExprContext evaluado con resultado: (1 0 1 0 1 0 1 0 1 0)
DEBUG: visitRoot - Visiting child: (newline)
DEBUG: Visitando nodo: NewlineExprContext, texto: (newline)
DEBUG: visitNewlineExpr - Printing newline

DEBUG: Nodo NewlineExprContext evaluado con resultado: None
DEBUG: visitRoot - Visiting child: (display(filtermayor-que-5lista))
DEBUG: Visitando nodo: DisplayExprContext, texto: (display(filtermayor-que-5lista))
DEBUG: visitDisplayExpr - Start, texto: (display(filtermayor-que-5lista))
DEBUG: Visitando nodo: GroupExprContext, texto: (filtermayor-que-5lista)
DEBUG: visitGroupExpr - Start, texto: (filtermayor-que-5lista)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filtermayor-que-5lista
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: mayor-que-5
DEBUG: visitVariableExpr - Accediendo a variable: mayor-que-5
DEBUG: visitVariableExpr - Encontrada en FunctionTable: mayor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: mayor-que-5
DEBUG: Visitando nodo: VariableExprContext, texto: lista
DEBUG: visitVariableExpr - Accediendo a variable: lista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['mayor-que-5', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [1]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 1}]
DEBUG: Visitando nodo: BlockContext, texto: (>x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (>x5)
DEBUG: visitComparisonExpr - Start, texto: (>x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 1
DEBUG: Nodo VariableExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 1, Right: 5, Operator: >
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = mayor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: mayor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['mayor-que-5', [2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (>x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (>x5)
DEBUG: visitComparisonExpr - Start, texto: (>x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 2, Right: 5, Operator: >
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = mayor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: mayor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['mayor-que-5', [3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [3]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 3}]
DEBUG: Visitando nodo: BlockContext, texto: (>x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (>x5)
DEBUG: visitComparisonExpr - Start, texto: (>x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 3, Right: 5, Operator: >
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = mayor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: mayor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['mayor-que-5', [4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [4]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'x': 4}]
DEBUG: Visitando nodo: BlockContext, texto: (>x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (>x5)
DEBUG: visitComparisonExpr - Start, texto: (>x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 4, Right: 5, Operator: >
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = mayor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: mayor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['mayor-que-5', [5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 5
DEBUG: Nodo CarExprContext evaluado con resultado: 5
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [5]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'x': 5}]
DEBUG: Visitando nodo: BlockContext, texto: (>x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (>x5)
DEBUG: visitComparisonExpr - Start, texto: (>x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 5
DEBUG: Nodo VariableExprContext evaluado con resultado: 5
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 5, Right: 5, Operator: >
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = mayor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: mayor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['mayor-que-5', [6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 6
DEBUG: Nodo CarExprContext evaluado con resultado: 6
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [6]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'x': 6}]
DEBUG: Visitando nodo: BlockContext, texto: (>x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (>x5)
DEBUG: visitComparisonExpr - Start, texto: (>x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 6
DEBUG: Nodo VariableExprContext evaluado con resultado: 6
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 6, Right: 5, Operator: >
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 6
DEBUG: Nodo CarExprContext evaluado con resultado: 6
DEBUG: visitConsExpr - Elemento: 6
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = mayor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: mayor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['mayor-que-5', [7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 7
DEBUG: Nodo CarExprContext evaluado con resultado: 7
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [7]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [7, 8, 9, 10]}, {'x': 7}]
DEBUG: Visitando nodo: BlockContext, texto: (>x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (>x5)
DEBUG: visitComparisonExpr - Start, texto: (>x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 7
DEBUG: Nodo VariableExprContext evaluado con resultado: 7
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 7, Right: 5, Operator: >
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 7
DEBUG: Nodo CarExprContext evaluado con resultado: 7
DEBUG: visitConsExpr - Elemento: 7
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = mayor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: mayor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['mayor-que-5', [8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCarExpr - Resultado: 8
DEBUG: Nodo CarExprContext evaluado con resultado: 8
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [8]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [8, 9, 10]}, {'x': 8}]
DEBUG: Visitando nodo: BlockContext, texto: (>x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (>x5)
DEBUG: visitComparisonExpr - Start, texto: (>x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 8
DEBUG: Nodo VariableExprContext evaluado con resultado: 8
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 8, Right: 5, Operator: >
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCarExpr - Resultado: 8
DEBUG: Nodo CarExprContext evaluado con resultado: 8
DEBUG: visitConsExpr - Elemento: 8
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = mayor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: mayor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['mayor-que-5', [9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitNullExpr - Lista evaluada: [9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCarExpr - Lista evaluada: [9, 10]
DEBUG: visitCarExpr - Resultado: 9
DEBUG: Nodo CarExprContext evaluado con resultado: 9
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [9]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [9, 10]}, {'x': 9}]
DEBUG: Visitando nodo: BlockContext, texto: (>x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (>x5)
DEBUG: visitComparisonExpr - Start, texto: (>x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 9
DEBUG: Nodo VariableExprContext evaluado con resultado: 9
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 9, Right: 5, Operator: >
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCarExpr - Lista evaluada: [9, 10]
DEBUG: visitCarExpr - Resultado: 9
DEBUG: Nodo CarExprContext evaluado con resultado: 9
DEBUG: visitConsExpr - Elemento: 9
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = mayor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: mayor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [9, 10]
DEBUG: visitCdrExpr - Resultado: [10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['mayor-que-5', [10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [9, 10]}, {'predicat': 'mayor-que-5', 'llista': [10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitNullExpr - Lista evaluada: [10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCarExpr - Lista evaluada: [10]
DEBUG: visitCarExpr - Resultado: 10
DEBUG: Nodo CarExprContext evaluado con resultado: 10
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [10]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [9, 10]}, {'predicat': 'mayor-que-5', 'llista': [10]}, {'x': 10}]
DEBUG: Visitando nodo: BlockContext, texto: (>x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (>x5)
DEBUG: visitComparisonExpr - Start, texto: (>x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 10
DEBUG: Nodo VariableExprContext evaluado con resultado: 10
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 10, Right: 5, Operator: >
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [9, 10]}, {'predicat': 'mayor-que-5', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCarExpr - Lista evaluada: [10]
DEBUG: visitCarExpr - Resultado: 10
DEBUG: Nodo CarExprContext evaluado con resultado: 10
DEBUG: visitConsExpr - Elemento: 10
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = mayor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: mayor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCdrExpr - Lista evaluada: [10]
DEBUG: visitCdrExpr - Resultado: []
DEBUG: Nodo CdrExprContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['mayor-que-5', []]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [9, 10]}, {'predicat': 'mayor-que-5', 'llista': [10]}, {'predicat': 'mayor-que-5', 'llista': []}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = []
DEBUG: Nodo VariableExprContext evaluado con resultado: []
DEBUG: visitNullExpr - Lista evaluada: []
DEBUG: visitNullExpr - Resultado: True
DEBUG: Nodo NullExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [9, 10]}, {'predicat': 'mayor-que-5', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitConsExpr - Lista evaluada: []
DEBUG: visitConsExpr - Resultado: [10]
DEBUG: Nodo ConsExprContext evaluado con resultado: [10]
DEBUG: visitCondExpr - Resultado: [10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [10]
DEBUG: visitBlock - Visiting stmt, result: [10]
DEBUG: visitBlock - End with result: [10]
DEBUG: Nodo BlockContext evaluado con resultado: [10]
DEBUG: visitFunctionCallExpr - Resultado: [10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [10]
DEBUG: visitGroupExpr - Result: [10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [10]
DEBUG: visitConsExpr - Lista evaluada: [10]
DEBUG: visitConsExpr - Resultado: [9, 10]
DEBUG: Nodo ConsExprContext evaluado con resultado: [9, 10]
DEBUG: visitCondExpr - Resultado: [9, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [9, 10]
DEBUG: visitBlock - Visiting stmt, result: [9, 10]
DEBUG: visitBlock - End with result: [9, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [9, 10]
DEBUG: visitFunctionCallExpr - Resultado: [9, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [9, 10]
DEBUG: visitGroupExpr - Result: [9, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [9, 10]
DEBUG: visitConsExpr - Lista evaluada: [9, 10]
DEBUG: visitConsExpr - Resultado: [8, 9, 10]
DEBUG: Nodo ConsExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCondExpr - Resultado: [8, 9, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [8, 9, 10]
DEBUG: visitBlock - Visiting stmt, result: [8, 9, 10]
DEBUG: visitBlock - End with result: [8, 9, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [8, 9, 10]
DEBUG: visitFunctionCallExpr - Resultado: [8, 9, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitGroupExpr - Result: [8, 9, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitConsExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitConsExpr - Resultado: [7, 8, 9, 10]
DEBUG: Nodo ConsExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCondExpr - Resultado: [7, 8, 9, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitBlock - Visiting stmt, result: [7, 8, 9, 10]
DEBUG: visitBlock - End with result: [7, 8, 9, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Resultado: [7, 8, 9, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitGroupExpr - Result: [7, 8, 9, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitConsExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitConsExpr - Resultado: [6, 7, 8, 9, 10]
DEBUG: Nodo ConsExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCondExpr - Resultado: [6, 7, 8, 9, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitBlock - Visiting stmt, result: [6, 7, 8, 9, 10]
DEBUG: visitBlock - End with result: [6, 7, 8, 9, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Resultado: [6, 7, 8, 9, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitGroupExpr - Result: [6, 7, 8, 9, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCondExpr - Else resultado: [6, 7, 8, 9, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitBlock - Visiting stmt, result: [6, 7, 8, 9, 10]
DEBUG: visitBlock - End with result: [6, 7, 8, 9, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Resultado: [6, 7, 8, 9, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitGroupExpr - Result: [6, 7, 8, 9, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCondExpr - Else resultado: [6, 7, 8, 9, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitBlock - Visiting stmt, result: [6, 7, 8, 9, 10]
DEBUG: visitBlock - End with result: [6, 7, 8, 9, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Resultado: [6, 7, 8, 9, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitGroupExpr - Result: [6, 7, 8, 9, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCondExpr - Else resultado: [6, 7, 8, 9, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitBlock - Visiting stmt, result: [6, 7, 8, 9, 10]
DEBUG: visitBlock - End with result: [6, 7, 8, 9, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Resultado: [6, 7, 8, 9, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitGroupExpr - Result: [6, 7, 8, 9, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCondExpr - Else resultado: [6, 7, 8, 9, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitBlock - Visiting stmt, result: [6, 7, 8, 9, 10]
DEBUG: visitBlock - End with result: [6, 7, 8, 9, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Resultado: [6, 7, 8, 9, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitGroupExpr - Result: [6, 7, 8, 9, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCondExpr - Else resultado: [6, 7, 8, 9, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitBlock - Visiting stmt, result: [6, 7, 8, 9, 10]
DEBUG: visitBlock - End with result: [6, 7, 8, 9, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Resultado: [6, 7, 8, 9, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitGroupExpr - Result: [6, 7, 8, 9, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitDisplayExpr - Valor evaluado: (6 7 8 9 10)
(6 7 8 9 10)DEBUG: visitDisplayExpr - End
DEBUG: Nodo DisplayExprContext evaluado con resultado: (6 7 8 9 10)
DEBUG: visitRoot - Visiting child: (newline)
DEBUG: Visitando nodo: NewlineExprContext, texto: (newline)
DEBUG: visitNewlineExpr - Printing newline

DEBUG: Nodo NewlineExprContext evaluado con resultado: None
DEBUG: visitRoot - Visiting child: (display(filtermenor-que-5lista))
DEBUG: Visitando nodo: DisplayExprContext, texto: (display(filtermenor-que-5lista))
DEBUG: visitDisplayExpr - Start, texto: (display(filtermenor-que-5lista))
DEBUG: Visitando nodo: GroupExprContext, texto: (filtermenor-que-5lista)
DEBUG: visitGroupExpr - Start, texto: (filtermenor-que-5lista)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filtermenor-que-5lista
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: menor-que-5
DEBUG: visitVariableExpr - Accediendo a variable: menor-que-5
DEBUG: visitVariableExpr - Encontrada en FunctionTable: menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: VariableExprContext, texto: lista
DEBUG: visitVariableExpr - Accediendo a variable: lista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [1]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 1}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 1
DEBUG: Nodo VariableExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 1, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitConsExpr - Elemento: 1
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 2, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitConsExpr - Elemento: 2
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [3]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 3}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 3, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitConsExpr - Elemento: 3
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [4]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'x': 4}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 4, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitConsExpr - Elemento: 4
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 5
DEBUG: Nodo CarExprContext evaluado con resultado: 5
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [5]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'x': 5}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 5
DEBUG: Nodo VariableExprContext evaluado con resultado: 5
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 5, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 6
DEBUG: Nodo CarExprContext evaluado con resultado: 6
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [6]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'x': 6}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 6
DEBUG: Nodo VariableExprContext evaluado con resultado: 6
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 6, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 7
DEBUG: Nodo CarExprContext evaluado con resultado: 7
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [7]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'x': 7}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 7
DEBUG: Nodo VariableExprContext evaluado con resultado: 7
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 7, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCarExpr - Resultado: 8
DEBUG: Nodo CarExprContext evaluado con resultado: 8
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [8]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'x': 8}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 8
DEBUG: Nodo VariableExprContext evaluado con resultado: 8
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 8, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitNullExpr - Lista evaluada: [9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCarExpr - Lista evaluada: [9, 10]
DEBUG: visitCarExpr - Resultado: 9
DEBUG: Nodo CarExprContext evaluado con resultado: 9
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [9]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}, {'x': 9}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 9
DEBUG: Nodo VariableExprContext evaluado con resultado: 9
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 9, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [9, 10]
DEBUG: visitCdrExpr - Resultado: [10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}, {'predicat': 'menor-que-5', 'llista': [10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitNullExpr - Lista evaluada: [10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCarExpr - Lista evaluada: [10]
DEBUG: visitCarExpr - Resultado: 10
DEBUG: Nodo CarExprContext evaluado con resultado: 10
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [10]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}, {'predicat': 'menor-que-5', 'llista': [10]}, {'x': 10}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 10
DEBUG: Nodo VariableExprContext evaluado con resultado: 10
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 10, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}, {'predicat': 'menor-que-5', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCdrExpr - Lista evaluada: [10]
DEBUG: visitCdrExpr - Resultado: []
DEBUG: Nodo CdrExprContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', []]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}, {'predicat': 'menor-que-5', 'llista': [10]}, {'predicat': 'menor-que-5', 'llista': []}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = []
DEBUG: Nodo VariableExprContext evaluado con resultado: []
DEBUG: visitNullExpr - Lista evaluada: []
DEBUG: visitNullExpr - Resultado: True
DEBUG: Nodo NullExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}, {'predicat': 'menor-que-5', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitConsExpr - Lista evaluada: []
DEBUG: visitConsExpr - Resultado: [4]
DEBUG: Nodo ConsExprContext evaluado con resultado: [4]
DEBUG: visitCondExpr - Resultado: [4]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [4]
DEBUG: visitBlock - Visiting stmt, result: [4]
DEBUG: visitBlock - End with result: [4]
DEBUG: Nodo BlockContext evaluado con resultado: [4]
DEBUG: visitFunctionCallExpr - Resultado: [4], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [4]
DEBUG: visitGroupExpr - Result: [4]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [4]
DEBUG: visitConsExpr - Lista evaluada: [4]
DEBUG: visitConsExpr - Resultado: [3, 4]
DEBUG: Nodo ConsExprContext evaluado con resultado: [3, 4]
DEBUG: visitCondExpr - Resultado: [3, 4]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [3, 4]
DEBUG: visitBlock - Visiting stmt, result: [3, 4]
DEBUG: visitBlock - End with result: [3, 4]
DEBUG: Nodo BlockContext evaluado con resultado: [3, 4]
DEBUG: visitFunctionCallExpr - Resultado: [3, 4], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [3, 4]
DEBUG: visitGroupExpr - Result: [3, 4]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [3, 4]
DEBUG: visitConsExpr - Lista evaluada: [3, 4]
DEBUG: visitConsExpr - Resultado: [2, 3, 4]
DEBUG: Nodo ConsExprContext evaluado con resultado: [2, 3, 4]
DEBUG: visitCondExpr - Resultado: [2, 3, 4]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [2, 3, 4]
DEBUG: visitBlock - Visiting stmt, result: [2, 3, 4]
DEBUG: visitBlock - End with result: [2, 3, 4]
DEBUG: Nodo BlockContext evaluado con resultado: [2, 3, 4]
DEBUG: visitFunctionCallExpr - Resultado: [2, 3, 4], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [2, 3, 4]
DEBUG: visitGroupExpr - Result: [2, 3, 4]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [2, 3, 4]
DEBUG: visitConsExpr - Lista evaluada: [2, 3, 4]
DEBUG: visitConsExpr - Resultado: [1, 2, 3, 4]
DEBUG: Nodo ConsExprContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitCondExpr - Resultado: [1, 2, 3, 4]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitBlock - Visiting stmt, result: [1, 2, 3, 4]
DEBUG: visitBlock - End with result: [1, 2, 3, 4]
DEBUG: Nodo BlockContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitFunctionCallExpr - Resultado: [1, 2, 3, 4], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitGroupExpr - Result: [1, 2, 3, 4]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitDisplayExpr - Valor evaluado: (1 2 3 4)
(1 2 3 4)DEBUG: visitDisplayExpr - End
DEBUG: Nodo DisplayExprContext evaluado con resultado: (1 2 3 4)
DEBUG: visitRoot - Visiting child: (newline)
DEBUG: Visitando nodo: NewlineExprContext, texto: (newline)
DEBUG: visitNewlineExpr - Printing newline

DEBUG: Nodo NewlineExprContext evaluado con resultado: None
DEBUG: visitRoot - Visiting child: (display(filteres-parlista))
DEBUG: Visitando nodo: DisplayExprContext, texto: (display(filteres-parlista))
DEBUG: visitDisplayExpr - Start, texto: (display(filteres-parlista))
DEBUG: Visitando nodo: GroupExprContext, texto: (filteres-parlista)
DEBUG: visitGroupExpr - Start, texto: (filteres-parlista)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filteres-parlista
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: es-par
DEBUG: visitVariableExpr - Accediendo a variable: es-par
DEBUG: visitVariableExpr - Encontrada en FunctionTable: es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: VariableExprContext, texto: lista
DEBUG: visitVariableExpr - Accediendo a variable: lista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [1]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 1}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 1
DEBUG: Nodo VariableExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 1, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 1, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 2, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 0, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitConsExpr - Elemento: 2
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [3]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 3}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 3, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 1, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [4]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'x': 4}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 4, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 0, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitConsExpr - Elemento: 4
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 5
DEBUG: Nodo CarExprContext evaluado con resultado: 5
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [5]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'x': 5}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 5
DEBUG: Nodo VariableExprContext evaluado con resultado: 5
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 5, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 1, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 6
DEBUG: Nodo CarExprContext evaluado con resultado: 6
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [6]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'x': 6}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 6
DEBUG: Nodo VariableExprContext evaluado con resultado: 6
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 6, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 0, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 6
DEBUG: Nodo CarExprContext evaluado con resultado: 6
DEBUG: visitConsExpr - Elemento: 6
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 7
DEBUG: Nodo CarExprContext evaluado con resultado: 7
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [7]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'x': 7}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 7
DEBUG: Nodo VariableExprContext evaluado con resultado: 7
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 7, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 1, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCarExpr - Resultado: 8
DEBUG: Nodo CarExprContext evaluado con resultado: 8
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [8]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'x': 8}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 8
DEBUG: Nodo VariableExprContext evaluado con resultado: 8
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 8, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 0, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCarExpr - Resultado: 8
DEBUG: Nodo CarExprContext evaluado con resultado: 8
DEBUG: visitConsExpr - Elemento: 8
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'predicat': 'es-par', 'llista': [9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitNullExpr - Lista evaluada: [9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCarExpr - Lista evaluada: [9, 10]
DEBUG: visitCarExpr - Resultado: 9
DEBUG: Nodo CarExprContext evaluado con resultado: 9
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [9]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'predicat': 'es-par', 'llista': [9, 10]}, {'x': 9}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 9
DEBUG: Nodo VariableExprContext evaluado con resultado: 9
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 9, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 1, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'predicat': 'es-par', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [9, 10]
DEBUG: visitCdrExpr - Resultado: [10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'predicat': 'es-par', 'llista': [9, 10]}, {'predicat': 'es-par', 'llista': [10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitNullExpr - Lista evaluada: [10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCarExpr - Lista evaluada: [10]
DEBUG: visitCarExpr - Resultado: 10
DEBUG: Nodo CarExprContext evaluado con resultado: 10
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [10]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'predicat': 'es-par', 'llista': [9, 10]}, {'predicat': 'es-par', 'llista': [10]}, {'x': 10}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 10
DEBUG: Nodo VariableExprContext evaluado con resultado: 10
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 10, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 0, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'predicat': 'es-par', 'llista': [9, 10]}, {'predicat': 'es-par', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCarExpr - Lista evaluada: [10]
DEBUG: visitCarExpr - Resultado: 10
DEBUG: Nodo CarExprContext evaluado con resultado: 10
DEBUG: visitConsExpr - Elemento: 10
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCdrExpr - Lista evaluada: [10]
DEBUG: visitCdrExpr - Resultado: []
DEBUG: Nodo CdrExprContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', []]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'predicat': 'es-par', 'llista': [9, 10]}, {'predicat': 'es-par', 'llista': [10]}, {'predicat': 'es-par', 'llista': []}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = []
DEBUG: Nodo VariableExprContext evaluado con resultado: []
DEBUG: visitNullExpr - Lista evaluada: []
DEBUG: visitNullExpr - Resultado: True
DEBUG: Nodo NullExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'predicat': 'es-par', 'llista': [9, 10]}, {'predicat': 'es-par', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitConsExpr - Lista evaluada: []
DEBUG: visitConsExpr - Resultado: [10]
DEBUG: Nodo ConsExprContext evaluado con resultado: [10]
DEBUG: visitCondExpr - Resultado: [10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [10]
DEBUG: visitBlock - Visiting stmt, result: [10]
DEBUG: visitBlock - End with result: [10]
DEBUG: Nodo BlockContext evaluado con resultado: [10]
DEBUG: visitFunctionCallExpr - Resultado: [10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'predicat': 'es-par', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [10]
DEBUG: visitGroupExpr - Result: [10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [10]
DEBUG: visitCondExpr - Else resultado: [10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [10]
DEBUG: visitBlock - Visiting stmt, result: [10]
DEBUG: visitBlock - End with result: [10]
DEBUG: Nodo BlockContext evaluado con resultado: [10]
DEBUG: visitFunctionCallExpr - Resultado: [10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [10]
DEBUG: visitGroupExpr - Result: [10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [10]
DEBUG: visitConsExpr - Lista evaluada: [10]
DEBUG: visitConsExpr - Resultado: [8, 10]
DEBUG: Nodo ConsExprContext evaluado con resultado: [8, 10]
DEBUG: visitCondExpr - Resultado: [8, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [8, 10]
DEBUG: visitBlock - Visiting stmt, result: [8, 10]
DEBUG: visitBlock - End with result: [8, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [8, 10]
DEBUG: visitFunctionCallExpr - Resultado: [8, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [8, 10]
DEBUG: visitGroupExpr - Result: [8, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [8, 10]
DEBUG: visitCondExpr - Else resultado: [8, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [8, 10]
DEBUG: visitBlock - Visiting stmt, result: [8, 10]
DEBUG: visitBlock - End with result: [8, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [8, 10]
DEBUG: visitFunctionCallExpr - Resultado: [8, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [8, 10]
DEBUG: visitGroupExpr - Result: [8, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [8, 10]
DEBUG: visitConsExpr - Lista evaluada: [8, 10]
DEBUG: visitConsExpr - Resultado: [6, 8, 10]
DEBUG: Nodo ConsExprContext evaluado con resultado: [6, 8, 10]
DEBUG: visitCondExpr - Resultado: [6, 8, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [6, 8, 10]
DEBUG: visitBlock - Visiting stmt, result: [6, 8, 10]
DEBUG: visitBlock - End with result: [6, 8, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [6, 8, 10]
DEBUG: visitFunctionCallExpr - Resultado: [6, 8, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [6, 8, 10]
DEBUG: visitGroupExpr - Result: [6, 8, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [6, 8, 10]
DEBUG: visitCondExpr - Else resultado: [6, 8, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [6, 8, 10]
DEBUG: visitBlock - Visiting stmt, result: [6, 8, 10]
DEBUG: visitBlock - End with result: [6, 8, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [6, 8, 10]
DEBUG: visitFunctionCallExpr - Resultado: [6, 8, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [6, 8, 10]
DEBUG: visitGroupExpr - Result: [6, 8, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [6, 8, 10]
DEBUG: visitConsExpr - Lista evaluada: [6, 8, 10]
DEBUG: visitConsExpr - Resultado: [4, 6, 8, 10]
DEBUG: Nodo ConsExprContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitCondExpr - Resultado: [4, 6, 8, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitBlock - Visiting stmt, result: [4, 6, 8, 10]
DEBUG: visitBlock - End with result: [4, 6, 8, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitFunctionCallExpr - Resultado: [4, 6, 8, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitGroupExpr - Result: [4, 6, 8, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitCondExpr - Else resultado: [4, 6, 8, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitBlock - Visiting stmt, result: [4, 6, 8, 10]
DEBUG: visitBlock - End with result: [4, 6, 8, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitFunctionCallExpr - Resultado: [4, 6, 8, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitGroupExpr - Result: [4, 6, 8, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitConsExpr - Lista evaluada: [4, 6, 8, 10]
DEBUG: visitConsExpr - Resultado: [2, 4, 6, 8, 10]
DEBUG: Nodo ConsExprContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitCondExpr - Resultado: [2, 4, 6, 8, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitBlock - Visiting stmt, result: [2, 4, 6, 8, 10]
DEBUG: visitBlock - End with result: [2, 4, 6, 8, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitFunctionCallExpr - Resultado: [2, 4, 6, 8, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitGroupExpr - Result: [2, 4, 6, 8, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitCondExpr - Else resultado: [2, 4, 6, 8, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitBlock - Visiting stmt, result: [2, 4, 6, 8, 10]
DEBUG: visitBlock - End with result: [2, 4, 6, 8, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitFunctionCallExpr - Resultado: [2, 4, 6, 8, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitGroupExpr - Result: [2, 4, 6, 8, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitDisplayExpr - Valor evaluado: (2 4 6 8 10)
(2 4 6 8 10)DEBUG: visitDisplayExpr - End
DEBUG: Nodo DisplayExprContext evaluado con resultado: (2 4 6 8 10)
DEBUG: visitRoot - Visiting child: (newline)
DEBUG: Visitando nodo: NewlineExprContext, texto: (newline)
DEBUG: visitNewlineExpr - Printing newline

DEBUG: Nodo NewlineExprContext evaluado con resultado: None
DEBUG: visitRoot - Visiting child: (display(mapduplicar(filteres-parlista)))
DEBUG: Visitando nodo: DisplayExprContext, texto: (display(mapduplicar(filteres-parlista)))
DEBUG: visitDisplayExpr - Start, texto: (display(mapduplicar(filteres-parlista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (mapduplicar(filteres-parlista))
DEBUG: visitGroupExpr - Start, texto: (mapduplicar(filteres-parlista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapduplicar(filteres-parlista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: duplicar
DEBUG: visitVariableExpr - Accediendo a variable: duplicar
DEBUG: visitVariableExpr - Encontrada en FunctionTable: duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: GroupExprContext, texto: (filteres-parlista)
DEBUG: visitGroupExpr - Start, texto: (filteres-parlista)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filteres-parlista
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: es-par
DEBUG: visitVariableExpr - Accediendo a variable: es-par
DEBUG: visitVariableExpr - Encontrada en FunctionTable: es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: VariableExprContext, texto: lista
DEBUG: visitVariableExpr - Accediendo a variable: lista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [1]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 1}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 1
DEBUG: Nodo VariableExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 1, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 1, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 2, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 0, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitConsExpr - Elemento: 2
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [3]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 3}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 3, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 1, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [4]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'x': 4}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 4, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 0, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitConsExpr - Elemento: 4
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 5
DEBUG: Nodo CarExprContext evaluado con resultado: 5
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [5]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'x': 5}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 5
DEBUG: Nodo VariableExprContext evaluado con resultado: 5
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 5, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 1, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 6
DEBUG: Nodo CarExprContext evaluado con resultado: 6
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [6]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'x': 6}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 6
DEBUG: Nodo VariableExprContext evaluado con resultado: 6
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 6, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 0, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 6
DEBUG: Nodo CarExprContext evaluado con resultado: 6
DEBUG: visitConsExpr - Elemento: 6
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 7
DEBUG: Nodo CarExprContext evaluado con resultado: 7
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [7]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'x': 7}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 7
DEBUG: Nodo VariableExprContext evaluado con resultado: 7
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 7, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 1, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCarExpr - Resultado: 8
DEBUG: Nodo CarExprContext evaluado con resultado: 8
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [8]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'x': 8}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 8
DEBUG: Nodo VariableExprContext evaluado con resultado: 8
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 8, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 0, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCarExpr - Resultado: 8
DEBUG: Nodo CarExprContext evaluado con resultado: 8
DEBUG: visitConsExpr - Elemento: 8
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'predicat': 'es-par', 'llista': [9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitNullExpr - Lista evaluada: [9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCarExpr - Lista evaluada: [9, 10]
DEBUG: visitCarExpr - Resultado: 9
DEBUG: Nodo CarExprContext evaluado con resultado: 9
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [9]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'predicat': 'es-par', 'llista': [9, 10]}, {'x': 9}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 9
DEBUG: Nodo VariableExprContext evaluado con resultado: 9
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 9, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 1, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'predicat': 'es-par', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [9, 10]
DEBUG: visitCdrExpr - Resultado: [10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', [10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'predicat': 'es-par', 'llista': [9, 10]}, {'predicat': 'es-par', 'llista': [10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitNullExpr - Lista evaluada: [10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCarExpr - Lista evaluada: [10]
DEBUG: visitCarExpr - Resultado: 10
DEBUG: Nodo CarExprContext evaluado con resultado: 10
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [10]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'predicat': 'es-par', 'llista': [9, 10]}, {'predicat': 'es-par', 'llista': [10]}, {'x': 10}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 10
DEBUG: Nodo VariableExprContext evaluado con resultado: 10
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 10, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 0, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'predicat': 'es-par', 'llista': [9, 10]}, {'predicat': 'es-par', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCarExpr - Lista evaluada: [10]
DEBUG: visitCarExpr - Resultado: 10
DEBUG: Nodo CarExprContext evaluado con resultado: 10
DEBUG: visitConsExpr - Elemento: 10
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-par
DEBUG: Nodo VariableExprContext evaluado con resultado: es-par
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCdrExpr - Lista evaluada: [10]
DEBUG: visitCdrExpr - Resultado: []
DEBUG: Nodo CdrExprContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-par', []]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'predicat': 'es-par', 'llista': [9, 10]}, {'predicat': 'es-par', 'llista': [10]}, {'predicat': 'es-par', 'llista': []}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = []
DEBUG: Nodo VariableExprContext evaluado con resultado: []
DEBUG: visitNullExpr - Lista evaluada: []
DEBUG: visitNullExpr - Resultado: True
DEBUG: Nodo NullExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'predicat': 'es-par', 'llista': [9, 10]}, {'predicat': 'es-par', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitConsExpr - Lista evaluada: []
DEBUG: visitConsExpr - Resultado: [10]
DEBUG: Nodo ConsExprContext evaluado con resultado: [10]
DEBUG: visitCondExpr - Resultado: [10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [10]
DEBUG: visitBlock - Visiting stmt, result: [10]
DEBUG: visitBlock - End with result: [10]
DEBUG: Nodo BlockContext evaluado con resultado: [10]
DEBUG: visitFunctionCallExpr - Resultado: [10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}, {'predicat': 'es-par', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [10]
DEBUG: visitGroupExpr - Result: [10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [10]
DEBUG: visitCondExpr - Else resultado: [10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [10]
DEBUG: visitBlock - Visiting stmt, result: [10]
DEBUG: visitBlock - End with result: [10]
DEBUG: Nodo BlockContext evaluado con resultado: [10]
DEBUG: visitFunctionCallExpr - Resultado: [10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [10]
DEBUG: visitGroupExpr - Result: [10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [10]
DEBUG: visitConsExpr - Lista evaluada: [10]
DEBUG: visitConsExpr - Resultado: [8, 10]
DEBUG: Nodo ConsExprContext evaluado con resultado: [8, 10]
DEBUG: visitCondExpr - Resultado: [8, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [8, 10]
DEBUG: visitBlock - Visiting stmt, result: [8, 10]
DEBUG: visitBlock - End with result: [8, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [8, 10]
DEBUG: visitFunctionCallExpr - Resultado: [8, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [8, 10]
DEBUG: visitGroupExpr - Result: [8, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [8, 10]
DEBUG: visitCondExpr - Else resultado: [8, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [8, 10]
DEBUG: visitBlock - Visiting stmt, result: [8, 10]
DEBUG: visitBlock - End with result: [8, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [8, 10]
DEBUG: visitFunctionCallExpr - Resultado: [8, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [8, 10]
DEBUG: visitGroupExpr - Result: [8, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [8, 10]
DEBUG: visitConsExpr - Lista evaluada: [8, 10]
DEBUG: visitConsExpr - Resultado: [6, 8, 10]
DEBUG: Nodo ConsExprContext evaluado con resultado: [6, 8, 10]
DEBUG: visitCondExpr - Resultado: [6, 8, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [6, 8, 10]
DEBUG: visitBlock - Visiting stmt, result: [6, 8, 10]
DEBUG: visitBlock - End with result: [6, 8, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [6, 8, 10]
DEBUG: visitFunctionCallExpr - Resultado: [6, 8, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [6, 8, 10]
DEBUG: visitGroupExpr - Result: [6, 8, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [6, 8, 10]
DEBUG: visitCondExpr - Else resultado: [6, 8, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [6, 8, 10]
DEBUG: visitBlock - Visiting stmt, result: [6, 8, 10]
DEBUG: visitBlock - End with result: [6, 8, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [6, 8, 10]
DEBUG: visitFunctionCallExpr - Resultado: [6, 8, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [6, 8, 10]
DEBUG: visitGroupExpr - Result: [6, 8, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [6, 8, 10]
DEBUG: visitConsExpr - Lista evaluada: [6, 8, 10]
DEBUG: visitConsExpr - Resultado: [4, 6, 8, 10]
DEBUG: Nodo ConsExprContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitCondExpr - Resultado: [4, 6, 8, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitBlock - Visiting stmt, result: [4, 6, 8, 10]
DEBUG: visitBlock - End with result: [4, 6, 8, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitFunctionCallExpr - Resultado: [4, 6, 8, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitGroupExpr - Result: [4, 6, 8, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitCondExpr - Else resultado: [4, 6, 8, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitBlock - Visiting stmt, result: [4, 6, 8, 10]
DEBUG: visitBlock - End with result: [4, 6, 8, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitFunctionCallExpr - Resultado: [4, 6, 8, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitGroupExpr - Result: [4, 6, 8, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitConsExpr - Lista evaluada: [4, 6, 8, 10]
DEBUG: visitConsExpr - Resultado: [2, 4, 6, 8, 10]
DEBUG: Nodo ConsExprContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitCondExpr - Resultado: [2, 4, 6, 8, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitBlock - Visiting stmt, result: [2, 4, 6, 8, 10]
DEBUG: visitBlock - End with result: [2, 4, 6, 8, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitFunctionCallExpr - Resultado: [2, 4, 6, 8, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-par', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitGroupExpr - Result: [2, 4, 6, 8, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitCondExpr - Else resultado: [2, 4, 6, 8, 10]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitBlock - Visiting stmt, result: [2, 4, 6, 8, 10]
DEBUG: visitBlock - End with result: [2, 4, 6, 8, 10]
DEBUG: Nodo BlockContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitFunctionCallExpr - Resultado: [2, 4, 6, 8, 10], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitGroupExpr - Result: [2, 4, 6, 8, 10]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [2, 4, 6, 8, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 4, 6, 8, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitNullExpr - Lista evaluada: [2, 4, 6, 8, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 4, 6, 8, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitCarExpr - Lista evaluada: [2, 4, 6, 8, 10]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}, {'x': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 2, Right: 2
DEBUG: visitArithmeticExpr - Result: 4
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 4
DEBUG: visitBlock - Visiting stmt, result: 4
DEBUG: visitBlock - End with result: 4
DEBUG: Nodo BlockContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Resultado: 4, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 4
DEBUG: visitGroupExpr - Result: 4
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 4
DEBUG: visitConsExpr - Elemento: 4
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 4, 6, 8, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 4, 6, 8, 10]
DEBUG: visitCdrExpr - Lista evaluada: [2, 4, 6, 8, 10]
DEBUG: visitCdrExpr - Resultado: [4, 6, 8, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [4, 6, 8, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [4, 6, 8, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 6, 8, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitNullExpr - Lista evaluada: [4, 6, 8, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 6, 8, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitCarExpr - Lista evaluada: [4, 6, 8, 10]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [4]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [4, 6, 8, 10]}, {'x': 4}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 4, Right: 2
DEBUG: visitArithmeticExpr - Result: 8
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 8
DEBUG: visitBlock - Visiting stmt, result: 8
DEBUG: visitBlock - End with result: 8
DEBUG: Nodo BlockContext evaluado con resultado: 8
DEBUG: visitFunctionCallExpr - Resultado: 8, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [4, 6, 8, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 8
DEBUG: visitGroupExpr - Result: 8
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 8
DEBUG: visitConsExpr - Elemento: 8
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 6, 8, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 6, 8, 10]
DEBUG: visitCdrExpr - Lista evaluada: [4, 6, 8, 10]
DEBUG: visitCdrExpr - Resultado: [6, 8, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [6, 8, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [6, 8, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [6, 8, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 8, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 8, 10]
DEBUG: visitNullExpr - Lista evaluada: [6, 8, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 8, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 8, 10]
DEBUG: visitCarExpr - Lista evaluada: [6, 8, 10]
DEBUG: visitCarExpr - Resultado: 6
DEBUG: Nodo CarExprContext evaluado con resultado: 6
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [6]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [6, 8, 10]}, {'x': 6}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 6
DEBUG: Nodo VariableExprContext evaluado con resultado: 6
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 6, Right: 2
DEBUG: visitArithmeticExpr - Result: 12
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 12
DEBUG: visitBlock - Visiting stmt, result: 12
DEBUG: visitBlock - End with result: 12
DEBUG: Nodo BlockContext evaluado con resultado: 12
DEBUG: visitFunctionCallExpr - Resultado: 12, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [6, 8, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 12
DEBUG: visitGroupExpr - Result: 12
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 12
DEBUG: visitConsExpr - Elemento: 12
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 8, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 8, 10]
DEBUG: visitCdrExpr - Lista evaluada: [6, 8, 10]
DEBUG: visitCdrExpr - Resultado: [8, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [8, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [8, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [6, 8, 10]}, {'func': 'duplicar', 'llista': [8, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 10]
DEBUG: visitNullExpr - Lista evaluada: [8, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 10]
DEBUG: visitCarExpr - Lista evaluada: [8, 10]
DEBUG: visitCarExpr - Resultado: 8
DEBUG: Nodo CarExprContext evaluado con resultado: 8
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [8]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [6, 8, 10]}, {'func': 'duplicar', 'llista': [8, 10]}, {'x': 8}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 8
DEBUG: Nodo VariableExprContext evaluado con resultado: 8
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 8, Right: 2
DEBUG: visitArithmeticExpr - Result: 16
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 16
DEBUG: visitBlock - Visiting stmt, result: 16
DEBUG: visitBlock - End with result: 16
DEBUG: Nodo BlockContext evaluado con resultado: 16
DEBUG: visitFunctionCallExpr - Resultado: 16, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [6, 8, 10]}, {'func': 'duplicar', 'llista': [8, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 16
DEBUG: visitGroupExpr - Result: 16
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 16
DEBUG: visitConsExpr - Elemento: 16
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 10]
DEBUG: visitCdrExpr - Lista evaluada: [8, 10]
DEBUG: visitCdrExpr - Resultado: [10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [6, 8, 10]}, {'func': 'duplicar', 'llista': [8, 10]}, {'func': 'duplicar', 'llista': [10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitNullExpr - Lista evaluada: [10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCarExpr - Lista evaluada: [10]
DEBUG: visitCarExpr - Resultado: 10
DEBUG: Nodo CarExprContext evaluado con resultado: 10
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [10]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [6, 8, 10]}, {'func': 'duplicar', 'llista': [8, 10]}, {'func': 'duplicar', 'llista': [10]}, {'x': 10}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 10
DEBUG: Nodo VariableExprContext evaluado con resultado: 10
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 10, Right: 2
DEBUG: visitArithmeticExpr - Result: 20
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 20
DEBUG: visitBlock - Visiting stmt, result: 20
DEBUG: visitBlock - End with result: 20
DEBUG: Nodo BlockContext evaluado con resultado: 20
DEBUG: visitFunctionCallExpr - Resultado: 20, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [6, 8, 10]}, {'func': 'duplicar', 'llista': [8, 10]}, {'func': 'duplicar', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 20
DEBUG: visitGroupExpr - Result: 20
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 20
DEBUG: visitConsExpr - Elemento: 20
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCdrExpr - Lista evaluada: [10]
DEBUG: visitCdrExpr - Resultado: []
DEBUG: Nodo CdrExprContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', []]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [6, 8, 10]}, {'func': 'duplicar', 'llista': [8, 10]}, {'func': 'duplicar', 'llista': [10]}, {'func': 'duplicar', 'llista': []}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = []
DEBUG: Nodo VariableExprContext evaluado con resultado: []
DEBUG: visitNullExpr - Lista evaluada: []
DEBUG: visitNullExpr - Resultado: True
DEBUG: Nodo NullExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [6, 8, 10]}, {'func': 'duplicar', 'llista': [8, 10]}, {'func': 'duplicar', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitConsExpr - Lista evaluada: []
DEBUG: visitConsExpr - Resultado: [20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [20]
DEBUG: visitCondExpr - Else resultado: [20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [20]
DEBUG: visitBlock - Visiting stmt, result: [20]
DEBUG: visitBlock - End with result: [20]
DEBUG: Nodo BlockContext evaluado con resultado: [20]
DEBUG: visitFunctionCallExpr - Resultado: [20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [6, 8, 10]}, {'func': 'duplicar', 'llista': [8, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [20]
DEBUG: visitGroupExpr - Result: [20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [20]
DEBUG: visitConsExpr - Lista evaluada: [20]
DEBUG: visitConsExpr - Resultado: [16, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [16, 20]
DEBUG: visitCondExpr - Else resultado: [16, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [16, 20]
DEBUG: visitBlock - Visiting stmt, result: [16, 20]
DEBUG: visitBlock - End with result: [16, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [16, 20]
DEBUG: visitFunctionCallExpr - Resultado: [16, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [6, 8, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [16, 20]
DEBUG: visitGroupExpr - Result: [16, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [16, 20]
DEBUG: visitConsExpr - Lista evaluada: [16, 20]
DEBUG: visitConsExpr - Resultado: [12, 16, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [12, 16, 20]
DEBUG: visitCondExpr - Else resultado: [12, 16, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [12, 16, 20]
DEBUG: visitBlock - Visiting stmt, result: [12, 16, 20]
DEBUG: visitBlock - End with result: [12, 16, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [12, 16, 20]
DEBUG: visitFunctionCallExpr - Resultado: [12, 16, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}, {'func': 'duplicar', 'llista': [4, 6, 8, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [12, 16, 20]
DEBUG: visitGroupExpr - Result: [12, 16, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [12, 16, 20]
DEBUG: visitConsExpr - Lista evaluada: [12, 16, 20]
DEBUG: visitConsExpr - Resultado: [8, 12, 16, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [8, 12, 16, 20]
DEBUG: visitCondExpr - Else resultado: [8, 12, 16, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [8, 12, 16, 20]
DEBUG: visitBlock - Visiting stmt, result: [8, 12, 16, 20]
DEBUG: visitBlock - End with result: [8, 12, 16, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [8, 12, 16, 20]
DEBUG: visitFunctionCallExpr - Resultado: [8, 12, 16, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 4, 6, 8, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [8, 12, 16, 20]
DEBUG: visitGroupExpr - Result: [8, 12, 16, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [8, 12, 16, 20]
DEBUG: visitConsExpr - Lista evaluada: [8, 12, 16, 20]
DEBUG: visitConsExpr - Resultado: [4, 8, 12, 16, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [4, 8, 12, 16, 20]
DEBUG: visitCondExpr - Else resultado: [4, 8, 12, 16, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [4, 8, 12, 16, 20]
DEBUG: visitBlock - Visiting stmt, result: [4, 8, 12, 16, 20]
DEBUG: visitBlock - End with result: [4, 8, 12, 16, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [4, 8, 12, 16, 20]
DEBUG: visitFunctionCallExpr - Resultado: [4, 8, 12, 16, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [4, 8, 12, 16, 20]
DEBUG: visitGroupExpr - Result: [4, 8, 12, 16, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [4, 8, 12, 16, 20]
DEBUG: visitDisplayExpr - Valor evaluado: (4 8 12 16 20)
(4 8 12 16 20)DEBUG: visitDisplayExpr - End
DEBUG: Nodo DisplayExprContext evaluado con resultado: (4 8 12 16 20)
DEBUG: visitRoot - Visiting child: (newline)
DEBUG: Visitando nodo: NewlineExprContext, texto: (newline)
DEBUG: visitNewlineExpr - Printing newline

DEBUG: Nodo NewlineExprContext evaluado con resultado: None
DEBUG: visitRoot - Visiting child: (display(mapduplicar(filtermenor-que-5lista)))
DEBUG: Visitando nodo: DisplayExprContext, texto: (display(mapduplicar(filtermenor-que-5lista)))
DEBUG: visitDisplayExpr - Start, texto: (display(mapduplicar(filtermenor-que-5lista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (mapduplicar(filtermenor-que-5lista))
DEBUG: visitGroupExpr - Start, texto: (mapduplicar(filtermenor-que-5lista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapduplicar(filtermenor-que-5lista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: duplicar
DEBUG: visitVariableExpr - Accediendo a variable: duplicar
DEBUG: visitVariableExpr - Encontrada en FunctionTable: duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: GroupExprContext, texto: (filtermenor-que-5lista)
DEBUG: visitGroupExpr - Start, texto: (filtermenor-que-5lista)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filtermenor-que-5lista
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: menor-que-5
DEBUG: visitVariableExpr - Accediendo a variable: menor-que-5
DEBUG: visitVariableExpr - Encontrada en FunctionTable: menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: VariableExprContext, texto: lista
DEBUG: visitVariableExpr - Accediendo a variable: lista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [1]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 1}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 1
DEBUG: Nodo VariableExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 1, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitConsExpr - Elemento: 1
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 2, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitConsExpr - Elemento: 2
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [3]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 3}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 3, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitConsExpr - Elemento: 3
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [4]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'x': 4}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 4, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitConsExpr - Elemento: 4
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 5
DEBUG: Nodo CarExprContext evaluado con resultado: 5
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [5]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'x': 5}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 5
DEBUG: Nodo VariableExprContext evaluado con resultado: 5
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 5, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 6
DEBUG: Nodo CarExprContext evaluado con resultado: 6
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [6]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'x': 6}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 6
DEBUG: Nodo VariableExprContext evaluado con resultado: 6
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 6, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 7
DEBUG: Nodo CarExprContext evaluado con resultado: 7
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [7]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'x': 7}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 7
DEBUG: Nodo VariableExprContext evaluado con resultado: 7
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 7, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCarExpr - Resultado: 8
DEBUG: Nodo CarExprContext evaluado con resultado: 8
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [8]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'x': 8}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 8
DEBUG: Nodo VariableExprContext evaluado con resultado: 8
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 8, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitNullExpr - Lista evaluada: [9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCarExpr - Lista evaluada: [9, 10]
DEBUG: visitCarExpr - Resultado: 9
DEBUG: Nodo CarExprContext evaluado con resultado: 9
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [9]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}, {'x': 9}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 9
DEBUG: Nodo VariableExprContext evaluado con resultado: 9
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 9, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [9, 10]
DEBUG: visitCdrExpr - Resultado: [10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}, {'predicat': 'menor-que-5', 'llista': [10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitNullExpr - Lista evaluada: [10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCarExpr - Lista evaluada: [10]
DEBUG: visitCarExpr - Resultado: 10
DEBUG: Nodo CarExprContext evaluado con resultado: 10
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [10]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}, {'predicat': 'menor-que-5', 'llista': [10]}, {'x': 10}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 10
DEBUG: Nodo VariableExprContext evaluado con resultado: 10
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 10, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}, {'predicat': 'menor-que-5', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCdrExpr - Lista evaluada: [10]
DEBUG: visitCdrExpr - Resultado: []
DEBUG: Nodo CdrExprContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', []]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}, {'predicat': 'menor-que-5', 'llista': [10]}, {'predicat': 'menor-que-5', 'llista': []}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = []
DEBUG: Nodo VariableExprContext evaluado con resultado: []
DEBUG: visitNullExpr - Lista evaluada: []
DEBUG: visitNullExpr - Resultado: True
DEBUG: Nodo NullExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}, {'predicat': 'menor-que-5', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitConsExpr - Lista evaluada: []
DEBUG: visitConsExpr - Resultado: [4]
DEBUG: Nodo ConsExprContext evaluado con resultado: [4]
DEBUG: visitCondExpr - Resultado: [4]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [4]
DEBUG: visitBlock - Visiting stmt, result: [4]
DEBUG: visitBlock - End with result: [4]
DEBUG: Nodo BlockContext evaluado con resultado: [4]
DEBUG: visitFunctionCallExpr - Resultado: [4], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [4]
DEBUG: visitGroupExpr - Result: [4]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [4]
DEBUG: visitConsExpr - Lista evaluada: [4]
DEBUG: visitConsExpr - Resultado: [3, 4]
DEBUG: Nodo ConsExprContext evaluado con resultado: [3, 4]
DEBUG: visitCondExpr - Resultado: [3, 4]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [3, 4]
DEBUG: visitBlock - Visiting stmt, result: [3, 4]
DEBUG: visitBlock - End with result: [3, 4]
DEBUG: Nodo BlockContext evaluado con resultado: [3, 4]
DEBUG: visitFunctionCallExpr - Resultado: [3, 4], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [3, 4]
DEBUG: visitGroupExpr - Result: [3, 4]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [3, 4]
DEBUG: visitConsExpr - Lista evaluada: [3, 4]
DEBUG: visitConsExpr - Resultado: [2, 3, 4]
DEBUG: Nodo ConsExprContext evaluado con resultado: [2, 3, 4]
DEBUG: visitCondExpr - Resultado: [2, 3, 4]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [2, 3, 4]
DEBUG: visitBlock - Visiting stmt, result: [2, 3, 4]
DEBUG: visitBlock - End with result: [2, 3, 4]
DEBUG: Nodo BlockContext evaluado con resultado: [2, 3, 4]
DEBUG: visitFunctionCallExpr - Resultado: [2, 3, 4], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [2, 3, 4]
DEBUG: visitGroupExpr - Result: [2, 3, 4]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [2, 3, 4]
DEBUG: visitConsExpr - Lista evaluada: [2, 3, 4]
DEBUG: visitConsExpr - Resultado: [1, 2, 3, 4]
DEBUG: Nodo ConsExprContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitCondExpr - Resultado: [1, 2, 3, 4]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitBlock - Visiting stmt, result: [1, 2, 3, 4]
DEBUG: visitBlock - End with result: [1, 2, 3, 4]
DEBUG: Nodo BlockContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitFunctionCallExpr - Resultado: [1, 2, 3, 4], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitGroupExpr - Result: [1, 2, 3, 4]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [1, 2, 3, 4]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitNullExpr - Lista evaluada: [1, 2, 3, 4]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitCarExpr - Lista evaluada: [1, 2, 3, 4]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [1]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4]}, {'x': 1}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 1
DEBUG: Nodo VariableExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 1, Right: 2
DEBUG: visitArithmeticExpr - Result: 2
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 2
DEBUG: visitBlock - Visiting stmt, result: 2
DEBUG: visitBlock - End with result: 2
DEBUG: Nodo BlockContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Resultado: 2, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 2
DEBUG: visitGroupExpr - Result: 2
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 2
DEBUG: visitConsExpr - Elemento: 2
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitCdrExpr - Lista evaluada: [1, 2, 3, 4]
DEBUG: visitCdrExpr - Resultado: [2, 3, 4]
DEBUG: Nodo CdrExprContext evaluado con resultado: [2, 3, 4]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [2, 3, 4]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4]}, {'func': 'duplicar', 'llista': [2, 3, 4]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4]
DEBUG: visitNullExpr - Lista evaluada: [2, 3, 4]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4]
DEBUG: visitCarExpr - Lista evaluada: [2, 3, 4]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4]}, {'func': 'duplicar', 'llista': [2, 3, 4]}, {'x': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 2, Right: 2
DEBUG: visitArithmeticExpr - Result: 4
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 4
DEBUG: visitBlock - Visiting stmt, result: 4
DEBUG: visitBlock - End with result: 4
DEBUG: Nodo BlockContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Resultado: 4, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4]}, {'func': 'duplicar', 'llista': [2, 3, 4]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 4
DEBUG: visitGroupExpr - Result: 4
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 4
DEBUG: visitConsExpr - Elemento: 4
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4]
DEBUG: visitCdrExpr - Lista evaluada: [2, 3, 4]
DEBUG: visitCdrExpr - Resultado: [3, 4]
DEBUG: Nodo CdrExprContext evaluado con resultado: [3, 4]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [3, 4]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4]}, {'func': 'duplicar', 'llista': [2, 3, 4]}, {'func': 'duplicar', 'llista': [3, 4]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4]
DEBUG: visitNullExpr - Lista evaluada: [3, 4]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4]
DEBUG: visitCarExpr - Lista evaluada: [3, 4]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [3]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4]}, {'func': 'duplicar', 'llista': [2, 3, 4]}, {'func': 'duplicar', 'llista': [3, 4]}, {'x': 3}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 3, Right: 2
DEBUG: visitArithmeticExpr - Result: 6
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 6
DEBUG: visitBlock - Visiting stmt, result: 6
DEBUG: visitBlock - End with result: 6
DEBUG: Nodo BlockContext evaluado con resultado: 6
DEBUG: visitFunctionCallExpr - Resultado: 6, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4]}, {'func': 'duplicar', 'llista': [2, 3, 4]}, {'func': 'duplicar', 'llista': [3, 4]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 6
DEBUG: visitGroupExpr - Result: 6
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 6
DEBUG: visitConsExpr - Elemento: 6
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4]
DEBUG: visitCdrExpr - Lista evaluada: [3, 4]
DEBUG: visitCdrExpr - Resultado: [4]
DEBUG: Nodo CdrExprContext evaluado con resultado: [4]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [4]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4]}, {'func': 'duplicar', 'llista': [2, 3, 4]}, {'func': 'duplicar', 'llista': [3, 4]}, {'func': 'duplicar', 'llista': [4]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4]
DEBUG: visitNullExpr - Lista evaluada: [4]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4]
DEBUG: visitCarExpr - Lista evaluada: [4]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [4]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4]}, {'func': 'duplicar', 'llista': [2, 3, 4]}, {'func': 'duplicar', 'llista': [3, 4]}, {'func': 'duplicar', 'llista': [4]}, {'x': 4}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 4, Right: 2
DEBUG: visitArithmeticExpr - Result: 8
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 8
DEBUG: visitBlock - Visiting stmt, result: 8
DEBUG: visitBlock - End with result: 8
DEBUG: Nodo BlockContext evaluado con resultado: 8
DEBUG: visitFunctionCallExpr - Resultado: 8, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4]}, {'func': 'duplicar', 'llista': [2, 3, 4]}, {'func': 'duplicar', 'llista': [3, 4]}, {'func': 'duplicar', 'llista': [4]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 8
DEBUG: visitGroupExpr - Result: 8
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 8
DEBUG: visitConsExpr - Elemento: 8
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4]
DEBUG: visitCdrExpr - Lista evaluada: [4]
DEBUG: visitCdrExpr - Resultado: []
DEBUG: Nodo CdrExprContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', []]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4]}, {'func': 'duplicar', 'llista': [2, 3, 4]}, {'func': 'duplicar', 'llista': [3, 4]}, {'func': 'duplicar', 'llista': [4]}, {'func': 'duplicar', 'llista': []}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = []
DEBUG: Nodo VariableExprContext evaluado con resultado: []
DEBUG: visitNullExpr - Lista evaluada: []
DEBUG: visitNullExpr - Resultado: True
DEBUG: Nodo NullExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4]}, {'func': 'duplicar', 'llista': [2, 3, 4]}, {'func': 'duplicar', 'llista': [3, 4]}, {'func': 'duplicar', 'llista': [4]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitConsExpr - Lista evaluada: []
DEBUG: visitConsExpr - Resultado: [8]
DEBUG: Nodo ConsExprContext evaluado con resultado: [8]
DEBUG: visitCondExpr - Else resultado: [8]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [8]
DEBUG: visitBlock - Visiting stmt, result: [8]
DEBUG: visitBlock - End with result: [8]
DEBUG: Nodo BlockContext evaluado con resultado: [8]
DEBUG: visitFunctionCallExpr - Resultado: [8], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4]}, {'func': 'duplicar', 'llista': [2, 3, 4]}, {'func': 'duplicar', 'llista': [3, 4]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [8]
DEBUG: visitGroupExpr - Result: [8]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [8]
DEBUG: visitConsExpr - Lista evaluada: [8]
DEBUG: visitConsExpr - Resultado: [6, 8]
DEBUG: Nodo ConsExprContext evaluado con resultado: [6, 8]
DEBUG: visitCondExpr - Else resultado: [6, 8]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [6, 8]
DEBUG: visitBlock - Visiting stmt, result: [6, 8]
DEBUG: visitBlock - End with result: [6, 8]
DEBUG: Nodo BlockContext evaluado con resultado: [6, 8]
DEBUG: visitFunctionCallExpr - Resultado: [6, 8], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4]}, {'func': 'duplicar', 'llista': [2, 3, 4]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [6, 8]
DEBUG: visitGroupExpr - Result: [6, 8]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [6, 8]
DEBUG: visitConsExpr - Lista evaluada: [6, 8]
DEBUG: visitConsExpr - Resultado: [4, 6, 8]
DEBUG: Nodo ConsExprContext evaluado con resultado: [4, 6, 8]
DEBUG: visitCondExpr - Else resultado: [4, 6, 8]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [4, 6, 8]
DEBUG: visitBlock - Visiting stmt, result: [4, 6, 8]
DEBUG: visitBlock - End with result: [4, 6, 8]
DEBUG: Nodo BlockContext evaluado con resultado: [4, 6, 8]
DEBUG: visitFunctionCallExpr - Resultado: [4, 6, 8], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [4, 6, 8]
DEBUG: visitGroupExpr - Result: [4, 6, 8]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [4, 6, 8]
DEBUG: visitConsExpr - Lista evaluada: [4, 6, 8]
DEBUG: visitConsExpr - Resultado: [2, 4, 6, 8]
DEBUG: Nodo ConsExprContext evaluado con resultado: [2, 4, 6, 8]
DEBUG: visitCondExpr - Else resultado: [2, 4, 6, 8]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [2, 4, 6, 8]
DEBUG: visitBlock - Visiting stmt, result: [2, 4, 6, 8]
DEBUG: visitBlock - End with result: [2, 4, 6, 8]
DEBUG: Nodo BlockContext evaluado con resultado: [2, 4, 6, 8]
DEBUG: visitFunctionCallExpr - Resultado: [2, 4, 6, 8], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [2, 4, 6, 8]
DEBUG: visitGroupExpr - Result: [2, 4, 6, 8]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [2, 4, 6, 8]
DEBUG: visitDisplayExpr - Valor evaluado: (2 4 6 8)
(2 4 6 8)DEBUG: visitDisplayExpr - End
DEBUG: Nodo DisplayExprContext evaluado con resultado: (2 4 6 8)
DEBUG: visitRoot - Visiting child: (newline)
DEBUG: Visitando nodo: NewlineExprContext, texto: (newline)
DEBUG: visitNewlineExpr - Printing newline

DEBUG: Nodo NewlineExprContext evaluado con resultado: None
DEBUG: visitRoot - Visiting child: (display(filteres-multiplo-de-3(mapduplicarlista)))
DEBUG: Visitando nodo: DisplayExprContext, texto: (display(filteres-multiplo-de-3(mapduplicarlista)))
DEBUG: visitDisplayExpr - Start, texto: (display(filteres-multiplo-de-3(mapduplicarlista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (filteres-multiplo-de-3(mapduplicarlista))
DEBUG: visitGroupExpr - Start, texto: (filteres-multiplo-de-3(mapduplicarlista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filteres-multiplo-de-3(mapduplicarlista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: es-multiplo-de-3
DEBUG: visitVariableExpr - Accediendo a variable: es-multiplo-de-3
DEBUG: visitVariableExpr - Encontrada en FunctionTable: es-multiplo-de-3
DEBUG: Nodo VariableExprContext evaluado con resultado: es-multiplo-de-3
DEBUG: Visitando nodo: GroupExprContext, texto: (mapduplicarlista)
DEBUG: visitGroupExpr - Start, texto: (mapduplicarlista)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapduplicarlista
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: duplicar
DEBUG: visitVariableExpr - Accediendo a variable: duplicar
DEBUG: visitVariableExpr - Encontrada en FunctionTable: duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: VariableExprContext, texto: lista
DEBUG: visitVariableExpr - Accediendo a variable: lista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [1]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 1}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 1
DEBUG: Nodo VariableExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 1, Right: 2
DEBUG: visitArithmeticExpr - Result: 2
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 2
DEBUG: visitBlock - Visiting stmt, result: 2
DEBUG: visitBlock - End with result: 2
DEBUG: Nodo BlockContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Resultado: 2, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 2
DEBUG: visitGroupExpr - Result: 2
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 2
DEBUG: visitConsExpr - Elemento: 2
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 2, Right: 2
DEBUG: visitArithmeticExpr - Result: 4
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 4
DEBUG: visitBlock - Visiting stmt, result: 4
DEBUG: visitBlock - End with result: 4
DEBUG: Nodo BlockContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Resultado: 4, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 4
DEBUG: visitGroupExpr - Result: 4
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 4
DEBUG: visitConsExpr - Elemento: 4
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [3]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 3}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 3, Right: 2
DEBUG: visitArithmeticExpr - Result: 6
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 6
DEBUG: visitBlock - Visiting stmt, result: 6
DEBUG: visitBlock - End with result: 6
DEBUG: Nodo BlockContext evaluado con resultado: 6
DEBUG: visitFunctionCallExpr - Resultado: 6, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 6
DEBUG: visitGroupExpr - Result: 6
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 6
DEBUG: visitConsExpr - Elemento: 6
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [4]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'x': 4}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 4, Right: 2
DEBUG: visitArithmeticExpr - Result: 8
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 8
DEBUG: visitBlock - Visiting stmt, result: 8
DEBUG: visitBlock - End with result: 8
DEBUG: Nodo BlockContext evaluado con resultado: 8
DEBUG: visitFunctionCallExpr - Resultado: 8, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 8
DEBUG: visitGroupExpr - Result: 8
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 8
DEBUG: visitConsExpr - Elemento: 8
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 5
DEBUG: Nodo CarExprContext evaluado con resultado: 5
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [5]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'x': 5}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 5
DEBUG: Nodo VariableExprContext evaluado con resultado: 5
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 5, Right: 2
DEBUG: visitArithmeticExpr - Result: 10
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 10
DEBUG: visitBlock - Visiting stmt, result: 10
DEBUG: visitBlock - End with result: 10
DEBUG: Nodo BlockContext evaluado con resultado: 10
DEBUG: visitFunctionCallExpr - Resultado: 10, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 10
DEBUG: visitGroupExpr - Result: 10
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 10
DEBUG: visitConsExpr - Elemento: 10
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 6
DEBUG: Nodo CarExprContext evaluado con resultado: 6
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [6]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'x': 6}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 6
DEBUG: Nodo VariableExprContext evaluado con resultado: 6
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 6, Right: 2
DEBUG: visitArithmeticExpr - Result: 12
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 12
DEBUG: visitBlock - Visiting stmt, result: 12
DEBUG: visitBlock - End with result: 12
DEBUG: Nodo BlockContext evaluado con resultado: 12
DEBUG: visitFunctionCallExpr - Resultado: 12, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 12
DEBUG: visitGroupExpr - Result: 12
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 12
DEBUG: visitConsExpr - Elemento: 12
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 7
DEBUG: Nodo CarExprContext evaluado con resultado: 7
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [7]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'x': 7}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 7
DEBUG: Nodo VariableExprContext evaluado con resultado: 7
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 7, Right: 2
DEBUG: visitArithmeticExpr - Result: 14
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 14
DEBUG: visitBlock - Visiting stmt, result: 14
DEBUG: visitBlock - End with result: 14
DEBUG: Nodo BlockContext evaluado con resultado: 14
DEBUG: visitFunctionCallExpr - Resultado: 14, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 14
DEBUG: visitGroupExpr - Result: 14
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 14
DEBUG: visitConsExpr - Elemento: 14
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCarExpr - Resultado: 8
DEBUG: Nodo CarExprContext evaluado con resultado: 8
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [8]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'x': 8}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 8
DEBUG: Nodo VariableExprContext evaluado con resultado: 8
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 8, Right: 2
DEBUG: visitArithmeticExpr - Result: 16
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 16
DEBUG: visitBlock - Visiting stmt, result: 16
DEBUG: visitBlock - End with result: 16
DEBUG: Nodo BlockContext evaluado con resultado: 16
DEBUG: visitFunctionCallExpr - Resultado: 16, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 16
DEBUG: visitGroupExpr - Result: 16
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 16
DEBUG: visitConsExpr - Elemento: 16
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [9, 10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'func': 'duplicar', 'llista': [9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitNullExpr - Lista evaluada: [9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCarExpr - Lista evaluada: [9, 10]
DEBUG: visitCarExpr - Resultado: 9
DEBUG: Nodo CarExprContext evaluado con resultado: 9
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [9]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'func': 'duplicar', 'llista': [9, 10]}, {'x': 9}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 9
DEBUG: Nodo VariableExprContext evaluado con resultado: 9
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 9, Right: 2
DEBUG: visitArithmeticExpr - Result: 18
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 18
DEBUG: visitBlock - Visiting stmt, result: 18
DEBUG: visitBlock - End with result: 18
DEBUG: Nodo BlockContext evaluado con resultado: 18
DEBUG: visitFunctionCallExpr - Resultado: 18, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'func': 'duplicar', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 18
DEBUG: visitGroupExpr - Result: 18
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 18
DEBUG: visitConsExpr - Elemento: 18
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [9, 10]
DEBUG: visitCdrExpr - Resultado: [10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [10]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'func': 'duplicar', 'llista': [9, 10]}, {'func': 'duplicar', 'llista': [10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitNullExpr - Lista evaluada: [10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCarExpr - Lista evaluada: [10]
DEBUG: visitCarExpr - Resultado: 10
DEBUG: Nodo CarExprContext evaluado con resultado: 10
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [10]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'func': 'duplicar', 'llista': [9, 10]}, {'func': 'duplicar', 'llista': [10]}, {'x': 10}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 10
DEBUG: Nodo VariableExprContext evaluado con resultado: 10
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 10, Right: 2
DEBUG: visitArithmeticExpr - Result: 20
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 20
DEBUG: visitBlock - Visiting stmt, result: 20
DEBUG: visitBlock - End with result: 20
DEBUG: Nodo BlockContext evaluado con resultado: 20
DEBUG: visitFunctionCallExpr - Resultado: 20, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'func': 'duplicar', 'llista': [9, 10]}, {'func': 'duplicar', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 20
DEBUG: visitGroupExpr - Result: 20
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 20
DEBUG: visitConsExpr - Elemento: 20
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCdrExpr - Lista evaluada: [10]
DEBUG: visitCdrExpr - Resultado: []
DEBUG: Nodo CdrExprContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', []]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'func': 'duplicar', 'llista': [9, 10]}, {'func': 'duplicar', 'llista': [10]}, {'func': 'duplicar', 'llista': []}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = []
DEBUG: Nodo VariableExprContext evaluado con resultado: []
DEBUG: visitNullExpr - Lista evaluada: []
DEBUG: visitNullExpr - Resultado: True
DEBUG: Nodo NullExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'func': 'duplicar', 'llista': [9, 10]}, {'func': 'duplicar', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitConsExpr - Lista evaluada: []
DEBUG: visitConsExpr - Resultado: [20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [20]
DEBUG: visitCondExpr - Else resultado: [20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [20]
DEBUG: visitBlock - Visiting stmt, result: [20]
DEBUG: visitBlock - End with result: [20]
DEBUG: Nodo BlockContext evaluado con resultado: [20]
DEBUG: visitFunctionCallExpr - Resultado: [20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}, {'func': 'duplicar', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [20]
DEBUG: visitGroupExpr - Result: [20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [20]
DEBUG: visitConsExpr - Lista evaluada: [20]
DEBUG: visitConsExpr - Resultado: [18, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [18, 20]
DEBUG: visitCondExpr - Else resultado: [18, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [18, 20]
DEBUG: visitBlock - Visiting stmt, result: [18, 20]
DEBUG: visitBlock - End with result: [18, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [18, 20]
DEBUG: visitFunctionCallExpr - Resultado: [18, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [18, 20]
DEBUG: visitGroupExpr - Result: [18, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [18, 20]
DEBUG: visitConsExpr - Lista evaluada: [18, 20]
DEBUG: visitConsExpr - Resultado: [16, 18, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [16, 18, 20]
DEBUG: visitCondExpr - Else resultado: [16, 18, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [16, 18, 20]
DEBUG: visitBlock - Visiting stmt, result: [16, 18, 20]
DEBUG: visitBlock - End with result: [16, 18, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [16, 18, 20]
DEBUG: visitFunctionCallExpr - Resultado: [16, 18, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [16, 18, 20]
DEBUG: visitGroupExpr - Result: [16, 18, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [16, 18, 20]
DEBUG: visitConsExpr - Lista evaluada: [16, 18, 20]
DEBUG: visitConsExpr - Resultado: [14, 16, 18, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [14, 16, 18, 20]
DEBUG: visitCondExpr - Else resultado: [14, 16, 18, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [14, 16, 18, 20]
DEBUG: visitBlock - Visiting stmt, result: [14, 16, 18, 20]
DEBUG: visitBlock - End with result: [14, 16, 18, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Resultado: [14, 16, 18, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [14, 16, 18, 20]
DEBUG: visitGroupExpr - Result: [14, 16, 18, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [14, 16, 18, 20]
DEBUG: visitConsExpr - Lista evaluada: [14, 16, 18, 20]
DEBUG: visitConsExpr - Resultado: [12, 14, 16, 18, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [12, 14, 16, 18, 20]
DEBUG: visitCondExpr - Else resultado: [12, 14, 16, 18, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [12, 14, 16, 18, 20]
DEBUG: visitBlock - Visiting stmt, result: [12, 14, 16, 18, 20]
DEBUG: visitBlock - End with result: [12, 14, 16, 18, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [12, 14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Resultado: [12, 14, 16, 18, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - Result: [12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Lista evaluada: [12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Resultado: [10, 12, 14, 16, 18, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [10, 12, 14, 16, 18, 20]
DEBUG: visitCondExpr - Else resultado: [10, 12, 14, 16, 18, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - Visiting stmt, result: [10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - End with result: [10, 12, 14, 16, 18, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [10, 12, 14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Resultado: [10, 12, 14, 16, 18, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - Result: [10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [10, 12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Lista evaluada: [10, 12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Resultado: [8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCondExpr - Else resultado: [8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - Visiting stmt, result: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - End with result: [8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Resultado: [8, 10, 12, 14, 16, 18, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - Result: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Lista evaluada: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCondExpr - Else resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - Visiting stmt, result: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - End with result: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Resultado: [6, 8, 10, 12, 14, 16, 18, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - Result: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Lista evaluada: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCondExpr - Else resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - Visiting stmt, result: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - End with result: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - Result: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Lista evaluada: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitConsExpr - Resultado: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo ConsExprContext evaluado con resultado: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCondExpr - Else resultado: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - Visiting stmt, result: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitBlock - End with result: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo BlockContext evaluado con resultado: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Resultado: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - Result: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-multiplo-de-3', [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitNullExpr - Lista evaluada: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCarExpr - Lista evaluada: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'x': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx3)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx3)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx3)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx3)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 3
DEBUG: visitNumberExpr - Number: 3
DEBUG: Nodo NumberExprContext evaluado con resultado: 3
DEBUG: visitArithmeticExpr - Operator: mod, Left: 2, Right: 3
DEBUG: visitArithmeticExpr - Result: 2
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 2, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-multiplo-de-3
DEBUG: Nodo VariableExprContext evaluado con resultado: es-multiplo-de-3
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCdrExpr - Lista evaluada: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCdrExpr - Resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo CdrExprContext evaluado con resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-multiplo-de-3', [4, 6, 8, 10, 12, 14, 16, 18, 20]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitNullExpr - Lista evaluada: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCarExpr - Lista evaluada: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [4]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'x': 4}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx3)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx3)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx3)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx3)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: NumberExprContext, texto: 3
DEBUG: visitNumberExpr - Number: 3
DEBUG: Nodo NumberExprContext evaluado con resultado: 3
DEBUG: visitArithmeticExpr - Operator: mod, Left: 4, Right: 3
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 1, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-multiplo-de-3
DEBUG: Nodo VariableExprContext evaluado con resultado: es-multiplo-de-3
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCdrExpr - Lista evaluada: [4, 6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCdrExpr - Resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo CdrExprContext evaluado con resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-multiplo-de-3', [6, 8, 10, 12, 14, 16, 18, 20]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitNullExpr - Lista evaluada: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCarExpr - Lista evaluada: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCarExpr - Resultado: 6
DEBUG: Nodo CarExprContext evaluado con resultado: 6
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [6]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'x': 6}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx3)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx3)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx3)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx3)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 6
DEBUG: Nodo VariableExprContext evaluado con resultado: 6
DEBUG: Visitando nodo: NumberExprContext, texto: 3
DEBUG: visitNumberExpr - Number: 3
DEBUG: Nodo NumberExprContext evaluado con resultado: 3
DEBUG: visitArithmeticExpr - Operator: mod, Left: 6, Right: 3
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 0, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCarExpr - Lista evaluada: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCarExpr - Resultado: 6
DEBUG: Nodo CarExprContext evaluado con resultado: 6
DEBUG: visitConsExpr - Elemento: 6
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-multiplo-de-3
DEBUG: Nodo VariableExprContext evaluado con resultado: es-multiplo-de-3
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCdrExpr - Lista evaluada: [6, 8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCdrExpr - Resultado: [8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo CdrExprContext evaluado con resultado: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-multiplo-de-3', [8, 10, 12, 14, 16, 18, 20]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitNullExpr - Lista evaluada: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCarExpr - Lista evaluada: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCarExpr - Resultado: 8
DEBUG: Nodo CarExprContext evaluado con resultado: 8
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [8]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'x': 8}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx3)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx3)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx3)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx3)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 8
DEBUG: Nodo VariableExprContext evaluado con resultado: 8
DEBUG: Visitando nodo: NumberExprContext, texto: 3
DEBUG: visitNumberExpr - Number: 3
DEBUG: Nodo NumberExprContext evaluado con resultado: 3
DEBUG: visitArithmeticExpr - Operator: mod, Left: 8, Right: 3
DEBUG: visitArithmeticExpr - Result: 2
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 2, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-multiplo-de-3
DEBUG: Nodo VariableExprContext evaluado con resultado: es-multiplo-de-3
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 10, 12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCdrExpr - Lista evaluada: [8, 10, 12, 14, 16, 18, 20]
DEBUG: visitCdrExpr - Resultado: [10, 12, 14, 16, 18, 20]
DEBUG: Nodo CdrExprContext evaluado con resultado: [10, 12, 14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-multiplo-de-3', [10, 12, 14, 16, 18, 20]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10, 12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10, 12, 14, 16, 18, 20]
DEBUG: visitNullExpr - Lista evaluada: [10, 12, 14, 16, 18, 20]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10, 12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10, 12, 14, 16, 18, 20]
DEBUG: visitCarExpr - Lista evaluada: [10, 12, 14, 16, 18, 20]
DEBUG: visitCarExpr - Resultado: 10
DEBUG: Nodo CarExprContext evaluado con resultado: 10
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [10]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'x': 10}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx3)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx3)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx3)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx3)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 10
DEBUG: Nodo VariableExprContext evaluado con resultado: 10
DEBUG: Visitando nodo: NumberExprContext, texto: 3
DEBUG: visitNumberExpr - Number: 3
DEBUG: Nodo NumberExprContext evaluado con resultado: 3
DEBUG: visitArithmeticExpr - Operator: mod, Left: 10, Right: 3
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 1, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-multiplo-de-3
DEBUG: Nodo VariableExprContext evaluado con resultado: es-multiplo-de-3
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10, 12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10, 12, 14, 16, 18, 20]
DEBUG: visitCdrExpr - Lista evaluada: [10, 12, 14, 16, 18, 20]
DEBUG: visitCdrExpr - Resultado: [12, 14, 16, 18, 20]
DEBUG: Nodo CdrExprContext evaluado con resultado: [12, 14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-multiplo-de-3', [12, 14, 16, 18, 20]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [12, 14, 16, 18, 20]
DEBUG: visitNullExpr - Lista evaluada: [12, 14, 16, 18, 20]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [12, 14, 16, 18, 20]
DEBUG: visitCarExpr - Lista evaluada: [12, 14, 16, 18, 20]
DEBUG: visitCarExpr - Resultado: 12
DEBUG: Nodo CarExprContext evaluado con resultado: 12
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [12]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}, {'x': 12}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx3)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx3)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx3)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx3)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 12
DEBUG: Nodo VariableExprContext evaluado con resultado: 12
DEBUG: Visitando nodo: NumberExprContext, texto: 3
DEBUG: visitNumberExpr - Number: 3
DEBUG: Nodo NumberExprContext evaluado con resultado: 3
DEBUG: visitArithmeticExpr - Operator: mod, Left: 12, Right: 3
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 0, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [12, 14, 16, 18, 20]
DEBUG: visitCarExpr - Lista evaluada: [12, 14, 16, 18, 20]
DEBUG: visitCarExpr - Resultado: 12
DEBUG: Nodo CarExprContext evaluado con resultado: 12
DEBUG: visitConsExpr - Elemento: 12
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-multiplo-de-3
DEBUG: Nodo VariableExprContext evaluado con resultado: es-multiplo-de-3
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [12, 14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [12, 14, 16, 18, 20]
DEBUG: visitCdrExpr - Lista evaluada: [12, 14, 16, 18, 20]
DEBUG: visitCdrExpr - Resultado: [14, 16, 18, 20]
DEBUG: Nodo CdrExprContext evaluado con resultado: [14, 16, 18, 20]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-multiplo-de-3', [14, 16, 18, 20]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [14, 16, 18, 20]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [14, 16, 18, 20]
DEBUG: visitNullExpr - Lista evaluada: [14, 16, 18, 20]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [14, 16, 18, 20]
DEBUG: visitCarExpr - Lista evaluada: [14, 16, 18, 20]
DEBUG: visitCarExpr - Resultado: 14
DEBUG: Nodo CarExprContext evaluado con resultado: 14
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [14]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [14, 16, 18, 20]}, {'x': 14}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx3)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx3)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx3)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx3)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 14
DEBUG: Nodo VariableExprContext evaluado con resultado: 14
DEBUG: Visitando nodo: NumberExprContext, texto: 3
DEBUG: visitNumberExpr - Number: 3
DEBUG: Nodo NumberExprContext evaluado con resultado: 3
DEBUG: visitArithmeticExpr - Operator: mod, Left: 14, Right: 3
DEBUG: visitArithmeticExpr - Result: 2
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 2, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [14, 16, 18, 20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-multiplo-de-3
DEBUG: Nodo VariableExprContext evaluado con resultado: es-multiplo-de-3
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [14, 16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [14, 16, 18, 20]
DEBUG: visitCdrExpr - Lista evaluada: [14, 16, 18, 20]
DEBUG: visitCdrExpr - Resultado: [16, 18, 20]
DEBUG: Nodo CdrExprContext evaluado con resultado: [16, 18, 20]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-multiplo-de-3', [16, 18, 20]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [16, 18, 20]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [16, 18, 20]
DEBUG: visitNullExpr - Lista evaluada: [16, 18, 20]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [16, 18, 20]
DEBUG: visitCarExpr - Lista evaluada: [16, 18, 20]
DEBUG: visitCarExpr - Resultado: 16
DEBUG: Nodo CarExprContext evaluado con resultado: 16
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [16]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [16, 18, 20]}, {'x': 16}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx3)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx3)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx3)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx3)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 16
DEBUG: Nodo VariableExprContext evaluado con resultado: 16
DEBUG: Visitando nodo: NumberExprContext, texto: 3
DEBUG: visitNumberExpr - Number: 3
DEBUG: Nodo NumberExprContext evaluado con resultado: 3
DEBUG: visitArithmeticExpr - Operator: mod, Left: 16, Right: 3
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 1, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [16, 18, 20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-multiplo-de-3
DEBUG: Nodo VariableExprContext evaluado con resultado: es-multiplo-de-3
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [16, 18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [16, 18, 20]
DEBUG: visitCdrExpr - Lista evaluada: [16, 18, 20]
DEBUG: visitCdrExpr - Resultado: [18, 20]
DEBUG: Nodo CdrExprContext evaluado con resultado: [18, 20]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-multiplo-de-3', [18, 20]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [18, 20]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [18, 20]
DEBUG: visitNullExpr - Lista evaluada: [18, 20]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [18, 20]
DEBUG: visitCarExpr - Lista evaluada: [18, 20]
DEBUG: visitCarExpr - Resultado: 18
DEBUG: Nodo CarExprContext evaluado con resultado: 18
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [18]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [18, 20]}, {'x': 18}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx3)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx3)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx3)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx3)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 18
DEBUG: Nodo VariableExprContext evaluado con resultado: 18
DEBUG: Visitando nodo: NumberExprContext, texto: 3
DEBUG: visitNumberExpr - Number: 3
DEBUG: Nodo NumberExprContext evaluado con resultado: 3
DEBUG: visitArithmeticExpr - Operator: mod, Left: 18, Right: 3
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 0, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [18, 20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [18, 20]
DEBUG: visitCarExpr - Lista evaluada: [18, 20]
DEBUG: visitCarExpr - Resultado: 18
DEBUG: Nodo CarExprContext evaluado con resultado: 18
DEBUG: visitConsExpr - Elemento: 18
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-multiplo-de-3
DEBUG: Nodo VariableExprContext evaluado con resultado: es-multiplo-de-3
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [18, 20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [18, 20]
DEBUG: visitCdrExpr - Lista evaluada: [18, 20]
DEBUG: visitCdrExpr - Resultado: [20]
DEBUG: Nodo CdrExprContext evaluado con resultado: [20]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-multiplo-de-3', [20]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [20]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [20]
DEBUG: visitNullExpr - Lista evaluada: [20]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [20]
DEBUG: visitCarExpr - Lista evaluada: [20]
DEBUG: visitCarExpr - Resultado: 20
DEBUG: Nodo CarExprContext evaluado con resultado: 20
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [20]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [20]}, {'x': 20}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx3)0)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx3)0)
DEBUG: visitComparisonExpr - Start, texto: (=(modx3)0)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx3)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 20
DEBUG: Nodo VariableExprContext evaluado con resultado: 20
DEBUG: Visitando nodo: NumberExprContext, texto: 3
DEBUG: visitNumberExpr - Number: 3
DEBUG: Nodo NumberExprContext evaluado con resultado: 3
DEBUG: visitArithmeticExpr - Operator: mod, Left: 20, Right: 3
DEBUG: visitArithmeticExpr - Result: 2
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 0
DEBUG: visitNumberExpr - Number: 0
DEBUG: Nodo NumberExprContext evaluado con resultado: 0
DEBUG: visitComparisonExpr - Left: 2, Right: 0, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = es-multiplo-de-3
DEBUG: Nodo VariableExprContext evaluado con resultado: es-multiplo-de-3
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [20]
DEBUG: Nodo VariableExprContext evaluado con resultado: [20]
DEBUG: visitCdrExpr - Lista evaluada: [20]
DEBUG: visitCdrExpr - Resultado: []
DEBUG: Nodo CdrExprContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['es-multiplo-de-3', []]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [20]}, {'predicat': 'es-multiplo-de-3', 'llista': []}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = []
DEBUG: Nodo VariableExprContext evaluado con resultado: []
DEBUG: visitNullExpr - Lista evaluada: []
DEBUG: visitNullExpr - Resultado: True
DEBUG: Nodo NullExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [18, 20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitConsExpr - Lista evaluada: []
DEBUG: visitConsExpr - Resultado: [18]
DEBUG: Nodo ConsExprContext evaluado con resultado: [18]
DEBUG: visitCondExpr - Resultado: [18]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [18]
DEBUG: visitBlock - Visiting stmt, result: [18]
DEBUG: visitBlock - End with result: [18]
DEBUG: Nodo BlockContext evaluado con resultado: [18]
DEBUG: visitFunctionCallExpr - Resultado: [18], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [16, 18, 20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [18]
DEBUG: visitGroupExpr - Result: [18]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [18]
DEBUG: visitCondExpr - Else resultado: [18]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [18]
DEBUG: visitBlock - Visiting stmt, result: [18]
DEBUG: visitBlock - End with result: [18]
DEBUG: Nodo BlockContext evaluado con resultado: [18]
DEBUG: visitFunctionCallExpr - Resultado: [18], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [14, 16, 18, 20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [18]
DEBUG: visitGroupExpr - Result: [18]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [18]
DEBUG: visitCondExpr - Else resultado: [18]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [18]
DEBUG: visitBlock - Visiting stmt, result: [18]
DEBUG: visitBlock - End with result: [18]
DEBUG: Nodo BlockContext evaluado con resultado: [18]
DEBUG: visitFunctionCallExpr - Resultado: [18], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [12, 14, 16, 18, 20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [18]
DEBUG: visitGroupExpr - Result: [18]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [18]
DEBUG: visitConsExpr - Lista evaluada: [18]
DEBUG: visitConsExpr - Resultado: [12, 18]
DEBUG: Nodo ConsExprContext evaluado con resultado: [12, 18]
DEBUG: visitCondExpr - Resultado: [12, 18]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [12, 18]
DEBUG: visitBlock - Visiting stmt, result: [12, 18]
DEBUG: visitBlock - End with result: [12, 18]
DEBUG: Nodo BlockContext evaluado con resultado: [12, 18]
DEBUG: visitFunctionCallExpr - Resultado: [12, 18], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [10, 12, 14, 16, 18, 20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [12, 18]
DEBUG: visitGroupExpr - Result: [12, 18]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [12, 18]
DEBUG: visitCondExpr - Else resultado: [12, 18]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [12, 18]
DEBUG: visitBlock - Visiting stmt, result: [12, 18]
DEBUG: visitBlock - End with result: [12, 18]
DEBUG: Nodo BlockContext evaluado con resultado: [12, 18]
DEBUG: visitFunctionCallExpr - Resultado: [12, 18], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [8, 10, 12, 14, 16, 18, 20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [12, 18]
DEBUG: visitGroupExpr - Result: [12, 18]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [12, 18]
DEBUG: visitCondExpr - Else resultado: [12, 18]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [12, 18]
DEBUG: visitBlock - Visiting stmt, result: [12, 18]
DEBUG: visitBlock - End with result: [12, 18]
DEBUG: Nodo BlockContext evaluado con resultado: [12, 18]
DEBUG: visitFunctionCallExpr - Resultado: [12, 18], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [6, 8, 10, 12, 14, 16, 18, 20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [12, 18]
DEBUG: visitGroupExpr - Result: [12, 18]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [12, 18]
DEBUG: visitConsExpr - Lista evaluada: [12, 18]
DEBUG: visitConsExpr - Resultado: [6, 12, 18]
DEBUG: Nodo ConsExprContext evaluado con resultado: [6, 12, 18]
DEBUG: visitCondExpr - Resultado: [6, 12, 18]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [6, 12, 18]
DEBUG: visitBlock - Visiting stmt, result: [6, 12, 18]
DEBUG: visitBlock - End with result: [6, 12, 18]
DEBUG: Nodo BlockContext evaluado con resultado: [6, 12, 18]
DEBUG: visitFunctionCallExpr - Resultado: [6, 12, 18], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}, {'predicat': 'es-multiplo-de-3', 'llista': [4, 6, 8, 10, 12, 14, 16, 18, 20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [6, 12, 18]
DEBUG: visitGroupExpr - Result: [6, 12, 18]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [6, 12, 18]
DEBUG: visitCondExpr - Else resultado: [6, 12, 18]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [6, 12, 18]
DEBUG: visitBlock - Visiting stmt, result: [6, 12, 18]
DEBUG: visitBlock - End with result: [6, 12, 18]
DEBUG: Nodo BlockContext evaluado con resultado: [6, 12, 18]
DEBUG: visitFunctionCallExpr - Resultado: [6, 12, 18], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'es-multiplo-de-3', 'llista': [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [6, 12, 18]
DEBUG: visitGroupExpr - Result: [6, 12, 18]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [6, 12, 18]
DEBUG: visitCondExpr - Else resultado: [6, 12, 18]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [6, 12, 18]
DEBUG: visitBlock - Visiting stmt, result: [6, 12, 18]
DEBUG: visitBlock - End with result: [6, 12, 18]
DEBUG: Nodo BlockContext evaluado con resultado: [6, 12, 18]
DEBUG: visitFunctionCallExpr - Resultado: [6, 12, 18], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [6, 12, 18]
DEBUG: visitGroupExpr - Result: [6, 12, 18]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [6, 12, 18]
DEBUG: visitDisplayExpr - Valor evaluado: (6 12 18)
(6 12 18)DEBUG: visitDisplayExpr - End
DEBUG: Nodo DisplayExprContext evaluado con resultado: (6 12 18)
DEBUG: visitRoot - Visiting child: (newline)
DEBUG: Visitando nodo: NewlineExprContext, texto: (newline)
DEBUG: visitNewlineExpr - Printing newline

DEBUG: Nodo NewlineExprContext evaluado con resultado: None
DEBUG: visitRoot - Visiting child: (display(mapduplicar'()))
DEBUG: Visitando nodo: DisplayExprContext, texto: (display(mapduplicar'()))
DEBUG: visitDisplayExpr - Start, texto: (display(mapduplicar'()))
DEBUG: Visitando nodo: GroupExprContext, texto: (mapduplicar'())
DEBUG: visitGroupExpr - Start, texto: (mapduplicar'())
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapduplicar'()
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: duplicar
DEBUG: visitVariableExpr - Accediendo a variable: duplicar
DEBUG: visitVariableExpr - Encontrada en FunctionTable: duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', []]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': []}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = []
DEBUG: Nodo VariableExprContext evaluado con resultado: []
DEBUG: visitNullExpr - Lista evaluada: []
DEBUG: visitNullExpr - Resultado: True
DEBUG: Nodo NullExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitDisplayExpr - Valor evaluado: ()
()DEBUG: visitDisplayExpr - End
DEBUG: Nodo DisplayExprContext evaluado con resultado: ()
DEBUG: visitRoot - Visiting child: (newline)
DEBUG: Visitando nodo: NewlineExprContext, texto: (newline)
DEBUG: visitNewlineExpr - Printing newline

DEBUG: Nodo NewlineExprContext evaluado con resultado: None
DEBUG: visitRoot - Visiting child: (display(filtermayor-que-5'()))
DEBUG: Visitando nodo: DisplayExprContext, texto: (display(filtermayor-que-5'()))
DEBUG: visitDisplayExpr - Start, texto: (display(filtermayor-que-5'()))
DEBUG: Visitando nodo: GroupExprContext, texto: (filtermayor-que-5'())
DEBUG: visitGroupExpr - Start, texto: (filtermayor-que-5'())
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filtermayor-que-5'()
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: mayor-que-5
DEBUG: visitVariableExpr - Accediendo a variable: mayor-que-5
DEBUG: visitVariableExpr - Encontrada en FunctionTable: mayor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: mayor-que-5
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['mayor-que-5', []]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'mayor-que-5', 'llista': []}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = []
DEBUG: Nodo VariableExprContext evaluado con resultado: []
DEBUG: visitNullExpr - Lista evaluada: []
DEBUG: visitNullExpr - Resultado: True
DEBUG: Nodo NullExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitDisplayExpr - Valor evaluado: ()
()DEBUG: visitDisplayExpr - End
DEBUG: Nodo DisplayExprContext evaluado con resultado: ()
DEBUG: visitRoot - Visiting child: (newline)
DEBUG: Visitando nodo: NewlineExprContext, texto: (newline)
DEBUG: visitNewlineExpr - Printing newline

DEBUG: Nodo NewlineExprContext evaluado con resultado: None
DEBUG: visitRoot - Visiting child: (display(mapincrementar(filtermenor-que-5lista)))
DEBUG: Visitando nodo: DisplayExprContext, texto: (display(mapincrementar(filtermenor-que-5lista)))
DEBUG: visitDisplayExpr - Start, texto: (display(mapincrementar(filtermenor-que-5lista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (mapincrementar(filtermenor-que-5lista))
DEBUG: visitGroupExpr - Start, texto: (mapincrementar(filtermenor-que-5lista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapincrementar(filtermenor-que-5lista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: incrementar
DEBUG: visitVariableExpr - Accediendo a variable: incrementar
DEBUG: visitVariableExpr - Encontrada en FunctionTable: incrementar
DEBUG: Nodo VariableExprContext evaluado con resultado: incrementar
DEBUG: Visitando nodo: GroupExprContext, texto: (filtermenor-que-5lista)
DEBUG: visitGroupExpr - Start, texto: (filtermenor-que-5lista)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filtermenor-que-5lista
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: menor-que-5
DEBUG: visitVariableExpr - Accediendo a variable: menor-que-5
DEBUG: visitVariableExpr - Encontrada en FunctionTable: menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: VariableExprContext, texto: lista
DEBUG: visitVariableExpr - Accediendo a variable: lista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [1]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 1}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 1
DEBUG: Nodo VariableExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 1, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitConsExpr - Elemento: 1
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 2, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitConsExpr - Elemento: 2
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [3]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 3}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 3, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitConsExpr - Elemento: 3
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [4]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'x': 4}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 4, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitConsExpr - Elemento: 4
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 5
DEBUG: Nodo CarExprContext evaluado con resultado: 5
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [5]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'x': 5}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 5
DEBUG: Nodo VariableExprContext evaluado con resultado: 5
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 5, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 6
DEBUG: Nodo CarExprContext evaluado con resultado: 6
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [6]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'x': 6}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 6
DEBUG: Nodo VariableExprContext evaluado con resultado: 6
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 6, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 7
DEBUG: Nodo CarExprContext evaluado con resultado: 7
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [7]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'x': 7}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 7
DEBUG: Nodo VariableExprContext evaluado con resultado: 7
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 7, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCarExpr - Resultado: 8
DEBUG: Nodo CarExprContext evaluado con resultado: 8
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [8]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'x': 8}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 8
DEBUG: Nodo VariableExprContext evaluado con resultado: 8
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 8, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitNullExpr - Lista evaluada: [9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCarExpr - Lista evaluada: [9, 10]
DEBUG: visitCarExpr - Resultado: 9
DEBUG: Nodo CarExprContext evaluado con resultado: 9
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [9]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}, {'x': 9}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 9
DEBUG: Nodo VariableExprContext evaluado con resultado: 9
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 9, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [9, 10]
DEBUG: visitCdrExpr - Resultado: [10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', [10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}, {'predicat': 'menor-que-5', 'llista': [10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitNullExpr - Lista evaluada: [10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCarExpr - Lista evaluada: [10]
DEBUG: visitCarExpr - Resultado: 10
DEBUG: Nodo CarExprContext evaluado con resultado: 10
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [10]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}, {'predicat': 'menor-que-5', 'llista': [10]}, {'x': 10}]
DEBUG: Visitando nodo: BlockContext, texto: (<x5)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (<x5)
DEBUG: visitComparisonExpr - Start, texto: (<x5)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 10
DEBUG: Nodo VariableExprContext evaluado con resultado: 10
DEBUG: Visitando nodo: NumberExprContext, texto: 5
DEBUG: visitNumberExpr - Number: 5
DEBUG: Nodo NumberExprContext evaluado con resultado: 5
DEBUG: visitComparisonExpr - Left: 10, Right: 5, Operator: <
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}, {'predicat': 'menor-que-5', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = menor-que-5
DEBUG: Nodo VariableExprContext evaluado con resultado: menor-que-5
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCdrExpr - Lista evaluada: [10]
DEBUG: visitCdrExpr - Resultado: []
DEBUG: Nodo CdrExprContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['menor-que-5', []]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}, {'predicat': 'menor-que-5', 'llista': [10]}, {'predicat': 'menor-que-5', 'llista': []}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = []
DEBUG: Nodo VariableExprContext evaluado con resultado: []
DEBUG: visitNullExpr - Lista evaluada: []
DEBUG: visitNullExpr - Resultado: True
DEBUG: Nodo NullExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}, {'predicat': 'menor-que-5', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitConsExpr - Lista evaluada: []
DEBUG: visitConsExpr - Resultado: [4]
DEBUG: Nodo ConsExprContext evaluado con resultado: [4]
DEBUG: visitCondExpr - Resultado: [4]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [4]
DEBUG: visitBlock - Visiting stmt, result: [4]
DEBUG: visitBlock - End with result: [4]
DEBUG: Nodo BlockContext evaluado con resultado: [4]
DEBUG: visitFunctionCallExpr - Resultado: [4], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [4]
DEBUG: visitGroupExpr - Result: [4]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [4]
DEBUG: visitConsExpr - Lista evaluada: [4]
DEBUG: visitConsExpr - Resultado: [3, 4]
DEBUG: Nodo ConsExprContext evaluado con resultado: [3, 4]
DEBUG: visitCondExpr - Resultado: [3, 4]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [3, 4]
DEBUG: visitBlock - Visiting stmt, result: [3, 4]
DEBUG: visitBlock - End with result: [3, 4]
DEBUG: Nodo BlockContext evaluado con resultado: [3, 4]
DEBUG: visitFunctionCallExpr - Resultado: [3, 4], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [3, 4]
DEBUG: visitGroupExpr - Result: [3, 4]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [3, 4]
DEBUG: visitConsExpr - Lista evaluada: [3, 4]
DEBUG: visitConsExpr - Resultado: [2, 3, 4]
DEBUG: Nodo ConsExprContext evaluado con resultado: [2, 3, 4]
DEBUG: visitCondExpr - Resultado: [2, 3, 4]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [2, 3, 4]
DEBUG: visitBlock - Visiting stmt, result: [2, 3, 4]
DEBUG: visitBlock - End with result: [2, 3, 4]
DEBUG: Nodo BlockContext evaluado con resultado: [2, 3, 4]
DEBUG: visitFunctionCallExpr - Resultado: [2, 3, 4], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'menor-que-5', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [2, 3, 4]
DEBUG: visitGroupExpr - Result: [2, 3, 4]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [2, 3, 4]
DEBUG: visitConsExpr - Lista evaluada: [2, 3, 4]
DEBUG: visitConsExpr - Resultado: [1, 2, 3, 4]
DEBUG: Nodo ConsExprContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitCondExpr - Resultado: [1, 2, 3, 4]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitBlock - Visiting stmt, result: [1, 2, 3, 4]
DEBUG: visitBlock - End with result: [1, 2, 3, 4]
DEBUG: Nodo BlockContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitFunctionCallExpr - Resultado: [1, 2, 3, 4], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitGroupExpr - Result: [1, 2, 3, 4]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['incrementar', [1, 2, 3, 4]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitNullExpr - Lista evaluada: [1, 2, 3, 4]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitCarExpr - Lista evaluada: [1, 2, 3, 4]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [1]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4]}, {'x': 1}]
DEBUG: Visitando nodo: BlockContext, texto: (+x1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (+x1)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 1
DEBUG: Nodo VariableExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitArithmeticExpr - Operator: +, Left: 1, Right: 1
DEBUG: visitArithmeticExpr - Result: 2
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 2
DEBUG: visitBlock - Visiting stmt, result: 2
DEBUG: visitBlock - End with result: 2
DEBUG: Nodo BlockContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Resultado: 2, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 2
DEBUG: visitGroupExpr - Result: 2
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 2
DEBUG: visitConsExpr - Elemento: 2
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = incrementar
DEBUG: Nodo VariableExprContext evaluado con resultado: incrementar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4]
DEBUG: visitCdrExpr - Lista evaluada: [1, 2, 3, 4]
DEBUG: visitCdrExpr - Resultado: [2, 3, 4]
DEBUG: Nodo CdrExprContext evaluado con resultado: [2, 3, 4]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['incrementar', [2, 3, 4]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4]}, {'func': 'incrementar', 'llista': [2, 3, 4]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4]
DEBUG: visitNullExpr - Lista evaluada: [2, 3, 4]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4]
DEBUG: visitCarExpr - Lista evaluada: [2, 3, 4]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4]}, {'func': 'incrementar', 'llista': [2, 3, 4]}, {'x': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (+x1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (+x1)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitArithmeticExpr - Operator: +, Left: 2, Right: 1
DEBUG: visitArithmeticExpr - Result: 3
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 3
DEBUG: visitBlock - Visiting stmt, result: 3
DEBUG: visitBlock - End with result: 3
DEBUG: Nodo BlockContext evaluado con resultado: 3
DEBUG: visitFunctionCallExpr - Resultado: 3, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4]}, {'func': 'incrementar', 'llista': [2, 3, 4]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 3
DEBUG: visitGroupExpr - Result: 3
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 3
DEBUG: visitConsExpr - Elemento: 3
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = incrementar
DEBUG: Nodo VariableExprContext evaluado con resultado: incrementar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4]
DEBUG: visitCdrExpr - Lista evaluada: [2, 3, 4]
DEBUG: visitCdrExpr - Resultado: [3, 4]
DEBUG: Nodo CdrExprContext evaluado con resultado: [3, 4]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['incrementar', [3, 4]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4]}, {'func': 'incrementar', 'llista': [2, 3, 4]}, {'func': 'incrementar', 'llista': [3, 4]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4]
DEBUG: visitNullExpr - Lista evaluada: [3, 4]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4]
DEBUG: visitCarExpr - Lista evaluada: [3, 4]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [3]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4]}, {'func': 'incrementar', 'llista': [2, 3, 4]}, {'func': 'incrementar', 'llista': [3, 4]}, {'x': 3}]
DEBUG: Visitando nodo: BlockContext, texto: (+x1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (+x1)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitArithmeticExpr - Operator: +, Left: 3, Right: 1
DEBUG: visitArithmeticExpr - Result: 4
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 4
DEBUG: visitBlock - Visiting stmt, result: 4
DEBUG: visitBlock - End with result: 4
DEBUG: Nodo BlockContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Resultado: 4, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4]}, {'func': 'incrementar', 'llista': [2, 3, 4]}, {'func': 'incrementar', 'llista': [3, 4]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 4
DEBUG: visitGroupExpr - Result: 4
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 4
DEBUG: visitConsExpr - Elemento: 4
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = incrementar
DEBUG: Nodo VariableExprContext evaluado con resultado: incrementar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4]
DEBUG: visitCdrExpr - Lista evaluada: [3, 4]
DEBUG: visitCdrExpr - Resultado: [4]
DEBUG: Nodo CdrExprContext evaluado con resultado: [4]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['incrementar', [4]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4]}, {'func': 'incrementar', 'llista': [2, 3, 4]}, {'func': 'incrementar', 'llista': [3, 4]}, {'func': 'incrementar', 'llista': [4]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4]
DEBUG: visitNullExpr - Lista evaluada: [4]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4]
DEBUG: visitCarExpr - Lista evaluada: [4]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [4]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4]}, {'func': 'incrementar', 'llista': [2, 3, 4]}, {'func': 'incrementar', 'llista': [3, 4]}, {'func': 'incrementar', 'llista': [4]}, {'x': 4}]
DEBUG: Visitando nodo: BlockContext, texto: (+x1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (+x1)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitArithmeticExpr - Operator: +, Left: 4, Right: 1
DEBUG: visitArithmeticExpr - Result: 5
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 5
DEBUG: visitBlock - Visiting stmt, result: 5
DEBUG: visitBlock - End with result: 5
DEBUG: Nodo BlockContext evaluado con resultado: 5
DEBUG: visitFunctionCallExpr - Resultado: 5, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4]}, {'func': 'incrementar', 'llista': [2, 3, 4]}, {'func': 'incrementar', 'llista': [3, 4]}, {'func': 'incrementar', 'llista': [4]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 5
DEBUG: visitGroupExpr - Result: 5
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 5
DEBUG: visitConsExpr - Elemento: 5
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = incrementar
DEBUG: Nodo VariableExprContext evaluado con resultado: incrementar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4]
DEBUG: visitCdrExpr - Lista evaluada: [4]
DEBUG: visitCdrExpr - Resultado: []
DEBUG: Nodo CdrExprContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['incrementar', []]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4]}, {'func': 'incrementar', 'llista': [2, 3, 4]}, {'func': 'incrementar', 'llista': [3, 4]}, {'func': 'incrementar', 'llista': [4]}, {'func': 'incrementar', 'llista': []}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = []
DEBUG: Nodo VariableExprContext evaluado con resultado: []
DEBUG: visitNullExpr - Lista evaluada: []
DEBUG: visitNullExpr - Resultado: True
DEBUG: Nodo NullExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4]}, {'func': 'incrementar', 'llista': [2, 3, 4]}, {'func': 'incrementar', 'llista': [3, 4]}, {'func': 'incrementar', 'llista': [4]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitConsExpr - Lista evaluada: []
DEBUG: visitConsExpr - Resultado: [5]
DEBUG: Nodo ConsExprContext evaluado con resultado: [5]
DEBUG: visitCondExpr - Else resultado: [5]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [5]
DEBUG: visitBlock - Visiting stmt, result: [5]
DEBUG: visitBlock - End with result: [5]
DEBUG: Nodo BlockContext evaluado con resultado: [5]
DEBUG: visitFunctionCallExpr - Resultado: [5], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4]}, {'func': 'incrementar', 'llista': [2, 3, 4]}, {'func': 'incrementar', 'llista': [3, 4]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [5]
DEBUG: visitGroupExpr - Result: [5]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [5]
DEBUG: visitConsExpr - Lista evaluada: [5]
DEBUG: visitConsExpr - Resultado: [4, 5]
DEBUG: Nodo ConsExprContext evaluado con resultado: [4, 5]
DEBUG: visitCondExpr - Else resultado: [4, 5]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [4, 5]
DEBUG: visitBlock - Visiting stmt, result: [4, 5]
DEBUG: visitBlock - End with result: [4, 5]
DEBUG: Nodo BlockContext evaluado con resultado: [4, 5]
DEBUG: visitFunctionCallExpr - Resultado: [4, 5], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4]}, {'func': 'incrementar', 'llista': [2, 3, 4]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [4, 5]
DEBUG: visitGroupExpr - Result: [4, 5]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [4, 5]
DEBUG: visitConsExpr - Lista evaluada: [4, 5]
DEBUG: visitConsExpr - Resultado: [3, 4, 5]
DEBUG: Nodo ConsExprContext evaluado con resultado: [3, 4, 5]
DEBUG: visitCondExpr - Else resultado: [3, 4, 5]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [3, 4, 5]
DEBUG: visitBlock - Visiting stmt, result: [3, 4, 5]
DEBUG: visitBlock - End with result: [3, 4, 5]
DEBUG: Nodo BlockContext evaluado con resultado: [3, 4, 5]
DEBUG: visitFunctionCallExpr - Resultado: [3, 4, 5], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'incrementar', 'llista': [1, 2, 3, 4]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [3, 4, 5]
DEBUG: visitGroupExpr - Result: [3, 4, 5]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [3, 4, 5]
DEBUG: visitConsExpr - Lista evaluada: [3, 4, 5]
DEBUG: visitConsExpr - Resultado: [2, 3, 4, 5]
DEBUG: Nodo ConsExprContext evaluado con resultado: [2, 3, 4, 5]
DEBUG: visitCondExpr - Else resultado: [2, 3, 4, 5]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [2, 3, 4, 5]
DEBUG: visitBlock - Visiting stmt, result: [2, 3, 4, 5]
DEBUG: visitBlock - End with result: [2, 3, 4, 5]
DEBUG: Nodo BlockContext evaluado con resultado: [2, 3, 4, 5]
DEBUG: visitFunctionCallExpr - Resultado: [2, 3, 4, 5], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [2, 3, 4, 5]
DEBUG: visitGroupExpr - Result: [2, 3, 4, 5]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [2, 3, 4, 5]
DEBUG: visitDisplayExpr - Valor evaluado: (2 3 4 5)
(2 3 4 5)DEBUG: visitDisplayExpr - End
DEBUG: Nodo DisplayExprContext evaluado con resultado: (2 3 4 5)
DEBUG: visitRoot - Visiting child: (newline)
DEBUG: Visitando nodo: NewlineExprContext, texto: (newline)
DEBUG: visitNewlineExpr - Printing newline

DEBUG: Nodo NewlineExprContext evaluado con resultado: None
DEBUG: visitRoot - Visiting child: (display(filterimparlista))
DEBUG: Visitando nodo: DisplayExprContext, texto: (display(filterimparlista))
DEBUG: visitDisplayExpr - Start, texto: (display(filterimparlista))
DEBUG: Visitando nodo: GroupExprContext, texto: (filterimparlista)
DEBUG: visitGroupExpr - Start, texto: (filterimparlista)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterimparlista
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: impar
DEBUG: visitVariableExpr - Accediendo a variable: impar
DEBUG: visitVariableExpr - Encontrada en FunctionTable: impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: VariableExprContext, texto: lista
DEBUG: visitVariableExpr - Accediendo a variable: lista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [1]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 1}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 1
DEBUG: Nodo VariableExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 1, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 1, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitConsExpr - Elemento: 1
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 2, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 0, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [3]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 3}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 3, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 1, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitConsExpr - Elemento: 3
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [4]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'x': 4}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 4, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 0, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 5
DEBUG: Nodo CarExprContext evaluado con resultado: 5
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [5]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'x': 5}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 5
DEBUG: Nodo VariableExprContext evaluado con resultado: 5
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 5, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 1, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 5
DEBUG: Nodo CarExprContext evaluado con resultado: 5
DEBUG: visitConsExpr - Elemento: 5
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 6
DEBUG: Nodo CarExprContext evaluado con resultado: 6
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [6]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'x': 6}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 6
DEBUG: Nodo VariableExprContext evaluado con resultado: 6
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 6, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 0, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 7
DEBUG: Nodo CarExprContext evaluado con resultado: 7
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [7]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'x': 7}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 7
DEBUG: Nodo VariableExprContext evaluado con resultado: 7
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 7, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 1, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 7
DEBUG: Nodo CarExprContext evaluado con resultado: 7
DEBUG: visitConsExpr - Elemento: 7
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCarExpr - Resultado: 8
DEBUG: Nodo CarExprContext evaluado con resultado: 8
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [8]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'x': 8}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 8
DEBUG: Nodo VariableExprContext evaluado con resultado: 8
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 8, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 0, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'predicat': 'impar', 'llista': [9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitNullExpr - Lista evaluada: [9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCarExpr - Lista evaluada: [9, 10]
DEBUG: visitCarExpr - Resultado: 9
DEBUG: Nodo CarExprContext evaluado con resultado: 9
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [9]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'predicat': 'impar', 'llista': [9, 10]}, {'x': 9}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 9
DEBUG: Nodo VariableExprContext evaluado con resultado: 9
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 9, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 1, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'predicat': 'impar', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCarExpr - Lista evaluada: [9, 10]
DEBUG: visitCarExpr - Resultado: 9
DEBUG: Nodo CarExprContext evaluado con resultado: 9
DEBUG: visitConsExpr - Elemento: 9
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [9, 10]
DEBUG: visitCdrExpr - Resultado: [10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'predicat': 'impar', 'llista': [9, 10]}, {'predicat': 'impar', 'llista': [10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitNullExpr - Lista evaluada: [10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCarExpr - Lista evaluada: [10]
DEBUG: visitCarExpr - Resultado: 10
DEBUG: Nodo CarExprContext evaluado con resultado: 10
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [10]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'predicat': 'impar', 'llista': [9, 10]}, {'predicat': 'impar', 'llista': [10]}, {'x': 10}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 10
DEBUG: Nodo VariableExprContext evaluado con resultado: 10
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 10, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 0, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'predicat': 'impar', 'llista': [9, 10]}, {'predicat': 'impar', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCdrExpr - Lista evaluada: [10]
DEBUG: visitCdrExpr - Resultado: []
DEBUG: Nodo CdrExprContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', []]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'predicat': 'impar', 'llista': [9, 10]}, {'predicat': 'impar', 'llista': [10]}, {'predicat': 'impar', 'llista': []}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = []
DEBUG: Nodo VariableExprContext evaluado con resultado: []
DEBUG: visitNullExpr - Lista evaluada: []
DEBUG: visitNullExpr - Resultado: True
DEBUG: Nodo NullExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'predicat': 'impar', 'llista': [9, 10]}, {'predicat': 'impar', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'predicat': 'impar', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitConsExpr - Lista evaluada: []
DEBUG: visitConsExpr - Resultado: [9]
DEBUG: Nodo ConsExprContext evaluado con resultado: [9]
DEBUG: visitCondExpr - Resultado: [9]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [9]
DEBUG: visitBlock - Visiting stmt, result: [9]
DEBUG: visitBlock - End with result: [9]
DEBUG: Nodo BlockContext evaluado con resultado: [9]
DEBUG: visitFunctionCallExpr - Resultado: [9], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [9]
DEBUG: visitGroupExpr - Result: [9]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [9]
DEBUG: visitCondExpr - Else resultado: [9]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [9]
DEBUG: visitBlock - Visiting stmt, result: [9]
DEBUG: visitBlock - End with result: [9]
DEBUG: Nodo BlockContext evaluado con resultado: [9]
DEBUG: visitFunctionCallExpr - Resultado: [9], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [9]
DEBUG: visitGroupExpr - Result: [9]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [9]
DEBUG: visitConsExpr - Lista evaluada: [9]
DEBUG: visitConsExpr - Resultado: [7, 9]
DEBUG: Nodo ConsExprContext evaluado con resultado: [7, 9]
DEBUG: visitCondExpr - Resultado: [7, 9]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [7, 9]
DEBUG: visitBlock - Visiting stmt, result: [7, 9]
DEBUG: visitBlock - End with result: [7, 9]
DEBUG: Nodo BlockContext evaluado con resultado: [7, 9]
DEBUG: visitFunctionCallExpr - Resultado: [7, 9], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [7, 9]
DEBUG: visitGroupExpr - Result: [7, 9]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [7, 9]
DEBUG: visitCondExpr - Else resultado: [7, 9]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [7, 9]
DEBUG: visitBlock - Visiting stmt, result: [7, 9]
DEBUG: visitBlock - End with result: [7, 9]
DEBUG: Nodo BlockContext evaluado con resultado: [7, 9]
DEBUG: visitFunctionCallExpr - Resultado: [7, 9], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [7, 9]
DEBUG: visitGroupExpr - Result: [7, 9]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [7, 9]
DEBUG: visitConsExpr - Lista evaluada: [7, 9]
DEBUG: visitConsExpr - Resultado: [5, 7, 9]
DEBUG: Nodo ConsExprContext evaluado con resultado: [5, 7, 9]
DEBUG: visitCondExpr - Resultado: [5, 7, 9]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [5, 7, 9]
DEBUG: visitBlock - Visiting stmt, result: [5, 7, 9]
DEBUG: visitBlock - End with result: [5, 7, 9]
DEBUG: Nodo BlockContext evaluado con resultado: [5, 7, 9]
DEBUG: visitFunctionCallExpr - Resultado: [5, 7, 9], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [5, 7, 9]
DEBUG: visitGroupExpr - Result: [5, 7, 9]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [5, 7, 9]
DEBUG: visitCondExpr - Else resultado: [5, 7, 9]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [5, 7, 9]
DEBUG: visitBlock - Visiting stmt, result: [5, 7, 9]
DEBUG: visitBlock - End with result: [5, 7, 9]
DEBUG: Nodo BlockContext evaluado con resultado: [5, 7, 9]
DEBUG: visitFunctionCallExpr - Resultado: [5, 7, 9], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [5, 7, 9]
DEBUG: visitGroupExpr - Result: [5, 7, 9]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [5, 7, 9]
DEBUG: visitConsExpr - Lista evaluada: [5, 7, 9]
DEBUG: visitConsExpr - Resultado: [3, 5, 7, 9]
DEBUG: Nodo ConsExprContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitCondExpr - Resultado: [3, 5, 7, 9]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitBlock - Visiting stmt, result: [3, 5, 7, 9]
DEBUG: visitBlock - End with result: [3, 5, 7, 9]
DEBUG: Nodo BlockContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitFunctionCallExpr - Resultado: [3, 5, 7, 9], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitGroupExpr - Result: [3, 5, 7, 9]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitCondExpr - Else resultado: [3, 5, 7, 9]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitBlock - Visiting stmt, result: [3, 5, 7, 9]
DEBUG: visitBlock - End with result: [3, 5, 7, 9]
DEBUG: Nodo BlockContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitFunctionCallExpr - Resultado: [3, 5, 7, 9], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitGroupExpr - Result: [3, 5, 7, 9]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitConsExpr - Lista evaluada: [3, 5, 7, 9]
DEBUG: visitConsExpr - Resultado: [1, 3, 5, 7, 9]
DEBUG: Nodo ConsExprContext evaluado con resultado: [1, 3, 5, 7, 9]
DEBUG: visitCondExpr - Resultado: [1, 3, 5, 7, 9]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [1, 3, 5, 7, 9]
DEBUG: visitBlock - Visiting stmt, result: [1, 3, 5, 7, 9]
DEBUG: visitBlock - End with result: [1, 3, 5, 7, 9]
DEBUG: Nodo BlockContext evaluado con resultado: [1, 3, 5, 7, 9]
DEBUG: visitFunctionCallExpr - Resultado: [1, 3, 5, 7, 9], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [1, 3, 5, 7, 9]
DEBUG: visitGroupExpr - Result: [1, 3, 5, 7, 9]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [1, 3, 5, 7, 9]
DEBUG: visitDisplayExpr - Valor evaluado: (1 3 5 7 9)
(1 3 5 7 9)DEBUG: visitDisplayExpr - End
DEBUG: Nodo DisplayExprContext evaluado con resultado: (1 3 5 7 9)
DEBUG: visitRoot - Visiting child: (newline)
DEBUG: Visitando nodo: NewlineExprContext, texto: (newline)
DEBUG: visitNewlineExpr - Printing newline

DEBUG: Nodo NewlineExprContext evaluado con resultado: None
DEBUG: visitRoot - Visiting child: (display(mapduplicar(filterimparlista)))
DEBUG: Visitando nodo: DisplayExprContext, texto: (display(mapduplicar(filterimparlista)))
DEBUG: visitDisplayExpr - Start, texto: (display(mapduplicar(filterimparlista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (mapduplicar(filterimparlista))
DEBUG: visitGroupExpr - Start, texto: (mapduplicar(filterimparlista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapduplicar(filterimparlista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: duplicar
DEBUG: visitVariableExpr - Accediendo a variable: duplicar
DEBUG: visitVariableExpr - Encontrada en FunctionTable: duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: GroupExprContext, texto: (filterimparlista)
DEBUG: visitGroupExpr - Start, texto: (filterimparlista)
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterimparlista
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: impar
DEBUG: visitVariableExpr - Accediendo a variable: impar
DEBUG: visitVariableExpr - Encontrada en FunctionTable: impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: VariableExprContext, texto: lista
DEBUG: visitVariableExpr - Accediendo a variable: lista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [1]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 1}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 1
DEBUG: Nodo VariableExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 1, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 1, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitConsExpr - Elemento: 1
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [2, 3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 2
DEBUG: Nodo CarExprContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [2]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 2}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 2
DEBUG: Nodo VariableExprContext evaluado con resultado: 2
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 2, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 0, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [2, 3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [3, 4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [3]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'x': 3}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 3, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 1, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitConsExpr - Elemento: 3
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [3, 4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [4, 5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 4
DEBUG: Nodo CarExprContext evaluado con resultado: 4
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [4]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'x': 4}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 4
DEBUG: Nodo VariableExprContext evaluado con resultado: 4
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 4, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 0, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [4, 5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [4, 5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [5, 6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [5, 6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 5
DEBUG: Nodo CarExprContext evaluado con resultado: 5
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [5]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'x': 5}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 5
DEBUG: Nodo VariableExprContext evaluado con resultado: 5
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 5, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 1, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 5
DEBUG: Nodo CarExprContext evaluado con resultado: 5
DEBUG: visitConsExpr - Elemento: 5
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [5, 6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [6, 7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [6, 7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 6
DEBUG: Nodo CarExprContext evaluado con resultado: 6
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [6]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'x': 6}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 6
DEBUG: Nodo VariableExprContext evaluado con resultado: 6
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 6, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 0, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [6, 7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [6, 7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [7, 8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [7, 8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 7
DEBUG: Nodo CarExprContext evaluado con resultado: 7
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [7]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'x': 7}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 7
DEBUG: Nodo VariableExprContext evaluado con resultado: 7
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 7, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 1, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCarExpr - Resultado: 7
DEBUG: Nodo CarExprContext evaluado con resultado: 7
DEBUG: visitConsExpr - Elemento: 7
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [7, 8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [8, 9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [8, 9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitNullExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCarExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCarExpr - Resultado: 8
DEBUG: Nodo CarExprContext evaluado con resultado: 8
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [8]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'x': 8}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 8
DEBUG: Nodo VariableExprContext evaluado con resultado: 8
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 8, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 0, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [8, 9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [8, 9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [8, 9, 10]
DEBUG: visitCdrExpr - Resultado: [9, 10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [9, 10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [9, 10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'predicat': 'impar', 'llista': [9, 10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitNullExpr - Lista evaluada: [9, 10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCarExpr - Lista evaluada: [9, 10]
DEBUG: visitCarExpr - Resultado: 9
DEBUG: Nodo CarExprContext evaluado con resultado: 9
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [9]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'predicat': 'impar', 'llista': [9, 10]}, {'x': 9}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 9
DEBUG: Nodo VariableExprContext evaluado con resultado: 9
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 9, Right: 2
DEBUG: visitArithmeticExpr - Result: 1
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 1, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: True
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: True
DEBUG: visitBlock - Visiting stmt, result: True
DEBUG: visitBlock - End with result: True
DEBUG: Nodo BlockContext evaluado con resultado: True
DEBUG: visitFunctionCallExpr - Resultado: True, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'predicat': 'impar', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: True
DEBUG: visitGroupExpr - Result: True
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(carllista)(filterpredicat(cdrllista)))
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCarExpr - Lista evaluada: [9, 10]
DEBUG: visitCarExpr - Resultado: 9
DEBUG: Nodo CarExprContext evaluado con resultado: 9
DEBUG: visitConsExpr - Elemento: 9
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9, 10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9, 10]
DEBUG: visitCdrExpr - Lista evaluada: [9, 10]
DEBUG: visitCdrExpr - Resultado: [10]
DEBUG: Nodo CdrExprContext evaluado con resultado: [10]
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', [10]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'predicat': 'impar', 'llista': [9, 10]}, {'predicat': 'impar', 'llista': [10]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitNullExpr - Lista evaluada: [10]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (predicat(carllista))
DEBUG: visitGroupExpr - Start, texto: (predicat(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: predicat(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: predicat
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCarExpr - Lista evaluada: [10]
DEBUG: visitCarExpr - Resultado: 10
DEBUG: Nodo CarExprContext evaluado con resultado: 10
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [10]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'predicat': 'impar', 'llista': [9, 10]}, {'predicat': 'impar', 'llista': [10]}, {'x': 10}]
DEBUG: Visitando nodo: BlockContext, texto: (=(modx2)1)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (=(modx2)1)
DEBUG: visitComparisonExpr - Start, texto: (=(modx2)1)
DEBUG: Visitando nodo: ArithmeticExprContext, texto: (modx2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 10
DEBUG: Nodo VariableExprContext evaluado con resultado: 10
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: mod, Left: 10, Right: 2
DEBUG: visitArithmeticExpr - Result: 0
DEBUG: Nodo ArithmeticExprContext evaluado con resultado: 0
DEBUG: Visitando nodo: NumberExprContext, texto: 1
DEBUG: visitNumberExpr - Number: 1
DEBUG: Nodo NumberExprContext evaluado con resultado: 1
DEBUG: visitComparisonExpr - Left: 0, Right: 1, Operator: =
DEBUG: visitComparisonExpr - Result: False
DEBUG: visitComparisonExpr - End
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: False
DEBUG: visitBlock - Visiting stmt, result: False
DEBUG: visitBlock - End with result: False
DEBUG: Nodo BlockContext evaluado con resultado: False
DEBUG: visitFunctionCallExpr - Resultado: False, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'predicat': 'impar', 'llista': [9, 10]}, {'predicat': 'impar', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: False
DEBUG: visitGroupExpr - Result: False
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: GroupExprContext, texto: (filterpredicat(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (filterpredicat(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: filterpredicat(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: filter
DEBUG: Visitando nodo: VariableExprContext, texto: predicat
DEBUG: visitVariableExpr - Accediendo a variable: predicat
DEBUG: visitVariableExpr - Encontrada en SymbolTable: predicat = impar
DEBUG: Nodo VariableExprContext evaluado con resultado: impar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [10]
DEBUG: Nodo VariableExprContext evaluado con resultado: [10]
DEBUG: visitCdrExpr - Lista evaluada: [10]
DEBUG: visitCdrExpr - Resultado: []
DEBUG: Nodo CdrExprContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Params: ['predicat', 'llista'], Args: ['impar', []]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'predicat': 'impar', 'llista': [9, 10]}, {'predicat': 'impar', 'llista': [10]}, {'predicat': 'impar', 'llista': []}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())((predicat(carllista))(cons(carllista)(filterpredicat(cdrllista))))(else(filterpredicat(cdrllista))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = []
DEBUG: Nodo VariableExprContext evaluado con resultado: []
DEBUG: visitNullExpr - Lista evaluada: []
DEBUG: visitNullExpr - Resultado: True
DEBUG: Nodo NullExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'predicat': 'impar', 'llista': [9, 10]}, {'predicat': 'impar', 'llista': [10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Else resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}, {'predicat': 'impar', 'llista': [9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitConsExpr - Lista evaluada: []
DEBUG: visitConsExpr - Resultado: [9]
DEBUG: Nodo ConsExprContext evaluado con resultado: [9]
DEBUG: visitCondExpr - Resultado: [9]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [9]
DEBUG: visitBlock - Visiting stmt, result: [9]
DEBUG: visitBlock - End with result: [9]
DEBUG: Nodo BlockContext evaluado con resultado: [9]
DEBUG: visitFunctionCallExpr - Resultado: [9], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [9]
DEBUG: visitGroupExpr - Result: [9]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [9]
DEBUG: visitCondExpr - Else resultado: [9]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [9]
DEBUG: visitBlock - Visiting stmt, result: [9]
DEBUG: visitBlock - End with result: [9]
DEBUG: Nodo BlockContext evaluado con resultado: [9]
DEBUG: visitFunctionCallExpr - Resultado: [9], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [9]
DEBUG: visitGroupExpr - Result: [9]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [9]
DEBUG: visitConsExpr - Lista evaluada: [9]
DEBUG: visitConsExpr - Resultado: [7, 9]
DEBUG: Nodo ConsExprContext evaluado con resultado: [7, 9]
DEBUG: visitCondExpr - Resultado: [7, 9]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [7, 9]
DEBUG: visitBlock - Visiting stmt, result: [7, 9]
DEBUG: visitBlock - End with result: [7, 9]
DEBUG: Nodo BlockContext evaluado con resultado: [7, 9]
DEBUG: visitFunctionCallExpr - Resultado: [7, 9], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [7, 9]
DEBUG: visitGroupExpr - Result: [7, 9]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [7, 9]
DEBUG: visitCondExpr - Else resultado: [7, 9]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [7, 9]
DEBUG: visitBlock - Visiting stmt, result: [7, 9]
DEBUG: visitBlock - End with result: [7, 9]
DEBUG: Nodo BlockContext evaluado con resultado: [7, 9]
DEBUG: visitFunctionCallExpr - Resultado: [7, 9], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [7, 9]
DEBUG: visitGroupExpr - Result: [7, 9]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [7, 9]
DEBUG: visitConsExpr - Lista evaluada: [7, 9]
DEBUG: visitConsExpr - Resultado: [5, 7, 9]
DEBUG: Nodo ConsExprContext evaluado con resultado: [5, 7, 9]
DEBUG: visitCondExpr - Resultado: [5, 7, 9]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [5, 7, 9]
DEBUG: visitBlock - Visiting stmt, result: [5, 7, 9]
DEBUG: visitBlock - End with result: [5, 7, 9]
DEBUG: Nodo BlockContext evaluado con resultado: [5, 7, 9]
DEBUG: visitFunctionCallExpr - Resultado: [5, 7, 9], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [5, 7, 9]
DEBUG: visitGroupExpr - Result: [5, 7, 9]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [5, 7, 9]
DEBUG: visitCondExpr - Else resultado: [5, 7, 9]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [5, 7, 9]
DEBUG: visitBlock - Visiting stmt, result: [5, 7, 9]
DEBUG: visitBlock - End with result: [5, 7, 9]
DEBUG: Nodo BlockContext evaluado con resultado: [5, 7, 9]
DEBUG: visitFunctionCallExpr - Resultado: [5, 7, 9], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [5, 7, 9]
DEBUG: visitGroupExpr - Result: [5, 7, 9]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [5, 7, 9]
DEBUG: visitConsExpr - Lista evaluada: [5, 7, 9]
DEBUG: visitConsExpr - Resultado: [3, 5, 7, 9]
DEBUG: Nodo ConsExprContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitCondExpr - Resultado: [3, 5, 7, 9]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitBlock - Visiting stmt, result: [3, 5, 7, 9]
DEBUG: visitBlock - End with result: [3, 5, 7, 9]
DEBUG: Nodo BlockContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitFunctionCallExpr - Resultado: [3, 5, 7, 9], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitGroupExpr - Result: [3, 5, 7, 9]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitCondExpr - Else resultado: [3, 5, 7, 9]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitBlock - Visiting stmt, result: [3, 5, 7, 9]
DEBUG: visitBlock - End with result: [3, 5, 7, 9]
DEBUG: Nodo BlockContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitFunctionCallExpr - Resultado: [3, 5, 7, 9], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'predicat': 'impar', 'llista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitGroupExpr - Result: [3, 5, 7, 9]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitConsExpr - Lista evaluada: [3, 5, 7, 9]
DEBUG: visitConsExpr - Resultado: [1, 3, 5, 7, 9]
DEBUG: Nodo ConsExprContext evaluado con resultado: [1, 3, 5, 7, 9]
DEBUG: visitCondExpr - Resultado: [1, 3, 5, 7, 9]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [1, 3, 5, 7, 9]
DEBUG: visitBlock - Visiting stmt, result: [1, 3, 5, 7, 9]
DEBUG: visitBlock - End with result: [1, 3, 5, 7, 9]
DEBUG: Nodo BlockContext evaluado con resultado: [1, 3, 5, 7, 9]
DEBUG: visitFunctionCallExpr - Resultado: [1, 3, 5, 7, 9], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [1, 3, 5, 7, 9]
DEBUG: visitGroupExpr - Result: [1, 3, 5, 7, 9]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [1, 3, 5, 7, 9]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [1, 3, 5, 7, 9]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 3, 5, 7, 9]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 3, 5, 7, 9]
DEBUG: visitNullExpr - Lista evaluada: [1, 3, 5, 7, 9]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 3, 5, 7, 9]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 3, 5, 7, 9]
DEBUG: visitCarExpr - Lista evaluada: [1, 3, 5, 7, 9]
DEBUG: visitCarExpr - Resultado: 1
DEBUG: Nodo CarExprContext evaluado con resultado: 1
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [1]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}, {'x': 1}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 1
DEBUG: Nodo VariableExprContext evaluado con resultado: 1
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 1, Right: 2
DEBUG: visitArithmeticExpr - Result: 2
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 2
DEBUG: visitBlock - Visiting stmt, result: 2
DEBUG: visitBlock - End with result: 2
DEBUG: Nodo BlockContext evaluado con resultado: 2
DEBUG: visitFunctionCallExpr - Resultado: 2, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 2
DEBUG: visitGroupExpr - Result: 2
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 2
DEBUG: visitConsExpr - Elemento: 2
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [1, 3, 5, 7, 9]
DEBUG: Nodo VariableExprContext evaluado con resultado: [1, 3, 5, 7, 9]
DEBUG: visitCdrExpr - Lista evaluada: [1, 3, 5, 7, 9]
DEBUG: visitCdrExpr - Resultado: [3, 5, 7, 9]
DEBUG: Nodo CdrExprContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [3, 5, 7, 9]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [3, 5, 7, 9]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 5, 7, 9]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitNullExpr - Lista evaluada: [3, 5, 7, 9]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 5, 7, 9]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitCarExpr - Lista evaluada: [3, 5, 7, 9]
DEBUG: visitCarExpr - Resultado: 3
DEBUG: Nodo CarExprContext evaluado con resultado: 3
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [3]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [3, 5, 7, 9]}, {'x': 3}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 3
DEBUG: Nodo VariableExprContext evaluado con resultado: 3
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 3, Right: 2
DEBUG: visitArithmeticExpr - Result: 6
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 6
DEBUG: visitBlock - Visiting stmt, result: 6
DEBUG: visitBlock - End with result: 6
DEBUG: Nodo BlockContext evaluado con resultado: 6
DEBUG: visitFunctionCallExpr - Resultado: 6, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [3, 5, 7, 9]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 6
DEBUG: visitGroupExpr - Result: 6
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 6
DEBUG: visitConsExpr - Elemento: 6
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [3, 5, 7, 9]
DEBUG: Nodo VariableExprContext evaluado con resultado: [3, 5, 7, 9]
DEBUG: visitCdrExpr - Lista evaluada: [3, 5, 7, 9]
DEBUG: visitCdrExpr - Resultado: [5, 7, 9]
DEBUG: Nodo CdrExprContext evaluado con resultado: [5, 7, 9]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [5, 7, 9]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [5, 7, 9]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 7, 9]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 7, 9]
DEBUG: visitNullExpr - Lista evaluada: [5, 7, 9]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 7, 9]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 7, 9]
DEBUG: visitCarExpr - Lista evaluada: [5, 7, 9]
DEBUG: visitCarExpr - Resultado: 5
DEBUG: Nodo CarExprContext evaluado con resultado: 5
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [5]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [5, 7, 9]}, {'x': 5}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 5
DEBUG: Nodo VariableExprContext evaluado con resultado: 5
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 5, Right: 2
DEBUG: visitArithmeticExpr - Result: 10
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 10
DEBUG: visitBlock - Visiting stmt, result: 10
DEBUG: visitBlock - End with result: 10
DEBUG: Nodo BlockContext evaluado con resultado: 10
DEBUG: visitFunctionCallExpr - Resultado: 10, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [5, 7, 9]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 10
DEBUG: visitGroupExpr - Result: 10
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 10
DEBUG: visitConsExpr - Elemento: 10
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [5, 7, 9]
DEBUG: Nodo VariableExprContext evaluado con resultado: [5, 7, 9]
DEBUG: visitCdrExpr - Lista evaluada: [5, 7, 9]
DEBUG: visitCdrExpr - Resultado: [7, 9]
DEBUG: Nodo CdrExprContext evaluado con resultado: [7, 9]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [7, 9]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [5, 7, 9]}, {'func': 'duplicar', 'llista': [7, 9]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 9]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 9]
DEBUG: visitNullExpr - Lista evaluada: [7, 9]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 9]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 9]
DEBUG: visitCarExpr - Lista evaluada: [7, 9]
DEBUG: visitCarExpr - Resultado: 7
DEBUG: Nodo CarExprContext evaluado con resultado: 7
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [7]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [5, 7, 9]}, {'func': 'duplicar', 'llista': [7, 9]}, {'x': 7}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 7
DEBUG: Nodo VariableExprContext evaluado con resultado: 7
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 7, Right: 2
DEBUG: visitArithmeticExpr - Result: 14
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 14
DEBUG: visitBlock - Visiting stmt, result: 14
DEBUG: visitBlock - End with result: 14
DEBUG: Nodo BlockContext evaluado con resultado: 14
DEBUG: visitFunctionCallExpr - Resultado: 14, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [5, 7, 9]}, {'func': 'duplicar', 'llista': [7, 9]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 14
DEBUG: visitGroupExpr - Result: 14
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 14
DEBUG: visitConsExpr - Elemento: 14
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [7, 9]
DEBUG: Nodo VariableExprContext evaluado con resultado: [7, 9]
DEBUG: visitCdrExpr - Lista evaluada: [7, 9]
DEBUG: visitCdrExpr - Resultado: [9]
DEBUG: Nodo CdrExprContext evaluado con resultado: [9]
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', [9]]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [5, 7, 9]}, {'func': 'duplicar', 'llista': [7, 9]}, {'func': 'duplicar', 'llista': [9]}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9]
DEBUG: visitNullExpr - Lista evaluada: [9]
DEBUG: visitNullExpr - Resultado: False
DEBUG: Nodo NullExprContext evaluado con resultado: False
DEBUG: visitCondExpr - Evaluando condición: False
DEBUG: Visitando nodo: ConsExprContext, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: visitConsExpr - Start, texto: (cons(func(carllista))(mapfunc(cdrllista)))
DEBUG: Visitando nodo: GroupExprContext, texto: (func(carllista))
DEBUG: visitGroupExpr - Start, texto: (func(carllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: func(carllista)
DEBUG: visitFunctionCallExpr - Llamando función: func
DEBUG: Visitando nodo: CarExprContext, texto: (carllista)
DEBUG: visitCarExpr - Start, texto: (carllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9]
DEBUG: visitCarExpr - Lista evaluada: [9]
DEBUG: visitCarExpr - Resultado: 9
DEBUG: Nodo CarExprContext evaluado con resultado: 9
DEBUG: visitFunctionCallExpr - Params: ['x'], Args: [9]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [5, 7, 9]}, {'func': 'duplicar', 'llista': [7, 9]}, {'func': 'duplicar', 'llista': [9]}, {'x': 9}]
DEBUG: Visitando nodo: BlockContext, texto: (*x2)
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (*x2)
DEBUG: Visitando nodo: VariableExprContext, texto: x
DEBUG: visitVariableExpr - Accediendo a variable: x
DEBUG: visitVariableExpr - Encontrada en SymbolTable: x = 9
DEBUG: Nodo VariableExprContext evaluado con resultado: 9
DEBUG: Visitando nodo: NumberExprContext, texto: 2
DEBUG: visitNumberExpr - Number: 2
DEBUG: Nodo NumberExprContext evaluado con resultado: 2
DEBUG: visitArithmeticExpr - Operator: *, Left: 9, Right: 2
DEBUG: visitArithmeticExpr - Result: 18
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: 18
DEBUG: visitBlock - Visiting stmt, result: 18
DEBUG: visitBlock - End with result: 18
DEBUG: Nodo BlockContext evaluado con resultado: 18
DEBUG: visitFunctionCallExpr - Resultado: 18, SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [5, 7, 9]}, {'func': 'duplicar', 'llista': [7, 9]}, {'func': 'duplicar', 'llista': [9]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: 18
DEBUG: visitGroupExpr - Result: 18
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: 18
DEBUG: visitConsExpr - Elemento: 18
DEBUG: Visitando nodo: GroupExprContext, texto: (mapfunc(cdrllista))
DEBUG: visitGroupExpr - Start, texto: (mapfunc(cdrllista))
DEBUG: Visitando nodo: FunctionCallExprContext, texto: mapfunc(cdrllista)
DEBUG: visitFunctionCallExpr - Llamando función: map
DEBUG: Visitando nodo: VariableExprContext, texto: func
DEBUG: visitVariableExpr - Accediendo a variable: func
DEBUG: visitVariableExpr - Encontrada en SymbolTable: func = duplicar
DEBUG: Nodo VariableExprContext evaluado con resultado: duplicar
DEBUG: Visitando nodo: CdrExprContext, texto: (cdrllista)
DEBUG: visitCdrExpr - Start, texto: (cdrllista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = [9]
DEBUG: Nodo VariableExprContext evaluado con resultado: [9]
DEBUG: visitCdrExpr - Lista evaluada: [9]
DEBUG: visitCdrExpr - Resultado: []
DEBUG: Nodo CdrExprContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Params: ['func', 'llista'], Args: ['duplicar', []]
DEBUG: visitFunctionCallExpr - SymbolTable después de añadir scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [5, 7, 9]}, {'func': 'duplicar', 'llista': [7, 9]}, {'func': 'duplicar', 'llista': [9]}, {'func': 'duplicar', 'llista': []}]
DEBUG: Visitando nodo: BlockContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitBlock - Start
DEBUG: Visitando nodo: ExpressionStmtContext, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: visitCondExpr - Start, texto: (cond((null?llista)'())(else(cons(func(carllista))(mapfunc(cdrllista)))))
DEBUG: Visitando nodo: NullExprContext, texto: (null?llista)
DEBUG: visitNullExpr - Start, texto: (null?llista)
DEBUG: Visitando nodo: VariableExprContext, texto: llista
DEBUG: visitVariableExpr - Accediendo a variable: llista
DEBUG: visitVariableExpr - Encontrada en SymbolTable: llista = []
DEBUG: Nodo VariableExprContext evaluado con resultado: []
DEBUG: visitNullExpr - Lista evaluada: []
DEBUG: visitNullExpr - Resultado: True
DEBUG: Nodo NullExprContext evaluado con resultado: True
DEBUG: visitCondExpr - Evaluando condición: True
DEBUG: Visitando nodo: EmptyListExprContext, texto: '()
DEBUG: visitEmptyListExpr - Start, texto: '()
DEBUG: visitEmptyListExpr - Resultado: []
DEBUG: Nodo EmptyListExprContext evaluado con resultado: []
DEBUG: visitCondExpr - Resultado: []
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: []
DEBUG: visitBlock - Visiting stmt, result: []
DEBUG: visitBlock - End with result: []
DEBUG: Nodo BlockContext evaluado con resultado: []
DEBUG: visitFunctionCallExpr - Resultado: [], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [5, 7, 9]}, {'func': 'duplicar', 'llista': [7, 9]}, {'func': 'duplicar', 'llista': [9]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: []
DEBUG: visitGroupExpr - Result: []
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: []
DEBUG: visitConsExpr - Lista evaluada: []
DEBUG: visitConsExpr - Resultado: [18]
DEBUG: Nodo ConsExprContext evaluado con resultado: [18]
DEBUG: visitCondExpr - Else resultado: [18]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [18]
DEBUG: visitBlock - Visiting stmt, result: [18]
DEBUG: visitBlock - End with result: [18]
DEBUG: Nodo BlockContext evaluado con resultado: [18]
DEBUG: visitFunctionCallExpr - Resultado: [18], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [5, 7, 9]}, {'func': 'duplicar', 'llista': [7, 9]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [18]
DEBUG: visitGroupExpr - Result: [18]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [18]
DEBUG: visitConsExpr - Lista evaluada: [18]
DEBUG: visitConsExpr - Resultado: [14, 18]
DEBUG: Nodo ConsExprContext evaluado con resultado: [14, 18]
DEBUG: visitCondExpr - Else resultado: [14, 18]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [14, 18]
DEBUG: visitBlock - Visiting stmt, result: [14, 18]
DEBUG: visitBlock - End with result: [14, 18]
DEBUG: Nodo BlockContext evaluado con resultado: [14, 18]
DEBUG: visitFunctionCallExpr - Resultado: [14, 18], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [5, 7, 9]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [14, 18]
DEBUG: visitGroupExpr - Result: [14, 18]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [14, 18]
DEBUG: visitConsExpr - Lista evaluada: [14, 18]
DEBUG: visitConsExpr - Resultado: [10, 14, 18]
DEBUG: Nodo ConsExprContext evaluado con resultado: [10, 14, 18]
DEBUG: visitCondExpr - Else resultado: [10, 14, 18]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [10, 14, 18]
DEBUG: visitBlock - Visiting stmt, result: [10, 14, 18]
DEBUG: visitBlock - End with result: [10, 14, 18]
DEBUG: Nodo BlockContext evaluado con resultado: [10, 14, 18]
DEBUG: visitFunctionCallExpr - Resultado: [10, 14, 18], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}, {'func': 'duplicar', 'llista': [3, 5, 7, 9]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [10, 14, 18]
DEBUG: visitGroupExpr - Result: [10, 14, 18]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [10, 14, 18]
DEBUG: visitConsExpr - Lista evaluada: [10, 14, 18]
DEBUG: visitConsExpr - Resultado: [6, 10, 14, 18]
DEBUG: Nodo ConsExprContext evaluado con resultado: [6, 10, 14, 18]
DEBUG: visitCondExpr - Else resultado: [6, 10, 14, 18]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [6, 10, 14, 18]
DEBUG: visitBlock - Visiting stmt, result: [6, 10, 14, 18]
DEBUG: visitBlock - End with result: [6, 10, 14, 18]
DEBUG: Nodo BlockContext evaluado con resultado: [6, 10, 14, 18]
DEBUG: visitFunctionCallExpr - Resultado: [6, 10, 14, 18], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'func': 'duplicar', 'llista': [1, 3, 5, 7, 9]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [6, 10, 14, 18]
DEBUG: visitGroupExpr - Result: [6, 10, 14, 18]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [6, 10, 14, 18]
DEBUG: visitConsExpr - Lista evaluada: [6, 10, 14, 18]
DEBUG: visitConsExpr - Resultado: [2, 6, 10, 14, 18]
DEBUG: Nodo ConsExprContext evaluado con resultado: [2, 6, 10, 14, 18]
DEBUG: visitCondExpr - Else resultado: [2, 6, 10, 14, 18]
DEBUG: Nodo ExpressionStmtContext evaluado con resultado: [2, 6, 10, 14, 18]
DEBUG: visitBlock - Visiting stmt, result: [2, 6, 10, 14, 18]
DEBUG: visitBlock - End with result: [2, 6, 10, 14, 18]
DEBUG: Nodo BlockContext evaluado con resultado: [2, 6, 10, 14, 18]
DEBUG: visitFunctionCallExpr - Resultado: [2, 6, 10, 14, 18], SymbolTable después de limpiar scope: [{'lista': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}]
DEBUG: Nodo FunctionCallExprContext evaluado con resultado: [2, 6, 10, 14, 18]
DEBUG: visitGroupExpr - Result: [2, 6, 10, 14, 18]
DEBUG: visitGroupExpr - End
DEBUG: Nodo GroupExprContext evaluado con resultado: [2, 6, 10, 14, 18]
DEBUG: visitDisplayExpr - Valor evaluado: (2 6 10 14 18)
(2 6 10 14 18)DEBUG: visitDisplayExpr - End
DEBUG: Nodo DisplayExprContext evaluado con resultado: (2 6 10 14 18)
DEBUG: visitRoot - Visiting child: (newline)
DEBUG: Visitando nodo: NewlineExprContext, texto: (newline)
DEBUG: visitNewlineExpr - Printing newline

DEBUG: Nodo NewlineExprContext evaluado con resultado: None
DEBUG: visitRoot - Visiting child: <EOF>
DEBUG: Visitando nodo: TerminalNodeImpl, texto: <EOF>
DEBUG: Nodo TerminalNodeImpl evaluado con resultado: None
DEBUG: visitRoot - End with result: (2 6 10 14 18)
DEBUG: Nodo RootContext evaluado con resultado: (2 6 10 14 18)
DEBUG: Resultado de la evaluación inicial: (2 6 10 14 18)
DEBUG: No se encontró la función 'main'.
DEBUG: Procesamiento completado.
