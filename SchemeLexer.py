# Generated from Scheme.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,251,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,1,
        1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,
        1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,
        11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,
        14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
        16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,
        22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,
        27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,
        31,1,31,3,31,194,8,31,1,31,1,31,1,31,1,31,3,31,200,8,31,5,31,202,
        8,31,10,31,12,31,205,9,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,
        1,33,1,33,5,33,217,8,33,10,33,12,33,220,9,33,1,33,1,33,1,34,1,34,
        5,34,226,8,34,10,34,12,34,229,9,34,1,35,4,35,232,8,35,11,35,12,35,
        233,1,36,1,36,5,36,238,8,36,10,36,12,36,241,9,36,1,36,1,36,1,37,
        4,37,246,8,37,11,37,12,37,247,1,37,1,37,0,0,38,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
        1,0,6,2,0,34,34,92,92,2,0,65,90,97,122,5,0,45,45,48,57,65,90,95,
        95,97,122,1,0,48,57,2,0,10,10,13,13,3,0,9,10,13,13,32,32,261,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
        0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,79,1,0,0,0,5,81,1,0,
        0,0,7,84,1,0,0,0,9,87,1,0,0,0,11,90,1,0,0,0,13,95,1,0,0,0,15,99,
        1,0,0,0,17,104,1,0,0,0,19,112,1,0,0,0,21,120,1,0,0,0,23,124,1,0,
        0,0,25,128,1,0,0,0,27,133,1,0,0,0,29,139,1,0,0,0,31,144,1,0,0,0,
        33,151,1,0,0,0,35,153,1,0,0,0,37,155,1,0,0,0,39,157,1,0,0,0,41,159,
        1,0,0,0,43,163,1,0,0,0,45,165,1,0,0,0,47,168,1,0,0,0,49,171,1,0,
        0,0,51,174,1,0,0,0,53,176,1,0,0,0,55,178,1,0,0,0,57,180,1,0,0,0,
        59,183,1,0,0,0,61,186,1,0,0,0,63,188,1,0,0,0,65,208,1,0,0,0,67,212,
        1,0,0,0,69,223,1,0,0,0,71,231,1,0,0,0,73,235,1,0,0,0,75,245,1,0,
        0,0,77,78,5,40,0,0,78,2,1,0,0,0,79,80,5,41,0,0,80,4,1,0,0,0,81,82,
        5,35,0,0,82,83,5,116,0,0,83,6,1,0,0,0,84,85,5,35,0,0,85,86,5,102,
        0,0,86,8,1,0,0,0,87,88,5,105,0,0,88,89,5,102,0,0,89,10,1,0,0,0,90,
        91,5,99,0,0,91,92,5,111,0,0,92,93,5,110,0,0,93,94,5,100,0,0,94,12,
        1,0,0,0,95,96,5,108,0,0,96,97,5,101,0,0,97,98,5,116,0,0,98,14,1,
        0,0,0,99,100,5,114,0,0,100,101,5,101,0,0,101,102,5,97,0,0,102,103,
        5,100,0,0,103,16,1,0,0,0,104,105,5,100,0,0,105,106,5,105,0,0,106,
        107,5,115,0,0,107,108,5,112,0,0,108,109,5,108,0,0,109,110,5,97,0,
        0,110,111,5,121,0,0,111,18,1,0,0,0,112,113,5,110,0,0,113,114,5,101,
        0,0,114,115,5,119,0,0,115,116,5,108,0,0,116,117,5,105,0,0,117,118,
        5,110,0,0,118,119,5,101,0,0,119,20,1,0,0,0,120,121,5,99,0,0,121,
        122,5,97,0,0,122,123,5,114,0,0,123,22,1,0,0,0,124,125,5,99,0,0,125,
        126,5,100,0,0,126,127,5,114,0,0,127,24,1,0,0,0,128,129,5,99,0,0,
        129,130,5,111,0,0,130,131,5,110,0,0,131,132,5,115,0,0,132,26,1,0,
        0,0,133,134,5,110,0,0,134,135,5,117,0,0,135,136,5,108,0,0,136,137,
        5,108,0,0,137,138,5,63,0,0,138,28,1,0,0,0,139,140,5,101,0,0,140,
        141,5,108,0,0,141,142,5,115,0,0,142,143,5,101,0,0,143,30,1,0,0,0,
        144,145,5,100,0,0,145,146,5,101,0,0,146,147,5,102,0,0,147,148,5,
        105,0,0,148,149,5,110,0,0,149,150,5,101,0,0,150,32,1,0,0,0,151,152,
        5,43,0,0,152,34,1,0,0,0,153,154,5,45,0,0,154,36,1,0,0,0,155,156,
        5,42,0,0,156,38,1,0,0,0,157,158,5,47,0,0,158,40,1,0,0,0,159,160,
        5,109,0,0,160,161,5,111,0,0,161,162,5,100,0,0,162,42,1,0,0,0,163,
        164,5,94,0,0,164,44,1,0,0,0,165,166,5,33,0,0,166,167,5,61,0,0,167,
        46,1,0,0,0,168,169,5,60,0,0,169,170,5,61,0,0,170,48,1,0,0,0,171,
        172,5,62,0,0,172,173,5,61,0,0,173,50,1,0,0,0,174,175,5,60,0,0,175,
        52,1,0,0,0,176,177,5,62,0,0,177,54,1,0,0,0,178,179,5,61,0,0,179,
        56,1,0,0,0,180,181,5,38,0,0,181,182,5,38,0,0,182,58,1,0,0,0,183,
        184,5,124,0,0,184,185,5,124,0,0,185,60,1,0,0,0,186,187,5,33,0,0,
        187,62,1,0,0,0,188,189,5,39,0,0,189,193,5,40,0,0,190,194,3,71,35,
        0,191,194,3,69,34,0,192,194,3,67,33,0,193,190,1,0,0,0,193,191,1,
        0,0,0,193,192,1,0,0,0,194,203,1,0,0,0,195,199,3,75,37,0,196,200,
        3,71,35,0,197,200,3,69,34,0,198,200,3,67,33,0,199,196,1,0,0,0,199,
        197,1,0,0,0,199,198,1,0,0,0,200,202,1,0,0,0,201,195,1,0,0,0,202,
        205,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,206,1,0,0,0,205,
        203,1,0,0,0,206,207,5,41,0,0,207,64,1,0,0,0,208,209,5,39,0,0,209,
        210,5,40,0,0,210,211,5,41,0,0,211,66,1,0,0,0,212,218,5,34,0,0,213,
        217,8,0,0,0,214,215,5,92,0,0,215,217,9,0,0,0,216,213,1,0,0,0,216,
        214,1,0,0,0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,
        221,1,0,0,0,220,218,1,0,0,0,221,222,5,34,0,0,222,68,1,0,0,0,223,
        227,7,1,0,0,224,226,7,2,0,0,225,224,1,0,0,0,226,229,1,0,0,0,227,
        225,1,0,0,0,227,228,1,0,0,0,228,70,1,0,0,0,229,227,1,0,0,0,230,232,
        7,3,0,0,231,230,1,0,0,0,232,233,1,0,0,0,233,231,1,0,0,0,233,234,
        1,0,0,0,234,72,1,0,0,0,235,239,5,59,0,0,236,238,8,4,0,0,237,236,
        1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,242,
        1,0,0,0,241,239,1,0,0,0,242,243,6,36,0,0,243,74,1,0,0,0,244,246,
        7,5,0,0,245,244,1,0,0,0,246,247,1,0,0,0,247,245,1,0,0,0,247,248,
        1,0,0,0,248,249,1,0,0,0,249,250,6,37,0,0,250,76,1,0,0,0,10,0,193,
        199,203,216,218,227,233,239,247,1,6,0,0
    ]

class SchemeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    SUM = 17
    SUB = 18
    PROD = 19
    DIV = 20
    MOD = 21
    EXP = 22
    NOTEQ = 23
    LESSEQ = 24
    GREATEREQ = 25
    LESS = 26
    GREATER = 27
    EQ = 28
    AND = 29
    OR = 30
    NOT = 31
    LIST = 32
    EMPTY_LIST = 33
    STRING = 34
    ID = 35
    NUM = 36
    COMMENT = 37
    WS = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'#t'", "'#f'", "'if'", "'cond'", "'let'", "'read'", 
            "'display'", "'newline'", "'car'", "'cdr'", "'cons'", "'null?'", 
            "'else'", "'define'", "'+'", "'-'", "'*'", "'/'", "'mod'", "'^'", 
            "'!='", "'<='", "'>='", "'<'", "'>'", "'='", "'&&'", "'||'", 
            "'!'" ]

    symbolicNames = [ "<INVALID>",
            "SUM", "SUB", "PROD", "DIV", "MOD", "EXP", "NOTEQ", "LESSEQ", 
            "GREATEREQ", "LESS", "GREATER", "EQ", "AND", "OR", "NOT", "LIST", 
            "EMPTY_LIST", "STRING", "ID", "NUM", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "SUM", "SUB", "PROD", "DIV", "MOD", 
                  "EXP", "NOTEQ", "LESSEQ", "GREATEREQ", "LESS", "GREATER", 
                  "EQ", "AND", "OR", "NOT", "LIST", "EMPTY_LIST", "STRING", 
                  "ID", "NUM", "COMMENT", "WS" ]

    grammarFileName = "Scheme.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


