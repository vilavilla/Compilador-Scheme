# Generated from Scheme.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,262,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
        1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
        1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,
        1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,
        1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
        3,32,205,8,32,1,32,1,32,1,32,1,32,3,32,211,8,32,5,32,213,8,32,10,
        32,12,32,216,9,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,
        34,5,34,228,8,34,10,34,12,34,231,9,34,1,34,1,34,1,35,1,35,5,35,237,
        8,35,10,35,12,35,240,9,35,1,36,4,36,243,8,36,11,36,12,36,244,1,37,
        1,37,5,37,249,8,37,10,37,12,37,252,9,37,1,37,1,37,1,38,4,38,257,
        8,38,11,38,12,38,258,1,38,1,38,0,0,39,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,1,0,
        6,2,0,34,34,92,92,2,0,65,90,97,122,5,0,45,45,48,57,65,90,95,95,97,
        122,1,0,48,57,2,0,10,10,13,13,3,0,9,10,13,13,32,32,272,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
        73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,79,1,0,0,0,3,81,1,0,0,0,5,
        83,1,0,0,0,7,86,1,0,0,0,9,89,1,0,0,0,11,92,1,0,0,0,13,97,1,0,0,0,
        15,101,1,0,0,0,17,106,1,0,0,0,19,114,1,0,0,0,21,120,1,0,0,0,23,128,
        1,0,0,0,25,132,1,0,0,0,27,136,1,0,0,0,29,141,1,0,0,0,31,147,1,0,
        0,0,33,152,1,0,0,0,35,159,1,0,0,0,37,161,1,0,0,0,39,163,1,0,0,0,
        41,165,1,0,0,0,43,167,1,0,0,0,45,171,1,0,0,0,47,173,1,0,0,0,49,176,
        1,0,0,0,51,179,1,0,0,0,53,182,1,0,0,0,55,184,1,0,0,0,57,186,1,0,
        0,0,59,188,1,0,0,0,61,192,1,0,0,0,63,195,1,0,0,0,65,199,1,0,0,0,
        67,219,1,0,0,0,69,223,1,0,0,0,71,234,1,0,0,0,73,242,1,0,0,0,75,246,
        1,0,0,0,77,256,1,0,0,0,79,80,5,40,0,0,80,2,1,0,0,0,81,82,5,41,0,
        0,82,4,1,0,0,0,83,84,5,35,0,0,84,85,5,116,0,0,85,6,1,0,0,0,86,87,
        5,35,0,0,87,88,5,102,0,0,88,8,1,0,0,0,89,90,5,105,0,0,90,91,5,102,
        0,0,91,10,1,0,0,0,92,93,5,99,0,0,93,94,5,111,0,0,94,95,5,110,0,0,
        95,96,5,100,0,0,96,12,1,0,0,0,97,98,5,108,0,0,98,99,5,101,0,0,99,
        100,5,116,0,0,100,14,1,0,0,0,101,102,5,114,0,0,102,103,5,101,0,0,
        103,104,5,97,0,0,104,105,5,100,0,0,105,16,1,0,0,0,106,107,5,100,
        0,0,107,108,5,105,0,0,108,109,5,115,0,0,109,110,5,112,0,0,110,111,
        5,108,0,0,111,112,5,97,0,0,112,113,5,121,0,0,113,18,1,0,0,0,114,
        115,5,119,0,0,115,116,5,114,0,0,116,117,5,105,0,0,117,118,5,116,
        0,0,118,119,5,101,0,0,119,20,1,0,0,0,120,121,5,110,0,0,121,122,5,
        101,0,0,122,123,5,119,0,0,123,124,5,108,0,0,124,125,5,105,0,0,125,
        126,5,110,0,0,126,127,5,101,0,0,127,22,1,0,0,0,128,129,5,99,0,0,
        129,130,5,97,0,0,130,131,5,114,0,0,131,24,1,0,0,0,132,133,5,99,0,
        0,133,134,5,100,0,0,134,135,5,114,0,0,135,26,1,0,0,0,136,137,5,99,
        0,0,137,138,5,111,0,0,138,139,5,110,0,0,139,140,5,115,0,0,140,28,
        1,0,0,0,141,142,5,110,0,0,142,143,5,117,0,0,143,144,5,108,0,0,144,
        145,5,108,0,0,145,146,5,63,0,0,146,30,1,0,0,0,147,148,5,101,0,0,
        148,149,5,108,0,0,149,150,5,115,0,0,150,151,5,101,0,0,151,32,1,0,
        0,0,152,153,5,100,0,0,153,154,5,101,0,0,154,155,5,102,0,0,155,156,
        5,105,0,0,156,157,5,110,0,0,157,158,5,101,0,0,158,34,1,0,0,0,159,
        160,5,43,0,0,160,36,1,0,0,0,161,162,5,45,0,0,162,38,1,0,0,0,163,
        164,5,42,0,0,164,40,1,0,0,0,165,166,5,47,0,0,166,42,1,0,0,0,167,
        168,5,109,0,0,168,169,5,111,0,0,169,170,5,100,0,0,170,44,1,0,0,0,
        171,172,5,94,0,0,172,46,1,0,0,0,173,174,5,60,0,0,174,175,5,62,0,
        0,175,48,1,0,0,0,176,177,5,60,0,0,177,178,5,61,0,0,178,50,1,0,0,
        0,179,180,5,62,0,0,180,181,5,61,0,0,181,52,1,0,0,0,182,183,5,60,
        0,0,183,54,1,0,0,0,184,185,5,62,0,0,185,56,1,0,0,0,186,187,5,61,
        0,0,187,58,1,0,0,0,188,189,5,97,0,0,189,190,5,110,0,0,190,191,5,
        100,0,0,191,60,1,0,0,0,192,193,5,111,0,0,193,194,5,114,0,0,194,62,
        1,0,0,0,195,196,5,110,0,0,196,197,5,111,0,0,197,198,5,116,0,0,198,
        64,1,0,0,0,199,200,5,39,0,0,200,204,5,40,0,0,201,205,3,73,36,0,202,
        205,3,71,35,0,203,205,3,69,34,0,204,201,1,0,0,0,204,202,1,0,0,0,
        204,203,1,0,0,0,205,214,1,0,0,0,206,210,3,77,38,0,207,211,3,73,36,
        0,208,211,3,71,35,0,209,211,3,69,34,0,210,207,1,0,0,0,210,208,1,
        0,0,0,210,209,1,0,0,0,211,213,1,0,0,0,212,206,1,0,0,0,213,216,1,
        0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,217,1,0,0,0,216,214,1,
        0,0,0,217,218,5,41,0,0,218,66,1,0,0,0,219,220,5,39,0,0,220,221,5,
        40,0,0,221,222,5,41,0,0,222,68,1,0,0,0,223,229,5,34,0,0,224,228,
        8,0,0,0,225,226,5,92,0,0,226,228,9,0,0,0,227,224,1,0,0,0,227,225,
        1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,232,
        1,0,0,0,231,229,1,0,0,0,232,233,5,34,0,0,233,70,1,0,0,0,234,238,
        7,1,0,0,235,237,7,2,0,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,
        1,0,0,0,238,239,1,0,0,0,239,72,1,0,0,0,240,238,1,0,0,0,241,243,7,
        3,0,0,242,241,1,0,0,0,243,244,1,0,0,0,244,242,1,0,0,0,244,245,1,
        0,0,0,245,74,1,0,0,0,246,250,5,59,0,0,247,249,8,4,0,0,248,247,1,
        0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,253,1,
        0,0,0,252,250,1,0,0,0,253,254,6,37,0,0,254,76,1,0,0,0,255,257,7,
        5,0,0,256,255,1,0,0,0,257,258,1,0,0,0,258,256,1,0,0,0,258,259,1,
        0,0,0,259,260,1,0,0,0,260,261,6,38,0,0,261,78,1,0,0,0,10,0,204,210,
        214,227,229,238,244,250,258,1,6,0,0
    ]

class SchemeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    SUM = 18
    SUB = 19
    PROD = 20
    DIV = 21
    MOD = 22
    EXP = 23
    NOTEQ = 24
    LESSEQ = 25
    GREATEREQ = 26
    LESS = 27
    GREATER = 28
    EQ = 29
    AND = 30
    OR = 31
    NOT = 32
    LIST = 33
    EMPTY_LIST = 34
    STRING = 35
    ID = 36
    NUM = 37
    COMMENT = 38
    WS = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'#t'", "'#f'", "'if'", "'cond'", "'let'", "'read'", 
            "'display'", "'write'", "'newline'", "'car'", "'cdr'", "'cons'", 
            "'null?'", "'else'", "'define'", "'+'", "'-'", "'*'", "'/'", 
            "'mod'", "'^'", "'<>'", "'<='", "'>='", "'<'", "'>'", "'='", 
            "'and'", "'or'", "'not'" ]

    symbolicNames = [ "<INVALID>",
            "SUM", "SUB", "PROD", "DIV", "MOD", "EXP", "NOTEQ", "LESSEQ", 
            "GREATEREQ", "LESS", "GREATER", "EQ", "AND", "OR", "NOT", "LIST", 
            "EMPTY_LIST", "STRING", "ID", "NUM", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "SUM", "SUB", "PROD", "DIV", 
                  "MOD", "EXP", "NOTEQ", "LESSEQ", "GREATEREQ", "LESS", 
                  "GREATER", "EQ", "AND", "OR", "NOT", "LIST", "EMPTY_LIST", 
                  "STRING", "ID", "NUM", "COMMENT", "WS" ]

    grammarFileName = "Scheme.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


