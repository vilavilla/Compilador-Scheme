# Generated from Scheme.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,44,323,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,1,0,1,0,1,1,1,1,
        1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,
        1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,
        1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,
        1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,
        1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,
        1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,3,37,266,8,37,1,37,
        1,37,1,37,1,37,3,37,272,8,37,5,37,274,8,37,10,37,12,37,277,9,37,
        1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,5,39,289,8,39,
        10,39,12,39,292,9,39,1,39,1,39,1,40,1,40,5,40,298,8,40,10,40,12,
        40,301,9,40,1,41,4,41,304,8,41,11,41,12,41,305,1,42,1,42,5,42,310,
        8,42,10,42,12,42,313,9,42,1,42,1,42,1,43,4,43,318,8,43,11,43,12,
        43,319,1,43,1,43,0,0,44,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
        85,43,87,44,1,0,6,2,0,34,34,92,92,2,0,65,90,97,122,5,0,45,45,48,
        57,65,90,95,95,97,122,1,0,48,57,2,0,10,10,13,13,3,0,9,10,13,13,32,
        32,333,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
        0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
        0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,1,89,1,0,0,
        0,3,91,1,0,0,0,5,93,1,0,0,0,7,96,1,0,0,0,9,99,1,0,0,0,11,102,1,0,
        0,0,13,107,1,0,0,0,15,111,1,0,0,0,17,116,1,0,0,0,19,124,1,0,0,0,
        21,130,1,0,0,0,23,138,1,0,0,0,25,142,1,0,0,0,27,146,1,0,0,0,29,151,
        1,0,0,0,31,157,1,0,0,0,33,164,1,0,0,0,35,171,1,0,0,0,37,185,1,0,
        0,0,39,199,1,0,0,0,41,208,1,0,0,0,43,213,1,0,0,0,45,220,1,0,0,0,
        47,222,1,0,0,0,49,224,1,0,0,0,51,226,1,0,0,0,53,228,1,0,0,0,55,232,
        1,0,0,0,57,234,1,0,0,0,59,237,1,0,0,0,61,240,1,0,0,0,63,243,1,0,
        0,0,65,245,1,0,0,0,67,247,1,0,0,0,69,249,1,0,0,0,71,253,1,0,0,0,
        73,256,1,0,0,0,75,260,1,0,0,0,77,280,1,0,0,0,79,284,1,0,0,0,81,295,
        1,0,0,0,83,303,1,0,0,0,85,307,1,0,0,0,87,317,1,0,0,0,89,90,5,40,
        0,0,90,2,1,0,0,0,91,92,5,41,0,0,92,4,1,0,0,0,93,94,5,35,0,0,94,95,
        5,116,0,0,95,6,1,0,0,0,96,97,5,35,0,0,97,98,5,102,0,0,98,8,1,0,0,
        0,99,100,5,105,0,0,100,101,5,102,0,0,101,10,1,0,0,0,102,103,5,99,
        0,0,103,104,5,111,0,0,104,105,5,110,0,0,105,106,5,100,0,0,106,12,
        1,0,0,0,107,108,5,108,0,0,108,109,5,101,0,0,109,110,5,116,0,0,110,
        14,1,0,0,0,111,112,5,114,0,0,112,113,5,101,0,0,113,114,5,97,0,0,
        114,115,5,100,0,0,115,16,1,0,0,0,116,117,5,100,0,0,117,118,5,105,
        0,0,118,119,5,115,0,0,119,120,5,112,0,0,120,121,5,108,0,0,121,122,
        5,97,0,0,122,123,5,121,0,0,123,18,1,0,0,0,124,125,5,119,0,0,125,
        126,5,114,0,0,126,127,5,105,0,0,127,128,5,116,0,0,128,129,5,101,
        0,0,129,20,1,0,0,0,130,131,5,110,0,0,131,132,5,101,0,0,132,133,5,
        119,0,0,133,134,5,108,0,0,134,135,5,105,0,0,135,136,5,110,0,0,136,
        137,5,101,0,0,137,22,1,0,0,0,138,139,5,99,0,0,139,140,5,97,0,0,140,
        141,5,114,0,0,141,24,1,0,0,0,142,143,5,99,0,0,143,144,5,100,0,0,
        144,145,5,114,0,0,145,26,1,0,0,0,146,147,5,99,0,0,147,148,5,111,
        0,0,148,149,5,110,0,0,149,150,5,115,0,0,150,28,1,0,0,0,151,152,5,
        110,0,0,152,153,5,117,0,0,153,154,5,108,0,0,154,155,5,108,0,0,155,
        156,5,63,0,0,156,30,1,0,0,0,157,158,5,108,0,0,158,159,5,101,0,0,
        159,160,5,110,0,0,160,161,5,103,0,0,161,162,5,116,0,0,162,163,5,
        104,0,0,163,32,1,0,0,0,164,165,5,97,0,0,165,166,5,112,0,0,166,167,
        5,112,0,0,167,168,5,101,0,0,168,169,5,110,0,0,169,170,5,100,0,0,
        170,34,1,0,0,0,171,172,5,115,0,0,172,173,5,116,0,0,173,174,5,114,
        0,0,174,175,5,105,0,0,175,176,5,110,0,0,176,177,5,103,0,0,177,178,
        5,45,0,0,178,179,5,97,0,0,179,180,5,112,0,0,180,181,5,112,0,0,181,
        182,5,101,0,0,182,183,5,110,0,0,183,184,5,100,0,0,184,36,1,0,0,0,
        185,186,5,115,0,0,186,187,5,116,0,0,187,188,5,114,0,0,188,189,5,
        105,0,0,189,190,5,110,0,0,190,191,5,103,0,0,191,192,5,45,0,0,192,
        193,5,108,0,0,193,194,5,101,0,0,194,195,5,110,0,0,195,196,5,103,
        0,0,196,197,5,116,0,0,197,198,5,104,0,0,198,38,1,0,0,0,199,200,5,
        115,0,0,200,201,5,116,0,0,201,202,5,114,0,0,202,203,5,105,0,0,203,
        204,5,110,0,0,204,205,5,103,0,0,205,206,5,61,0,0,206,207,5,63,0,
        0,207,40,1,0,0,0,208,209,5,101,0,0,209,210,5,108,0,0,210,211,5,115,
        0,0,211,212,5,101,0,0,212,42,1,0,0,0,213,214,5,100,0,0,214,215,5,
        101,0,0,215,216,5,102,0,0,216,217,5,105,0,0,217,218,5,110,0,0,218,
        219,5,101,0,0,219,44,1,0,0,0,220,221,5,43,0,0,221,46,1,0,0,0,222,
        223,5,45,0,0,223,48,1,0,0,0,224,225,5,42,0,0,225,50,1,0,0,0,226,
        227,5,47,0,0,227,52,1,0,0,0,228,229,5,109,0,0,229,230,5,111,0,0,
        230,231,5,100,0,0,231,54,1,0,0,0,232,233,5,94,0,0,233,56,1,0,0,0,
        234,235,5,60,0,0,235,236,5,62,0,0,236,58,1,0,0,0,237,238,5,60,0,
        0,238,239,5,61,0,0,239,60,1,0,0,0,240,241,5,62,0,0,241,242,5,61,
        0,0,242,62,1,0,0,0,243,244,5,60,0,0,244,64,1,0,0,0,245,246,5,62,
        0,0,246,66,1,0,0,0,247,248,5,61,0,0,248,68,1,0,0,0,249,250,5,97,
        0,0,250,251,5,110,0,0,251,252,5,100,0,0,252,70,1,0,0,0,253,254,5,
        111,0,0,254,255,5,114,0,0,255,72,1,0,0,0,256,257,5,110,0,0,257,258,
        5,111,0,0,258,259,5,116,0,0,259,74,1,0,0,0,260,261,5,39,0,0,261,
        265,5,40,0,0,262,266,3,83,41,0,263,266,3,81,40,0,264,266,3,79,39,
        0,265,262,1,0,0,0,265,263,1,0,0,0,265,264,1,0,0,0,266,275,1,0,0,
        0,267,271,3,87,43,0,268,272,3,83,41,0,269,272,3,81,40,0,270,272,
        3,79,39,0,271,268,1,0,0,0,271,269,1,0,0,0,271,270,1,0,0,0,272,274,
        1,0,0,0,273,267,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,276,
        1,0,0,0,276,278,1,0,0,0,277,275,1,0,0,0,278,279,5,41,0,0,279,76,
        1,0,0,0,280,281,5,39,0,0,281,282,5,40,0,0,282,283,5,41,0,0,283,78,
        1,0,0,0,284,290,5,34,0,0,285,289,8,0,0,0,286,287,5,92,0,0,287,289,
        9,0,0,0,288,285,1,0,0,0,288,286,1,0,0,0,289,292,1,0,0,0,290,288,
        1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,290,1,0,0,0,293,294,
        5,34,0,0,294,80,1,0,0,0,295,299,7,1,0,0,296,298,7,2,0,0,297,296,
        1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,82,1,
        0,0,0,301,299,1,0,0,0,302,304,7,3,0,0,303,302,1,0,0,0,304,305,1,
        0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,84,1,0,0,0,307,311,5,59,
        0,0,308,310,8,4,0,0,309,308,1,0,0,0,310,313,1,0,0,0,311,309,1,0,
        0,0,311,312,1,0,0,0,312,314,1,0,0,0,313,311,1,0,0,0,314,315,6,42,
        0,0,315,86,1,0,0,0,316,318,7,5,0,0,317,316,1,0,0,0,318,319,1,0,0,
        0,319,317,1,0,0,0,319,320,1,0,0,0,320,321,1,0,0,0,321,322,6,43,0,
        0,322,88,1,0,0,0,10,0,265,271,275,288,290,299,305,311,319,1,6,0,
        0
    ]

class SchemeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    SUM = 23
    SUB = 24
    PROD = 25
    DIV = 26
    MOD = 27
    EXP = 28
    NOTEQ = 29
    LESSEQ = 30
    GREATEREQ = 31
    LESS = 32
    GREATER = 33
    EQ = 34
    AND = 35
    OR = 36
    NOT = 37
    LIST = 38
    EMPTY_LIST = 39
    STRING = 40
    ID = 41
    NUM = 42
    COMMENT = 43
    WS = 44

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'#t'", "'#f'", "'if'", "'cond'", "'let'", "'read'", 
            "'display'", "'write'", "'newline'", "'car'", "'cdr'", "'cons'", 
            "'null?'", "'length'", "'append'", "'string-append'", "'string-length'", 
            "'string=?'", "'else'", "'define'", "'+'", "'-'", "'*'", "'/'", 
            "'mod'", "'^'", "'<>'", "'<='", "'>='", "'<'", "'>'", "'='", 
            "'and'", "'or'", "'not'" ]

    symbolicNames = [ "<INVALID>",
            "SUM", "SUB", "PROD", "DIV", "MOD", "EXP", "NOTEQ", "LESSEQ", 
            "GREATEREQ", "LESS", "GREATER", "EQ", "AND", "OR", "NOT", "LIST", 
            "EMPTY_LIST", "STRING", "ID", "NUM", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "SUM", "SUB", "PROD", "DIV", "MOD", 
                  "EXP", "NOTEQ", "LESSEQ", "GREATEREQ", "LESS", "GREATER", 
                  "EQ", "AND", "OR", "NOT", "LIST", "EMPTY_LIST", "STRING", 
                  "ID", "NUM", "COMMENT", "WS" ]

    grammarFileName = "Scheme.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


